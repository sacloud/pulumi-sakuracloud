// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Private Host resource. This can be used to create, update, and delete Private Hosts.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/private_host.html.markdown.
type PrivateHost struct {
	s *pulumi.ResourceState
}

// NewPrivateHost registers a new resource with the given unique name, arguments, and options.
func NewPrivateHost(ctx *pulumi.Context,
	name string, args *PrivateHostArgs, opts ...pulumi.ResourceOpt) (*PrivateHost, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["gracefulShutdownTimeout"] = nil
		inputs["iconId"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
		inputs["zone"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["gracefulShutdownTimeout"] = args.GracefulShutdownTimeout
		inputs["iconId"] = args.IconId
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
		inputs["zone"] = args.Zone
	}
	inputs["assignedCore"] = nil
	inputs["assignedMemory"] = nil
	inputs["hostname"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/privateHost:PrivateHost", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PrivateHost{s: s}, nil
}

// GetPrivateHost gets an existing PrivateHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateHost(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PrivateHostState, opts ...pulumi.ResourceOpt) (*PrivateHost, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["assignedCore"] = state.AssignedCore
		inputs["assignedMemory"] = state.AssignedMemory
		inputs["description"] = state.Description
		inputs["gracefulShutdownTimeout"] = state.GracefulShutdownTimeout
		inputs["hostname"] = state.Hostname
		inputs["iconId"] = state.IconId
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/privateHost:PrivateHost", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PrivateHost{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PrivateHost) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PrivateHost) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The number of cores assigned to the Server.
func (r *PrivateHost) AssignedCore() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["assignedCore"])
}

// The size of memory allocated to the Server (unit:`GB`).
func (r *PrivateHost) AssignedMemory() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["assignedMemory"])
}

// The description of the resource.
func (r *PrivateHost) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The wait time (seconds) to do graceful shutdown the server connected to the resource.
func (r *PrivateHost) GracefulShutdownTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["gracefulShutdownTimeout"])
}

// The HostName of the resource.
func (r *PrivateHost) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

// The ID of the icon.
func (r *PrivateHost) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The name of the resource.
func (r *PrivateHost) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The tag list of the resources.
func (r *PrivateHost) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The ID of the zone to which the resource belongs.  
// Valid value is one of the following: ["is1a" / "is1b" / "tk1a"]
func (r *PrivateHost) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering PrivateHost resources.
type PrivateHostState struct {
	// The number of cores assigned to the Server.
	AssignedCore interface{}
	// The size of memory allocated to the Server (unit:`GB`).
	AssignedMemory interface{}
	// The description of the resource.
	Description interface{}
	// The wait time (seconds) to do graceful shutdown the server connected to the resource.
	GracefulShutdownTimeout interface{}
	// The HostName of the resource.
	Hostname interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.  
	// Valid value is one of the following: ["is1a" / "is1b" / "tk1a"]
	Zone interface{}
}

// The set of arguments for constructing a PrivateHost resource.
type PrivateHostArgs struct {
	// The description of the resource.
	Description interface{}
	// The wait time (seconds) to do graceful shutdown the server connected to the resource.
	GracefulShutdownTimeout interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.  
	// Valid value is one of the following: ["is1a" / "is1b" / "tk1a"]
	Zone interface{}
}
