// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud Private Host.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewPrivateHost(ctx, "foobar", &sakuracloud.PrivateHostArgs{
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type PrivateHost struct {
	pulumi.CustomResourceState

	// The total number of CPUs assigned to servers on the private host.
	AssignedCore pulumi.IntOutput `pulumi:"assignedCore"`
	// The total size of memory assigned to servers on the private host.
	AssignedMemory pulumi.IntOutput `pulumi:"assignedMemory"`
	// The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The hostname of the private host.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The icon id to attach to the PrivateHost.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// Any tags to assign to the PrivateHost.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPrivateHost registers a new resource with the given unique name, arguments, and options.
func NewPrivateHost(ctx *pulumi.Context,
	name string, args *PrivateHostArgs, opts ...pulumi.ResourceOption) (*PrivateHost, error) {
	if args == nil {
		args = &PrivateHostArgs{}
	}

	var resource PrivateHost
	err := ctx.RegisterResource("sakuracloud:index/privateHost:PrivateHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateHost gets an existing PrivateHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateHostState, opts ...pulumi.ResourceOption) (*PrivateHost, error) {
	var resource PrivateHost
	err := ctx.ReadResource("sakuracloud:index/privateHost:PrivateHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateHost resources.
type privateHostState struct {
	// The total number of CPUs assigned to servers on the private host.
	AssignedCore *int `pulumi:"assignedCore"`
	// The total size of memory assigned to servers on the private host.
	AssignedMemory *int `pulumi:"assignedMemory"`
	// The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
	Class *string `pulumi:"class"`
	// The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The hostname of the private host.
	Hostname *string `pulumi:"hostname"`
	// The icon id to attach to the PrivateHost.
	IconId *string `pulumi:"iconId"`
	// The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// Any tags to assign to the PrivateHost.
	Tags []string `pulumi:"tags"`
	// The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type PrivateHostState struct {
	// The total number of CPUs assigned to servers on the private host.
	AssignedCore pulumi.IntPtrInput
	// The total size of memory assigned to servers on the private host.
	AssignedMemory pulumi.IntPtrInput
	// The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
	Class pulumi.StringPtrInput
	// The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The hostname of the private host.
	Hostname pulumi.StringPtrInput
	// The icon id to attach to the PrivateHost.
	IconId pulumi.StringPtrInput
	// The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// Any tags to assign to the PrivateHost.
	Tags pulumi.StringArrayInput
	// The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PrivateHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateHostState)(nil)).Elem()
}

type privateHostArgs struct {
	// The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
	Class *string `pulumi:"class"`
	// The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the PrivateHost.
	IconId *string `pulumi:"iconId"`
	// The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// Any tags to assign to the PrivateHost.
	Tags []string `pulumi:"tags"`
	// The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PrivateHost resource.
type PrivateHostArgs struct {
	// The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
	Class pulumi.StringPtrInput
	// The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the PrivateHost.
	IconId pulumi.StringPtrInput
	// The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// Any tags to assign to the PrivateHost.
	Tags pulumi.StringArrayInput
	// The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PrivateHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateHostArgs)(nil)).Elem()
}

type PrivateHostInput interface {
	pulumi.Input

	ToPrivateHostOutput() PrivateHostOutput
	ToPrivateHostOutputWithContext(ctx context.Context) PrivateHostOutput
}

func (*PrivateHost) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateHost)(nil))
}

func (i *PrivateHost) ToPrivateHostOutput() PrivateHostOutput {
	return i.ToPrivateHostOutputWithContext(context.Background())
}

func (i *PrivateHost) ToPrivateHostOutputWithContext(ctx context.Context) PrivateHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateHostOutput)
}

func (i *PrivateHost) ToPrivateHostPtrOutput() PrivateHostPtrOutput {
	return i.ToPrivateHostPtrOutputWithContext(context.Background())
}

func (i *PrivateHost) ToPrivateHostPtrOutputWithContext(ctx context.Context) PrivateHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateHostPtrOutput)
}

type PrivateHostPtrInput interface {
	pulumi.Input

	ToPrivateHostPtrOutput() PrivateHostPtrOutput
	ToPrivateHostPtrOutputWithContext(ctx context.Context) PrivateHostPtrOutput
}

type privateHostPtrType PrivateHostArgs

func (*privateHostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateHost)(nil))
}

func (i *privateHostPtrType) ToPrivateHostPtrOutput() PrivateHostPtrOutput {
	return i.ToPrivateHostPtrOutputWithContext(context.Background())
}

func (i *privateHostPtrType) ToPrivateHostPtrOutputWithContext(ctx context.Context) PrivateHostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateHostPtrOutput)
}

// PrivateHostArrayInput is an input type that accepts PrivateHostArray and PrivateHostArrayOutput values.
// You can construct a concrete instance of `PrivateHostArrayInput` via:
//
//          PrivateHostArray{ PrivateHostArgs{...} }
type PrivateHostArrayInput interface {
	pulumi.Input

	ToPrivateHostArrayOutput() PrivateHostArrayOutput
	ToPrivateHostArrayOutputWithContext(context.Context) PrivateHostArrayOutput
}

type PrivateHostArray []PrivateHostInput

func (PrivateHostArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*PrivateHost)(nil))
}

func (i PrivateHostArray) ToPrivateHostArrayOutput() PrivateHostArrayOutput {
	return i.ToPrivateHostArrayOutputWithContext(context.Background())
}

func (i PrivateHostArray) ToPrivateHostArrayOutputWithContext(ctx context.Context) PrivateHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateHostArrayOutput)
}

// PrivateHostMapInput is an input type that accepts PrivateHostMap and PrivateHostMapOutput values.
// You can construct a concrete instance of `PrivateHostMapInput` via:
//
//          PrivateHostMap{ "key": PrivateHostArgs{...} }
type PrivateHostMapInput interface {
	pulumi.Input

	ToPrivateHostMapOutput() PrivateHostMapOutput
	ToPrivateHostMapOutputWithContext(context.Context) PrivateHostMapOutput
}

type PrivateHostMap map[string]PrivateHostInput

func (PrivateHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*PrivateHost)(nil))
}

func (i PrivateHostMap) ToPrivateHostMapOutput() PrivateHostMapOutput {
	return i.ToPrivateHostMapOutputWithContext(context.Background())
}

func (i PrivateHostMap) ToPrivateHostMapOutputWithContext(ctx context.Context) PrivateHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateHostMapOutput)
}

type PrivateHostOutput struct {
	*pulumi.OutputState
}

func (PrivateHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateHost)(nil))
}

func (o PrivateHostOutput) ToPrivateHostOutput() PrivateHostOutput {
	return o
}

func (o PrivateHostOutput) ToPrivateHostOutputWithContext(ctx context.Context) PrivateHostOutput {
	return o
}

func (o PrivateHostOutput) ToPrivateHostPtrOutput() PrivateHostPtrOutput {
	return o.ToPrivateHostPtrOutputWithContext(context.Background())
}

func (o PrivateHostOutput) ToPrivateHostPtrOutputWithContext(ctx context.Context) PrivateHostPtrOutput {
	return o.ApplyT(func(v PrivateHost) *PrivateHost {
		return &v
	}).(PrivateHostPtrOutput)
}

type PrivateHostPtrOutput struct {
	*pulumi.OutputState
}

func (PrivateHostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateHost)(nil))
}

func (o PrivateHostPtrOutput) ToPrivateHostPtrOutput() PrivateHostPtrOutput {
	return o
}

func (o PrivateHostPtrOutput) ToPrivateHostPtrOutputWithContext(ctx context.Context) PrivateHostPtrOutput {
	return o
}

type PrivateHostArrayOutput struct{ *pulumi.OutputState }

func (PrivateHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateHost)(nil))
}

func (o PrivateHostArrayOutput) ToPrivateHostArrayOutput() PrivateHostArrayOutput {
	return o
}

func (o PrivateHostArrayOutput) ToPrivateHostArrayOutputWithContext(ctx context.Context) PrivateHostArrayOutput {
	return o
}

func (o PrivateHostArrayOutput) Index(i pulumi.IntInput) PrivateHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateHost {
		return vs[0].([]PrivateHost)[vs[1].(int)]
	}).(PrivateHostOutput)
}

type PrivateHostMapOutput struct{ *pulumi.OutputState }

func (PrivateHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PrivateHost)(nil))
}

func (o PrivateHostMapOutput) ToPrivateHostMapOutput() PrivateHostMapOutput {
	return o
}

func (o PrivateHostMapOutput) ToPrivateHostMapOutputWithContext(ctx context.Context) PrivateHostMapOutput {
	return o
}

func (o PrivateHostMapOutput) MapIndex(k pulumi.StringInput) PrivateHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PrivateHost {
		return vs[0].(map[string]PrivateHost)[vs[1].(string)]
	}).(PrivateHostOutput)
}

func init() {
	pulumi.RegisterOutputType(PrivateHostOutput{})
	pulumi.RegisterOutputType(PrivateHostPtrOutput{})
	pulumi.RegisterOutputType(PrivateHostArrayOutput{})
	pulumi.RegisterOutputType(PrivateHostMapOutput{})
}
