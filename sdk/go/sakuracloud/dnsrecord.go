// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud DNS Record.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foobar, err := sakuracloud.NewDNS(ctx, "foobar", &sakuracloud.DNSArgs{
// 			Zone: pulumi.String("example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewDNSRecord(ctx, "record1", &sakuracloud.DNSRecordArgs{
// 			DnsId: foobar.ID(),
// 			Type:  pulumi.String("A"),
// 			Value: pulumi.String("192.168.0.1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewDNSRecord(ctx, "record2", &sakuracloud.DNSRecordArgs{
// 			DnsId: foobar.ID(),
// 			Type:  pulumi.String("A"),
// 			Value: pulumi.String("192.168.0.2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DNSRecord struct {
	pulumi.CustomResourceState

	// The id of the DNS resource. Changing this forces a new resource to be created.
	DnsId pulumi.StringOutput `pulumi:"dnsId"`
	// The name of the DNS Record resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.
	Type pulumi.StringOutput `pulumi:"type"`
	// The value of the DNS Record. Changing this forces a new resource to be created.
	Value pulumi.StringOutput `pulumi:"value"`
	// The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewDNSRecord registers a new resource with the given unique name, arguments, and options.
func NewDNSRecord(ctx *pulumi.Context,
	name string, args *DNSRecordArgs, opts ...pulumi.ResourceOption) (*DNSRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DnsId == nil {
		return nil, errors.New("invalid value for required argument 'DnsId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	var resource DNSRecord
	err := ctx.RegisterResource("sakuracloud:index/dNSRecord:DNSRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDNSRecord gets an existing DNSRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DNSRecordState, opts ...pulumi.ResourceOption) (*DNSRecord, error) {
	var resource DNSRecord
	err := ctx.ReadResource("sakuracloud:index/dNSRecord:DNSRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DNSRecord resources.
type dnsrecordState struct {
	// The id of the DNS resource. Changing this forces a new resource to be created.
	DnsId *string `pulumi:"dnsId"`
	// The name of the DNS Record resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.
	Port *int `pulumi:"port"`
	// The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Priority *int `pulumi:"priority"`
	// The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.
	Ttl *int `pulumi:"ttl"`
	// The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.
	Type *string `pulumi:"type"`
	// The value of the DNS Record. Changing this forces a new resource to be created.
	Value *string `pulumi:"value"`
	// The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Weight *int `pulumi:"weight"`
}

type DNSRecordState struct {
	// The id of the DNS resource. Changing this forces a new resource to be created.
	DnsId pulumi.StringPtrInput
	// The name of the DNS Record resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.
	Port pulumi.IntPtrInput
	// The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Priority pulumi.IntPtrInput
	// The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.
	Ttl pulumi.IntPtrInput
	// The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.
	Type pulumi.StringPtrInput
	// The value of the DNS Record. Changing this forces a new resource to be created.
	Value pulumi.StringPtrInput
	// The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Weight pulumi.IntPtrInput
}

func (DNSRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsrecordState)(nil)).Elem()
}

type dnsrecordArgs struct {
	// The id of the DNS resource. Changing this forces a new resource to be created.
	DnsId string `pulumi:"dnsId"`
	// The name of the DNS Record resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.
	Port *int `pulumi:"port"`
	// The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Priority *int `pulumi:"priority"`
	// The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.
	Ttl *int `pulumi:"ttl"`
	// The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.
	Type string `pulumi:"type"`
	// The value of the DNS Record. Changing this forces a new resource to be created.
	Value string `pulumi:"value"`
	// The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a DNSRecord resource.
type DNSRecordArgs struct {
	// The id of the DNS resource. Changing this forces a new resource to be created.
	DnsId pulumi.StringInput
	// The name of the DNS Record resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.
	Port pulumi.IntPtrInput
	// The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Priority pulumi.IntPtrInput
	// The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.
	Ttl pulumi.IntPtrInput
	// The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.
	Type pulumi.StringInput
	// The value of the DNS Record. Changing this forces a new resource to be created.
	Value pulumi.StringInput
	// The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.
	Weight pulumi.IntPtrInput
}

func (DNSRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsrecordArgs)(nil)).Elem()
}

type DNSRecordInput interface {
	pulumi.Input

	ToDNSRecordOutput() DNSRecordOutput
	ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput
}

func (*DNSRecord) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSRecord)(nil))
}

func (i *DNSRecord) ToDNSRecordOutput() DNSRecordOutput {
	return i.ToDNSRecordOutputWithContext(context.Background())
}

func (i *DNSRecord) ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordOutput)
}

func (i *DNSRecord) ToDNSRecordPtrOutput() DNSRecordPtrOutput {
	return i.ToDNSRecordPtrOutputWithContext(context.Background())
}

func (i *DNSRecord) ToDNSRecordPtrOutputWithContext(ctx context.Context) DNSRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordPtrOutput)
}

type DNSRecordPtrInput interface {
	pulumi.Input

	ToDNSRecordPtrOutput() DNSRecordPtrOutput
	ToDNSRecordPtrOutputWithContext(ctx context.Context) DNSRecordPtrOutput
}

type dnsrecordPtrType DNSRecordArgs

func (*dnsrecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSRecord)(nil))
}

func (i *dnsrecordPtrType) ToDNSRecordPtrOutput() DNSRecordPtrOutput {
	return i.ToDNSRecordPtrOutputWithContext(context.Background())
}

func (i *dnsrecordPtrType) ToDNSRecordPtrOutputWithContext(ctx context.Context) DNSRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordPtrOutput)
}

// DNSRecordArrayInput is an input type that accepts DNSRecordArray and DNSRecordArrayOutput values.
// You can construct a concrete instance of `DNSRecordArrayInput` via:
//
//          DNSRecordArray{ DNSRecordArgs{...} }
type DNSRecordArrayInput interface {
	pulumi.Input

	ToDNSRecordArrayOutput() DNSRecordArrayOutput
	ToDNSRecordArrayOutputWithContext(context.Context) DNSRecordArrayOutput
}

type DNSRecordArray []DNSRecordInput

func (DNSRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DNSRecord)(nil)).Elem()
}

func (i DNSRecordArray) ToDNSRecordArrayOutput() DNSRecordArrayOutput {
	return i.ToDNSRecordArrayOutputWithContext(context.Background())
}

func (i DNSRecordArray) ToDNSRecordArrayOutputWithContext(ctx context.Context) DNSRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordArrayOutput)
}

// DNSRecordMapInput is an input type that accepts DNSRecordMap and DNSRecordMapOutput values.
// You can construct a concrete instance of `DNSRecordMapInput` via:
//
//          DNSRecordMap{ "key": DNSRecordArgs{...} }
type DNSRecordMapInput interface {
	pulumi.Input

	ToDNSRecordMapOutput() DNSRecordMapOutput
	ToDNSRecordMapOutputWithContext(context.Context) DNSRecordMapOutput
}

type DNSRecordMap map[string]DNSRecordInput

func (DNSRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DNSRecord)(nil)).Elem()
}

func (i DNSRecordMap) ToDNSRecordMapOutput() DNSRecordMapOutput {
	return i.ToDNSRecordMapOutputWithContext(context.Background())
}

func (i DNSRecordMap) ToDNSRecordMapOutputWithContext(ctx context.Context) DNSRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DNSRecordMapOutput)
}

type DNSRecordOutput struct{ *pulumi.OutputState }

func (DNSRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSRecord)(nil))
}

func (o DNSRecordOutput) ToDNSRecordOutput() DNSRecordOutput {
	return o
}

func (o DNSRecordOutput) ToDNSRecordOutputWithContext(ctx context.Context) DNSRecordOutput {
	return o
}

func (o DNSRecordOutput) ToDNSRecordPtrOutput() DNSRecordPtrOutput {
	return o.ToDNSRecordPtrOutputWithContext(context.Background())
}

func (o DNSRecordOutput) ToDNSRecordPtrOutputWithContext(ctx context.Context) DNSRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DNSRecord) *DNSRecord {
		return &v
	}).(DNSRecordPtrOutput)
}

type DNSRecordPtrOutput struct{ *pulumi.OutputState }

func (DNSRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSRecord)(nil))
}

func (o DNSRecordPtrOutput) ToDNSRecordPtrOutput() DNSRecordPtrOutput {
	return o
}

func (o DNSRecordPtrOutput) ToDNSRecordPtrOutputWithContext(ctx context.Context) DNSRecordPtrOutput {
	return o
}

func (o DNSRecordPtrOutput) Elem() DNSRecordOutput {
	return o.ApplyT(func(v *DNSRecord) DNSRecord {
		if v != nil {
			return *v
		}
		var ret DNSRecord
		return ret
	}).(DNSRecordOutput)
}

type DNSRecordArrayOutput struct{ *pulumi.OutputState }

func (DNSRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DNSRecord)(nil))
}

func (o DNSRecordArrayOutput) ToDNSRecordArrayOutput() DNSRecordArrayOutput {
	return o
}

func (o DNSRecordArrayOutput) ToDNSRecordArrayOutputWithContext(ctx context.Context) DNSRecordArrayOutput {
	return o
}

func (o DNSRecordArrayOutput) Index(i pulumi.IntInput) DNSRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DNSRecord {
		return vs[0].([]DNSRecord)[vs[1].(int)]
	}).(DNSRecordOutput)
}

type DNSRecordMapOutput struct{ *pulumi.OutputState }

func (DNSRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DNSRecord)(nil))
}

func (o DNSRecordMapOutput) ToDNSRecordMapOutput() DNSRecordMapOutput {
	return o
}

func (o DNSRecordMapOutput) ToDNSRecordMapOutputWithContext(ctx context.Context) DNSRecordMapOutput {
	return o
}

func (o DNSRecordMapOutput) MapIndex(k pulumi.StringInput) DNSRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DNSRecord {
		return vs[0].(map[string]DNSRecord)[vs[1].(string)]
	}).(DNSRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordInput)(nil)).Elem(), &DNSRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordPtrInput)(nil)).Elem(), &DNSRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordArrayInput)(nil)).Elem(), DNSRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DNSRecordMapInput)(nil)).Elem(), DNSRecordMap{})
	pulumi.RegisterOutputType(DNSRecordOutput{})
	pulumi.RegisterOutputType(DNSRecordPtrOutput{})
	pulumi.RegisterOutputType(DNSRecordArrayOutput{})
	pulumi.RegisterOutputType(DNSRecordMapOutput{})
}
