// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Disk struct {
	pulumi.CustomResourceState

	// The name of the disk connector. This must be one of [`virtio`/`ide`]
	Connector pulumi.StringPtrOutput `pulumi:"connector"`
	// The description of the disk. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of disk id. The disk will be located to different storage from these disks
	DistantFroms pulumi.StringArrayOutput `pulumi:"distantFroms"`
	// The icon id to attach to the disk
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the disk. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// The id of the Server connected to the disk
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The size of disk in GiB
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// The id of the source archive. This conflicts with [`source_disk_id`]
	SourceArchiveId pulumi.StringPtrOutput `pulumi:"sourceArchiveId"`
	// The id of the source disk. This conflicts with [`source_archive_id`]
	SourceDiskId pulumi.StringPtrOutput `pulumi:"sourceDiskId"`
	// Any tags to assign to the disk
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDisk registers a new resource with the given unique name, arguments, and options.
func NewDisk(ctx *pulumi.Context,
	name string, args *DiskArgs, opts ...pulumi.ResourceOption) (*Disk, error) {
	if args == nil {
		args = &DiskArgs{}
	}
	var resource Disk
	err := ctx.RegisterResource("sakuracloud:index/disk:Disk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDisk gets an existing Disk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskState, opts ...pulumi.ResourceOption) (*Disk, error) {
	var resource Disk
	err := ctx.ReadResource("sakuracloud:index/disk:Disk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Disk resources.
type diskState struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]
	Connector *string `pulumi:"connector"`
	// The description of the disk. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// A list of disk id. The disk will be located to different storage from these disks
	DistantFroms []string `pulumi:"distantFroms"`
	// The icon id to attach to the disk
	IconId *string `pulumi:"iconId"`
	// The name of the disk. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]
	Plan *string `pulumi:"plan"`
	// The id of the Server connected to the disk
	ServerId *string `pulumi:"serverId"`
	// The size of disk in GiB
	Size *int `pulumi:"size"`
	// The id of the source archive. This conflicts with [`source_disk_id`]
	SourceArchiveId *string `pulumi:"sourceArchiveId"`
	// The id of the source disk. This conflicts with [`source_archive_id`]
	SourceDiskId *string `pulumi:"sourceDiskId"`
	// Any tags to assign to the disk
	Tags []string `pulumi:"tags"`
	// The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

type DiskState struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]
	Connector pulumi.StringPtrInput
	// The description of the disk. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// A list of disk id. The disk will be located to different storage from these disks
	DistantFroms pulumi.StringArrayInput
	// The icon id to attach to the disk
	IconId pulumi.StringPtrInput
	// The name of the disk. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]
	Plan pulumi.StringPtrInput
	// The id of the Server connected to the disk
	ServerId pulumi.StringPtrInput
	// The size of disk in GiB
	Size pulumi.IntPtrInput
	// The id of the source archive. This conflicts with [`source_disk_id`]
	SourceArchiveId pulumi.StringPtrInput
	// The id of the source disk. This conflicts with [`source_archive_id`]
	SourceDiskId pulumi.StringPtrInput
	// Any tags to assign to the disk
	Tags pulumi.StringArrayInput
	// The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (DiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskState)(nil)).Elem()
}

type diskArgs struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]
	Connector *string `pulumi:"connector"`
	// The description of the disk. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// A list of disk id. The disk will be located to different storage from these disks
	DistantFroms []string `pulumi:"distantFroms"`
	// The icon id to attach to the disk
	IconId *string `pulumi:"iconId"`
	// The name of the disk. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]
	Plan *string `pulumi:"plan"`
	// The size of disk in GiB
	Size *int `pulumi:"size"`
	// The id of the source archive. This conflicts with [`source_disk_id`]
	SourceArchiveId *string `pulumi:"sourceArchiveId"`
	// The id of the source disk. This conflicts with [`source_archive_id`]
	SourceDiskId *string `pulumi:"sourceDiskId"`
	// Any tags to assign to the disk
	Tags []string `pulumi:"tags"`
	// The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Disk resource.
type DiskArgs struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]
	Connector pulumi.StringPtrInput
	// The description of the disk. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// A list of disk id. The disk will be located to different storage from these disks
	DistantFroms pulumi.StringArrayInput
	// The icon id to attach to the disk
	IconId pulumi.StringPtrInput
	// The name of the disk. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]
	Plan pulumi.StringPtrInput
	// The size of disk in GiB
	Size pulumi.IntPtrInput
	// The id of the source archive. This conflicts with [`source_disk_id`]
	SourceArchiveId pulumi.StringPtrInput
	// The id of the source disk. This conflicts with [`source_archive_id`]
	SourceDiskId pulumi.StringPtrInput
	// Any tags to assign to the disk
	Tags pulumi.StringArrayInput
	// The name of zone that the disk will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskArgs)(nil)).Elem()
}

