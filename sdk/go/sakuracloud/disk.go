// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Disk.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "ubuntu2004"
// 		ubuntu, err := sakuracloud.LookupArchive(ctx, &GetArchiveArgs{
// 			OsType: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewDisk(ctx, "foobar", &sakuracloud.DiskArgs{
// 			Plan:            pulumi.String("ssd"),
// 			Connector:       pulumi.String("virtio"),
// 			Size:            pulumi.Int(20),
// 			SourceArchiveId: pulumi.String(ubuntu.Id),
// 			Description:     pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Disk struct {
	pulumi.CustomResourceState

	// The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.
	Connector pulumi.StringPtrOutput `pulumi:"connector"`
	// The description of the disk. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.
	DistantFroms pulumi.StringArrayOutput `pulumi:"distantFroms"`
	// The icon id to attach to the disk.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the disk. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// The id of the Server connected to the disk.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// The id of the source archive. This conflicts with [`sourceDiskId`]. Changing this forces a new resource to be created.
	SourceArchiveId pulumi.StringPtrOutput `pulumi:"sourceArchiveId"`
	// The id of the source disk. This conflicts with [`sourceArchiveId`]. Changing this forces a new resource to be created.
	SourceDiskId pulumi.StringPtrOutput `pulumi:"sourceDiskId"`
	// Any tags to assign to the disk.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDisk registers a new resource with the given unique name, arguments, and options.
func NewDisk(ctx *pulumi.Context,
	name string, args *DiskArgs, opts ...pulumi.ResourceOption) (*Disk, error) {
	if args == nil {
		args = &DiskArgs{}
	}

	var resource Disk
	err := ctx.RegisterResource("sakuracloud:index/disk:Disk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDisk gets an existing Disk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskState, opts ...pulumi.ResourceOption) (*Disk, error) {
	var resource Disk
	err := ctx.ReadResource("sakuracloud:index/disk:Disk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Disk resources.
type diskState struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.
	Connector *string `pulumi:"connector"`
	// The description of the disk. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.
	DistantFroms []string `pulumi:"distantFroms"`
	// The icon id to attach to the disk.
	IconId *string `pulumi:"iconId"`
	// The name of the disk. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.
	Plan *string `pulumi:"plan"`
	// The id of the Server connected to the disk.
	ServerId *string `pulumi:"serverId"`
	// The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.
	Size *int `pulumi:"size"`
	// The id of the source archive. This conflicts with [`sourceDiskId`]. Changing this forces a new resource to be created.
	SourceArchiveId *string `pulumi:"sourceArchiveId"`
	// The id of the source disk. This conflicts with [`sourceArchiveId`]. Changing this forces a new resource to be created.
	SourceDiskId *string `pulumi:"sourceDiskId"`
	// Any tags to assign to the disk.
	Tags []string `pulumi:"tags"`
	// The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type DiskState struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.
	Connector pulumi.StringPtrInput
	// The description of the disk. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.
	DistantFroms pulumi.StringArrayInput
	// The icon id to attach to the disk.
	IconId pulumi.StringPtrInput
	// The name of the disk. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.
	Plan pulumi.StringPtrInput
	// The id of the Server connected to the disk.
	ServerId pulumi.StringPtrInput
	// The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.
	Size pulumi.IntPtrInput
	// The id of the source archive. This conflicts with [`sourceDiskId`]. Changing this forces a new resource to be created.
	SourceArchiveId pulumi.StringPtrInput
	// The id of the source disk. This conflicts with [`sourceArchiveId`]. Changing this forces a new resource to be created.
	SourceDiskId pulumi.StringPtrInput
	// Any tags to assign to the disk.
	Tags pulumi.StringArrayInput
	// The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (DiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskState)(nil)).Elem()
}

type diskArgs struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.
	Connector *string `pulumi:"connector"`
	// The description of the disk. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.
	DistantFroms []string `pulumi:"distantFroms"`
	// The icon id to attach to the disk.
	IconId *string `pulumi:"iconId"`
	// The name of the disk. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.
	Plan *string `pulumi:"plan"`
	// The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.
	Size *int `pulumi:"size"`
	// The id of the source archive. This conflicts with [`sourceDiskId`]. Changing this forces a new resource to be created.
	SourceArchiveId *string `pulumi:"sourceArchiveId"`
	// The id of the source disk. This conflicts with [`sourceArchiveId`]. Changing this forces a new resource to be created.
	SourceDiskId *string `pulumi:"sourceDiskId"`
	// Any tags to assign to the disk.
	Tags []string `pulumi:"tags"`
	// The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Disk resource.
type DiskArgs struct {
	// The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.
	Connector pulumi.StringPtrInput
	// The description of the disk. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.
	DistantFroms pulumi.StringArrayInput
	// The icon id to attach to the disk.
	IconId pulumi.StringPtrInput
	// The name of the disk. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.
	Plan pulumi.StringPtrInput
	// The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.
	Size pulumi.IntPtrInput
	// The id of the source archive. This conflicts with [`sourceDiskId`]. Changing this forces a new resource to be created.
	SourceArchiveId pulumi.StringPtrInput
	// The id of the source disk. This conflicts with [`sourceArchiveId`]. Changing this forces a new resource to be created.
	SourceDiskId pulumi.StringPtrInput
	// Any tags to assign to the disk.
	Tags pulumi.StringArrayInput
	// The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskArgs)(nil)).Elem()
}

type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(ctx context.Context) DiskOutput
}

func (*Disk) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil))
}

func (i *Disk) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i *Disk) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

func (i *Disk) ToDiskPtrOutput() DiskPtrOutput {
	return i.ToDiskPtrOutputWithContext(context.Background())
}

func (i *Disk) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPtrOutput)
}

type DiskPtrInput interface {
	pulumi.Input

	ToDiskPtrOutput() DiskPtrOutput
	ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput
}

type diskPtrType DiskArgs

func (*diskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil))
}

func (i *diskPtrType) ToDiskPtrOutput() DiskPtrOutput {
	return i.ToDiskPtrOutputWithContext(context.Background())
}

func (i *diskPtrType) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPtrOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//          DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// DiskMapInput is an input type that accepts DiskMap and DiskMapOutput values.
// You can construct a concrete instance of `DiskMapInput` via:
//
//          DiskMap{ "key": DiskArgs{...} }
type DiskMapInput interface {
	pulumi.Input

	ToDiskMapOutput() DiskMapOutput
	ToDiskMapOutputWithContext(context.Context) DiskMapOutput
}

type DiskMap map[string]DiskInput

func (DiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Disk)(nil)).Elem()
}

func (i DiskMap) ToDiskMapOutput() DiskMapOutput {
	return i.ToDiskMapOutputWithContext(context.Background())
}

func (i DiskMap) ToDiskMapOutputWithContext(ctx context.Context) DiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskMapOutput)
}

type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil))
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

func (o DiskOutput) ToDiskPtrOutput() DiskPtrOutput {
	return o.ToDiskPtrOutputWithContext(context.Background())
}

func (o DiskOutput) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Disk) *Disk {
		return &v
	}).(DiskPtrOutput)
}

type DiskPtrOutput struct{ *pulumi.OutputState }

func (DiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil))
}

func (o DiskPtrOutput) ToDiskPtrOutput() DiskPtrOutput {
	return o
}

func (o DiskPtrOutput) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return o
}

func (o DiskPtrOutput) Elem() DiskOutput {
	return o.ApplyT(func(v *Disk) Disk {
		if v != nil {
			return *v
		}
		var ret Disk
		return ret
	}).(DiskOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil))
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

type DiskMapOutput struct{ *pulumi.OutputState }

func (DiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Disk)(nil))
}

func (o DiskMapOutput) ToDiskMapOutput() DiskMapOutput {
	return o
}

func (o DiskMapOutput) ToDiskMapOutputWithContext(ctx context.Context) DiskMapOutput {
	return o
}

func (o DiskMapOutput) MapIndex(k pulumi.StringInput) DiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Disk {
		return vs[0].(map[string]Disk)[vs[1].(string)]
	}).(DiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskInput)(nil)).Elem(), &Disk{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPtrInput)(nil)).Elem(), &Disk{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskArrayInput)(nil)).Elem(), DiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskMapInput)(nil)).Elem(), DiskMap{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskPtrOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(DiskMapOutput{})
}
