// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Disk resource. This can be used to create, update, and delete Disks.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/disk.html.markdown.
type Disk struct {
	s *pulumi.ResourceState
}

// NewDisk registers a new resource with the given unique name, arguments, and options.
func NewDisk(ctx *pulumi.Context,
	name string, args *DiskArgs, opts ...pulumi.ResourceOpt) (*Disk, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["connector"] = nil
		inputs["description"] = nil
		inputs["distantFroms"] = nil
		inputs["gracefulShutdownTimeout"] = nil
		inputs["iconId"] = nil
		inputs["name"] = nil
		inputs["plan"] = nil
		inputs["size"] = nil
		inputs["sourceArchiveId"] = nil
		inputs["sourceDiskId"] = nil
		inputs["tags"] = nil
		inputs["zone"] = nil
	} else {
		inputs["connector"] = args.Connector
		inputs["description"] = args.Description
		inputs["distantFroms"] = args.DistantFroms
		inputs["gracefulShutdownTimeout"] = args.GracefulShutdownTimeout
		inputs["iconId"] = args.IconId
		inputs["name"] = args.Name
		inputs["plan"] = args.Plan
		inputs["size"] = args.Size
		inputs["sourceArchiveId"] = args.SourceArchiveId
		inputs["sourceDiskId"] = args.SourceDiskId
		inputs["tags"] = args.Tags
		inputs["zone"] = args.Zone
	}
	inputs["serverId"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/disk:Disk", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Disk{s: s}, nil
}

// GetDisk gets an existing Disk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DiskState, opts ...pulumi.ResourceOpt) (*Disk, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["connector"] = state.Connector
		inputs["description"] = state.Description
		inputs["distantFroms"] = state.DistantFroms
		inputs["gracefulShutdownTimeout"] = state.GracefulShutdownTimeout
		inputs["iconId"] = state.IconId
		inputs["name"] = state.Name
		inputs["plan"] = state.Plan
		inputs["serverId"] = state.ServerId
		inputs["size"] = state.Size
		inputs["sourceArchiveId"] = state.SourceArchiveId
		inputs["sourceDiskId"] = state.SourceDiskId
		inputs["tags"] = state.Tags
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/disk:Disk", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Disk{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Disk) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Disk) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Disk) Connector() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["connector"])
}

// The description of the resource.
func (r *Disk) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The ID list of the Disks isolated from Disk.
func (r *Disk) DistantFroms() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["distantFroms"])
}

// The wait time (seconds) to do graceful shutdown the server connected to the resource.
func (r *Disk) GracefulShutdownTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["gracefulShutdownTimeout"])
}

// The ID of the icon.
func (r *Disk) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The name of the resource.
func (r *Disk) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The plan of the resource.  
// Valid value is one of the following: [ "ssd" (default) / "hdd"]
func (r *Disk) Plan() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["plan"])
}

// The ID of the server connected to the disk.
func (r *Disk) ServerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverId"])
}

// Size of the resource (unit:`GB`).
func (r *Disk) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// The ID of source Archive.
func (r *Disk) SourceArchiveId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceArchiveId"])
}

// The ID of source Disk.
func (r *Disk) SourceDiskId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceDiskId"])
}

// The tag list of the resources.
func (r *Disk) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The ID of the zone to which the resource belongs.
func (r *Disk) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Disk resources.
type DiskState struct {
	Connector interface{}
	// The description of the resource.
	Description interface{}
	// The ID list of the Disks isolated from Disk.
	DistantFroms interface{}
	// The wait time (seconds) to do graceful shutdown the server connected to the resource.
	GracefulShutdownTimeout interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The plan of the resource.  
	// Valid value is one of the following: [ "ssd" (default) / "hdd"]
	Plan interface{}
	// The ID of the server connected to the disk.
	ServerId interface{}
	// Size of the resource (unit:`GB`).
	Size interface{}
	// The ID of source Archive.
	SourceArchiveId interface{}
	// The ID of source Disk.
	SourceDiskId interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a Disk resource.
type DiskArgs struct {
	Connector interface{}
	// The description of the resource.
	Description interface{}
	// The ID list of the Disks isolated from Disk.
	DistantFroms interface{}
	// The wait time (seconds) to do graceful shutdown the server connected to the resource.
	GracefulShutdownTimeout interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The plan of the resource.  
	// Valid value is one of the following: [ "ssd" (default) / "hdd"]
	Plan interface{}
	// Size of the resource (unit:`GB`).
	Size interface{}
	// The ID of source Archive.
	SourceArchiveId interface{}
	// The ID of source Disk.
	SourceDiskId interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
