// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud ProxyLB(Enhanced-LoadBalancer) resource. This can be used to create, update, and delete ProxyLBs.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/proxylb_acme.html.markdown.
type ProxyLBACME struct {
	s *pulumi.ResourceState
}

// NewProxyLBACME registers a new resource with the given unique name, arguments, and options.
func NewProxyLBACME(ctx *pulumi.Context,
	name string, args *ProxyLBACMEArgs, opts ...pulumi.ResourceOpt) (*ProxyLBACME, error) {
	if args == nil || args.AcceptTos == nil {
		return nil, errors.New("missing required argument 'AcceptTos'")
	}
	if args == nil || args.CommonName == nil {
		return nil, errors.New("missing required argument 'CommonName'")
	}
	if args == nil || args.ProxylbId == nil {
		return nil, errors.New("missing required argument 'ProxylbId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["acceptTos"] = nil
		inputs["commonName"] = nil
		inputs["proxylbId"] = nil
		inputs["updateDelaySec"] = nil
	} else {
		inputs["acceptTos"] = args.AcceptTos
		inputs["commonName"] = args.CommonName
		inputs["proxylbId"] = args.ProxylbId
		inputs["updateDelaySec"] = args.UpdateDelaySec
	}
	inputs["certificates"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/proxyLBACME:ProxyLBACME", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProxyLBACME{s: s}, nil
}

// GetProxyLBACME gets an existing ProxyLBACME resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyLBACME(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProxyLBACMEState, opts ...pulumi.ResourceOpt) (*ProxyLBACME, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["acceptTos"] = state.AcceptTos
		inputs["certificates"] = state.Certificates
		inputs["commonName"] = state.CommonName
		inputs["proxylbId"] = state.ProxylbId
		inputs["updateDelaySec"] = state.UpdateDelaySec
	}
	s, err := ctx.ReadResource("sakuracloud:index/proxyLBACME:ProxyLBACME", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProxyLBACME{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProxyLBACME) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProxyLBACME) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
func (r *ProxyLBACME) AcceptTos() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["acceptTos"])
}

// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
func (r *ProxyLBACME) Certificates() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["certificates"])
}

// The FQDN of target domain.  
func (r *ProxyLBACME) CommonName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["commonName"])
}

// The ID of target ProxyLB resource.  
func (r *ProxyLBACME) ProxylbId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["proxylbId"])
}

// The wait time for update settings.
func (r *ProxyLBACME) UpdateDelaySec() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["updateDelaySec"])
}

// Input properties used for looking up and filtering ProxyLBACME resources.
type ProxyLBACMEState struct {
	// The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
	AcceptTos interface{}
	// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
	Certificates interface{}
	// The FQDN of target domain.  
	CommonName interface{}
	// The ID of target ProxyLB resource.  
	ProxylbId interface{}
	// The wait time for update settings.
	UpdateDelaySec interface{}
}

// The set of arguments for constructing a ProxyLBACME resource.
type ProxyLBACMEArgs struct {
	// The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
	AcceptTos interface{}
	// The FQDN of target domain.  
	CommonName interface{}
	// The ID of target ProxyLB resource.  
	ProxylbId interface{}
	// The wait time for update settings.
	UpdateDelaySec interface{}
}
