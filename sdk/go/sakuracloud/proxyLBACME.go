// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProxyLBACME struct {
	pulumi.CustomResourceState

	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
	// set `true` explicitly
	AcceptTos pulumi.BoolOutput `pulumi:"acceptTos"`
	Certificates ProxyLBACMECertificateArrayOutput `pulumi:"certificates"`
	// The FQDN used by ACME. This must set resolvable value
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// The id of the ProxyLB that set ACME settings to
	ProxylbId pulumi.StringOutput `pulumi:"proxylbId"`
	// The wait time in seconds. This typically used for waiting for a DNS propagation
	UpdateDelaySec pulumi.IntPtrOutput `pulumi:"updateDelaySec"`
}

// NewProxyLBACME registers a new resource with the given unique name, arguments, and options.
func NewProxyLBACME(ctx *pulumi.Context,
	name string, args *ProxyLBACMEArgs, opts ...pulumi.ResourceOption) (*ProxyLBACME, error) {
	if args == nil || args.AcceptTos == nil {
		return nil, errors.New("missing required argument 'AcceptTos'")
	}
	if args == nil || args.CommonName == nil {
		return nil, errors.New("missing required argument 'CommonName'")
	}
	if args == nil || args.ProxylbId == nil {
		return nil, errors.New("missing required argument 'ProxylbId'")
	}
	if args == nil {
		args = &ProxyLBACMEArgs{}
	}
	var resource ProxyLBACME
	err := ctx.RegisterResource("sakuracloud:index/proxyLBACME:ProxyLBACME", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxyLBACME gets an existing ProxyLBACME resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyLBACME(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyLBACMEState, opts ...pulumi.ResourceOption) (*ProxyLBACME, error) {
	var resource ProxyLBACME
	err := ctx.ReadResource("sakuracloud:index/proxyLBACME:ProxyLBACME", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProxyLBACME resources.
type proxyLBACMEState struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
	// set `true` explicitly
	AcceptTos *bool `pulumi:"acceptTos"`
	Certificates []ProxyLBACMECertificate `pulumi:"certificates"`
	// The FQDN used by ACME. This must set resolvable value
	CommonName *string `pulumi:"commonName"`
	// The id of the ProxyLB that set ACME settings to
	ProxylbId *string `pulumi:"proxylbId"`
	// The wait time in seconds. This typically used for waiting for a DNS propagation
	UpdateDelaySec *int `pulumi:"updateDelaySec"`
}

type ProxyLBACMEState struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
	// set `true` explicitly
	AcceptTos pulumi.BoolPtrInput
	Certificates ProxyLBACMECertificateArrayInput
	// The FQDN used by ACME. This must set resolvable value
	CommonName pulumi.StringPtrInput
	// The id of the ProxyLB that set ACME settings to
	ProxylbId pulumi.StringPtrInput
	// The wait time in seconds. This typically used for waiting for a DNS propagation
	UpdateDelaySec pulumi.IntPtrInput
}

func (ProxyLBACMEState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyLBACMEState)(nil)).Elem()
}

type proxyLBACMEArgs struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
	// set `true` explicitly
	AcceptTos bool `pulumi:"acceptTos"`
	// The FQDN used by ACME. This must set resolvable value
	CommonName string `pulumi:"commonName"`
	// The id of the ProxyLB that set ACME settings to
	ProxylbId string `pulumi:"proxylbId"`
	// The wait time in seconds. This typically used for waiting for a DNS propagation
	UpdateDelaySec *int `pulumi:"updateDelaySec"`
}

// The set of arguments for constructing a ProxyLBACME resource.
type ProxyLBACMEArgs struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be
	// set `true` explicitly
	AcceptTos pulumi.BoolInput
	// The FQDN used by ACME. This must set resolvable value
	CommonName pulumi.StringInput
	// The id of the ProxyLB that set ACME settings to
	ProxylbId pulumi.StringInput
	// The wait time in seconds. This typically used for waiting for a DNS propagation
	UpdateDelaySec pulumi.IntPtrInput
}

func (ProxyLBACMEArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyLBACMEArgs)(nil)).Elem()
}

