// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud ProxyLB ACME Setting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewProxyLBACME(ctx, "foobarProxyLBACME", &sakuracloud.ProxyLBACMEArgs{
// 			ProxylbId:  pulumi.Any(sakuracloud_proxylb.Foobar.Id),
// 			AcceptTos:  pulumi.Bool(true),
// 			CommonName: pulumi.String("www.example.com"),
// 			SubjectAltNames: pulumi.StringArray{
// 				pulumi.String("www1.example.com"),
// 			},
// 			UpdateDelaySec: pulumi.Int(120),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.LookupProxyLB(ctx, &GetProxyLBArgs{
// 			Filter: GetProxyLBFilter{
// 				Names: []string{
// 					"foobar",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ProxyLBACME struct {
	pulumi.CustomResourceState

	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
	AcceptTos pulumi.BoolOutput `pulumi:"acceptTos"`
	// A list of `certificate` blocks as defined below.
	Certificates ProxyLBACMECertificateArrayOutput `pulumi:"certificates"`
	// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
	CommonName pulumi.StringOutput `pulumi:"commonName"`
	// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
	ProxylbId pulumi.StringOutput `pulumi:"proxylbId"`
	// The Subject alternative names used by ACME. Changing this forces a new resource to be created.
	SubjectAltNames pulumi.StringArrayOutput `pulumi:"subjectAltNames"`
	// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
	UpdateDelaySec pulumi.IntPtrOutput `pulumi:"updateDelaySec"`
}

// NewProxyLBACME registers a new resource with the given unique name, arguments, and options.
func NewProxyLBACME(ctx *pulumi.Context,
	name string, args *ProxyLBACMEArgs, opts ...pulumi.ResourceOption) (*ProxyLBACME, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceptTos == nil {
		return nil, errors.New("invalid value for required argument 'AcceptTos'")
	}
	if args.CommonName == nil {
		return nil, errors.New("invalid value for required argument 'CommonName'")
	}
	if args.ProxylbId == nil {
		return nil, errors.New("invalid value for required argument 'ProxylbId'")
	}
	var resource ProxyLBACME
	err := ctx.RegisterResource("sakuracloud:index/proxyLBACME:ProxyLBACME", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxyLBACME gets an existing ProxyLBACME resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyLBACME(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyLBACMEState, opts ...pulumi.ResourceOption) (*ProxyLBACME, error) {
	var resource ProxyLBACME
	err := ctx.ReadResource("sakuracloud:index/proxyLBACME:ProxyLBACME", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProxyLBACME resources.
type proxyLBACMEState struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
	AcceptTos *bool `pulumi:"acceptTos"`
	// A list of `certificate` blocks as defined below.
	Certificates []ProxyLBACMECertificate `pulumi:"certificates"`
	// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
	CommonName *string `pulumi:"commonName"`
	// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
	ProxylbId *string `pulumi:"proxylbId"`
	// The Subject alternative names used by ACME. Changing this forces a new resource to be created.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
	UpdateDelaySec *int `pulumi:"updateDelaySec"`
}

type ProxyLBACMEState struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
	AcceptTos pulumi.BoolPtrInput
	// A list of `certificate` blocks as defined below.
	Certificates ProxyLBACMECertificateArrayInput
	// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
	CommonName pulumi.StringPtrInput
	// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
	ProxylbId pulumi.StringPtrInput
	// The Subject alternative names used by ACME. Changing this forces a new resource to be created.
	SubjectAltNames pulumi.StringArrayInput
	// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
	UpdateDelaySec pulumi.IntPtrInput
}

func (ProxyLBACMEState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyLBACMEState)(nil)).Elem()
}

type proxyLBACMEArgs struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
	AcceptTos bool `pulumi:"acceptTos"`
	// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
	CommonName string `pulumi:"commonName"`
	// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
	ProxylbId string `pulumi:"proxylbId"`
	// The Subject alternative names used by ACME. Changing this forces a new resource to be created.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
	UpdateDelaySec *int `pulumi:"updateDelaySec"`
}

// The set of arguments for constructing a ProxyLBACME resource.
type ProxyLBACMEArgs struct {
	// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
	AcceptTos pulumi.BoolInput
	// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
	CommonName pulumi.StringInput
	// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
	ProxylbId pulumi.StringInput
	// The Subject alternative names used by ACME. Changing this forces a new resource to be created.
	SubjectAltNames pulumi.StringArrayInput
	// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
	UpdateDelaySec pulumi.IntPtrInput
}

func (ProxyLBACMEArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyLBACMEArgs)(nil)).Elem()
}

type ProxyLBACMEInput interface {
	pulumi.Input

	ToProxyLBACMEOutput() ProxyLBACMEOutput
	ToProxyLBACMEOutputWithContext(ctx context.Context) ProxyLBACMEOutput
}

func (*ProxyLBACME) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyLBACME)(nil))
}

func (i *ProxyLBACME) ToProxyLBACMEOutput() ProxyLBACMEOutput {
	return i.ToProxyLBACMEOutputWithContext(context.Background())
}

func (i *ProxyLBACME) ToProxyLBACMEOutputWithContext(ctx context.Context) ProxyLBACMEOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyLBACMEOutput)
}

func (i *ProxyLBACME) ToProxyLBACMEPtrOutput() ProxyLBACMEPtrOutput {
	return i.ToProxyLBACMEPtrOutputWithContext(context.Background())
}

func (i *ProxyLBACME) ToProxyLBACMEPtrOutputWithContext(ctx context.Context) ProxyLBACMEPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyLBACMEPtrOutput)
}

type ProxyLBACMEPtrInput interface {
	pulumi.Input

	ToProxyLBACMEPtrOutput() ProxyLBACMEPtrOutput
	ToProxyLBACMEPtrOutputWithContext(ctx context.Context) ProxyLBACMEPtrOutput
}

type proxyLBACMEPtrType ProxyLBACMEArgs

func (*proxyLBACMEPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyLBACME)(nil))
}

func (i *proxyLBACMEPtrType) ToProxyLBACMEPtrOutput() ProxyLBACMEPtrOutput {
	return i.ToProxyLBACMEPtrOutputWithContext(context.Background())
}

func (i *proxyLBACMEPtrType) ToProxyLBACMEPtrOutputWithContext(ctx context.Context) ProxyLBACMEPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyLBACMEPtrOutput)
}

// ProxyLBACMEArrayInput is an input type that accepts ProxyLBACMEArray and ProxyLBACMEArrayOutput values.
// You can construct a concrete instance of `ProxyLBACMEArrayInput` via:
//
//          ProxyLBACMEArray{ ProxyLBACMEArgs{...} }
type ProxyLBACMEArrayInput interface {
	pulumi.Input

	ToProxyLBACMEArrayOutput() ProxyLBACMEArrayOutput
	ToProxyLBACMEArrayOutputWithContext(context.Context) ProxyLBACMEArrayOutput
}

type ProxyLBACMEArray []ProxyLBACMEInput

func (ProxyLBACMEArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProxyLBACME)(nil)).Elem()
}

func (i ProxyLBACMEArray) ToProxyLBACMEArrayOutput() ProxyLBACMEArrayOutput {
	return i.ToProxyLBACMEArrayOutputWithContext(context.Background())
}

func (i ProxyLBACMEArray) ToProxyLBACMEArrayOutputWithContext(ctx context.Context) ProxyLBACMEArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyLBACMEArrayOutput)
}

// ProxyLBACMEMapInput is an input type that accepts ProxyLBACMEMap and ProxyLBACMEMapOutput values.
// You can construct a concrete instance of `ProxyLBACMEMapInput` via:
//
//          ProxyLBACMEMap{ "key": ProxyLBACMEArgs{...} }
type ProxyLBACMEMapInput interface {
	pulumi.Input

	ToProxyLBACMEMapOutput() ProxyLBACMEMapOutput
	ToProxyLBACMEMapOutputWithContext(context.Context) ProxyLBACMEMapOutput
}

type ProxyLBACMEMap map[string]ProxyLBACMEInput

func (ProxyLBACMEMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProxyLBACME)(nil)).Elem()
}

func (i ProxyLBACMEMap) ToProxyLBACMEMapOutput() ProxyLBACMEMapOutput {
	return i.ToProxyLBACMEMapOutputWithContext(context.Background())
}

func (i ProxyLBACMEMap) ToProxyLBACMEMapOutputWithContext(ctx context.Context) ProxyLBACMEMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyLBACMEMapOutput)
}

type ProxyLBACMEOutput struct{ *pulumi.OutputState }

func (ProxyLBACMEOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProxyLBACME)(nil))
}

func (o ProxyLBACMEOutput) ToProxyLBACMEOutput() ProxyLBACMEOutput {
	return o
}

func (o ProxyLBACMEOutput) ToProxyLBACMEOutputWithContext(ctx context.Context) ProxyLBACMEOutput {
	return o
}

func (o ProxyLBACMEOutput) ToProxyLBACMEPtrOutput() ProxyLBACMEPtrOutput {
	return o.ToProxyLBACMEPtrOutputWithContext(context.Background())
}

func (o ProxyLBACMEOutput) ToProxyLBACMEPtrOutputWithContext(ctx context.Context) ProxyLBACMEPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProxyLBACME) *ProxyLBACME {
		return &v
	}).(ProxyLBACMEPtrOutput)
}

type ProxyLBACMEPtrOutput struct{ *pulumi.OutputState }

func (ProxyLBACMEPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyLBACME)(nil))
}

func (o ProxyLBACMEPtrOutput) ToProxyLBACMEPtrOutput() ProxyLBACMEPtrOutput {
	return o
}

func (o ProxyLBACMEPtrOutput) ToProxyLBACMEPtrOutputWithContext(ctx context.Context) ProxyLBACMEPtrOutput {
	return o
}

func (o ProxyLBACMEPtrOutput) Elem() ProxyLBACMEOutput {
	return o.ApplyT(func(v *ProxyLBACME) ProxyLBACME {
		if v != nil {
			return *v
		}
		var ret ProxyLBACME
		return ret
	}).(ProxyLBACMEOutput)
}

type ProxyLBACMEArrayOutput struct{ *pulumi.OutputState }

func (ProxyLBACMEArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProxyLBACME)(nil))
}

func (o ProxyLBACMEArrayOutput) ToProxyLBACMEArrayOutput() ProxyLBACMEArrayOutput {
	return o
}

func (o ProxyLBACMEArrayOutput) ToProxyLBACMEArrayOutputWithContext(ctx context.Context) ProxyLBACMEArrayOutput {
	return o
}

func (o ProxyLBACMEArrayOutput) Index(i pulumi.IntInput) ProxyLBACMEOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProxyLBACME {
		return vs[0].([]ProxyLBACME)[vs[1].(int)]
	}).(ProxyLBACMEOutput)
}

type ProxyLBACMEMapOutput struct{ *pulumi.OutputState }

func (ProxyLBACMEMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProxyLBACME)(nil))
}

func (o ProxyLBACMEMapOutput) ToProxyLBACMEMapOutput() ProxyLBACMEMapOutput {
	return o
}

func (o ProxyLBACMEMapOutput) ToProxyLBACMEMapOutputWithContext(ctx context.Context) ProxyLBACMEMapOutput {
	return o
}

func (o ProxyLBACMEMapOutput) MapIndex(k pulumi.StringInput) ProxyLBACMEOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProxyLBACME {
		return vs[0].(map[string]ProxyLBACME)[vs[1].(string)]
	}).(ProxyLBACMEOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyLBACMEInput)(nil)).Elem(), &ProxyLBACME{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyLBACMEPtrInput)(nil)).Elem(), &ProxyLBACME{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyLBACMEArrayInput)(nil)).Elem(), ProxyLBACMEArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyLBACMEMapInput)(nil)).Elem(), ProxyLBACMEMap{})
	pulumi.RegisterOutputType(ProxyLBACMEOutput{})
	pulumi.RegisterOutputType(ProxyLBACMEPtrOutput{})
	pulumi.RegisterOutputType(ProxyLBACMEArrayOutput{})
	pulumi.RegisterOutputType(ProxyLBACMEMapOutput{})
}
