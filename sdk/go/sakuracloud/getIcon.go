// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about an existing Icon.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.LookupIcon(ctx, &GetIconArgs{
// 			Filter: GetIconFilter{
// 				Names: []string{
// 					"foobar",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupIcon(ctx *pulumi.Context, args *LookupIconArgs, opts ...pulumi.InvokeOption) (*LookupIconResult, error) {
	var rv LookupIconResult
	err := ctx.Invoke("sakuracloud:index/getIcon:getIcon", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIcon.
type LookupIconArgs struct {
	// One or more values used for filtering, as defined below.
	Filter *GetIconFilter `pulumi:"filter"`
}

// A collection of values returned by getIcon.
type LookupIconResult struct {
	Filter *GetIconFilter `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the Icon.
	Name string `pulumi:"name"`
	// Any tags assigned to the Icon.
	Tags []string `pulumi:"tags"`
	// The URL for getting the icon's raw data.
	Url string `pulumi:"url"`
}

func LookupIconOutput(ctx *pulumi.Context, args LookupIconOutputArgs, opts ...pulumi.InvokeOption) LookupIconResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIconResult, error) {
			args := v.(LookupIconArgs)
			r, err := LookupIcon(ctx, &args, opts...)
			return *r, err
		}).(LookupIconResultOutput)
}

// A collection of arguments for invoking getIcon.
type LookupIconOutputArgs struct {
	// One or more values used for filtering, as defined below.
	Filter GetIconFilterPtrInput `pulumi:"filter"`
}

func (LookupIconOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIconArgs)(nil)).Elem()
}

// A collection of values returned by getIcon.
type LookupIconResultOutput struct{ *pulumi.OutputState }

func (LookupIconResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIconResult)(nil)).Elem()
}

func (o LookupIconResultOutput) ToLookupIconResultOutput() LookupIconResultOutput {
	return o
}

func (o LookupIconResultOutput) ToLookupIconResultOutputWithContext(ctx context.Context) LookupIconResultOutput {
	return o
}

func (o LookupIconResultOutput) Filter() GetIconFilterPtrOutput {
	return o.ApplyT(func(v LookupIconResult) *GetIconFilter { return v.Filter }).(GetIconFilterPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIconResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIconResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Icon.
func (o LookupIconResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIconResult) string { return v.Name }).(pulumi.StringOutput)
}

// Any tags assigned to the Icon.
func (o LookupIconResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupIconResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The URL for getting the icon's raw data.
func (o LookupIconResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIconResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIconResultOutput{})
}
