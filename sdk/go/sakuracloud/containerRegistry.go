// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Container Registry.
type ContainerRegistry struct {
	pulumi.CustomResourceState

	// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].
	AccessLevel pulumi.StringOutput `pulumi:"accessLevel"`
	// The description of the Container Registry. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The FQDN for accessing the Container Registry. FQDN is built from `subdomainLabel` + `.sakuracr.jp`.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The icon id to attach to the Container Registry.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the Container Registry. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.
	SubdomainLabel pulumi.StringOutput `pulumi:"subdomainLabel"`
	// Any tags to assign to the Container Registry.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// One or more `user` blocks as defined below.
	Users ContainerRegistryUserArrayOutput `pulumi:"users"`
	// The alias for accessing the container registry.
	VirtualDomain pulumi.StringPtrOutput `pulumi:"virtualDomain"`
}

// NewContainerRegistry registers a new resource with the given unique name, arguments, and options.
func NewContainerRegistry(ctx *pulumi.Context,
	name string, args *ContainerRegistryArgs, opts ...pulumi.ResourceOption) (*ContainerRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessLevel == nil {
		return nil, errors.New("invalid value for required argument 'AccessLevel'")
	}
	if args.SubdomainLabel == nil {
		return nil, errors.New("invalid value for required argument 'SubdomainLabel'")
	}
	var resource ContainerRegistry
	err := ctx.RegisterResource("sakuracloud:index/containerRegistry:ContainerRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRegistry gets an existing ContainerRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRegistryState, opts ...pulumi.ResourceOption) (*ContainerRegistry, error) {
	var resource ContainerRegistry
	err := ctx.ReadResource("sakuracloud:index/containerRegistry:ContainerRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRegistry resources.
type containerRegistryState struct {
	// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].
	AccessLevel *string `pulumi:"accessLevel"`
	// The description of the Container Registry. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The FQDN for accessing the Container Registry. FQDN is built from `subdomainLabel` + `.sakuracr.jp`.
	Fqdn *string `pulumi:"fqdn"`
	// The icon id to attach to the Container Registry.
	IconId *string `pulumi:"iconId"`
	// The name of the Container Registry. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.
	SubdomainLabel *string `pulumi:"subdomainLabel"`
	// Any tags to assign to the Container Registry.
	Tags []string `pulumi:"tags"`
	// One or more `user` blocks as defined below.
	Users []ContainerRegistryUser `pulumi:"users"`
	// The alias for accessing the container registry.
	VirtualDomain *string `pulumi:"virtualDomain"`
}

type ContainerRegistryState struct {
	// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].
	AccessLevel pulumi.StringPtrInput
	// The description of the Container Registry. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The FQDN for accessing the Container Registry. FQDN is built from `subdomainLabel` + `.sakuracr.jp`.
	Fqdn pulumi.StringPtrInput
	// The icon id to attach to the Container Registry.
	IconId pulumi.StringPtrInput
	// The name of the Container Registry. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.
	SubdomainLabel pulumi.StringPtrInput
	// Any tags to assign to the Container Registry.
	Tags pulumi.StringArrayInput
	// One or more `user` blocks as defined below.
	Users ContainerRegistryUserArrayInput
	// The alias for accessing the container registry.
	VirtualDomain pulumi.StringPtrInput
}

func (ContainerRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRegistryState)(nil)).Elem()
}

type containerRegistryArgs struct {
	// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].
	AccessLevel string `pulumi:"accessLevel"`
	// The description of the Container Registry. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the Container Registry.
	IconId *string `pulumi:"iconId"`
	// The name of the Container Registry. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.
	SubdomainLabel string `pulumi:"subdomainLabel"`
	// Any tags to assign to the Container Registry.
	Tags []string `pulumi:"tags"`
	// One or more `user` blocks as defined below.
	Users []ContainerRegistryUser `pulumi:"users"`
	// The alias for accessing the container registry.
	VirtualDomain *string `pulumi:"virtualDomain"`
}

// The set of arguments for constructing a ContainerRegistry resource.
type ContainerRegistryArgs struct {
	// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].
	AccessLevel pulumi.StringInput
	// The description of the Container Registry. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the Container Registry.
	IconId pulumi.StringPtrInput
	// The name of the Container Registry. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.
	SubdomainLabel pulumi.StringInput
	// Any tags to assign to the Container Registry.
	Tags pulumi.StringArrayInput
	// One or more `user` blocks as defined below.
	Users ContainerRegistryUserArrayInput
	// The alias for accessing the container registry.
	VirtualDomain pulumi.StringPtrInput
}

func (ContainerRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRegistryArgs)(nil)).Elem()
}

type ContainerRegistryInput interface {
	pulumi.Input

	ToContainerRegistryOutput() ContainerRegistryOutput
	ToContainerRegistryOutputWithContext(ctx context.Context) ContainerRegistryOutput
}

func (*ContainerRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistry)(nil))
}

func (i *ContainerRegistry) ToContainerRegistryOutput() ContainerRegistryOutput {
	return i.ToContainerRegistryOutputWithContext(context.Background())
}

func (i *ContainerRegistry) ToContainerRegistryOutputWithContext(ctx context.Context) ContainerRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryOutput)
}

func (i *ContainerRegistry) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return i.ToContainerRegistryPtrOutputWithContext(context.Background())
}

func (i *ContainerRegistry) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryPtrOutput)
}

type ContainerRegistryPtrInput interface {
	pulumi.Input

	ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput
	ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput
}

type containerRegistryPtrType ContainerRegistryArgs

func (*containerRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistry)(nil))
}

func (i *containerRegistryPtrType) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return i.ToContainerRegistryPtrOutputWithContext(context.Background())
}

func (i *containerRegistryPtrType) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryPtrOutput)
}

// ContainerRegistryArrayInput is an input type that accepts ContainerRegistryArray and ContainerRegistryArrayOutput values.
// You can construct a concrete instance of `ContainerRegistryArrayInput` via:
//
//          ContainerRegistryArray{ ContainerRegistryArgs{...} }
type ContainerRegistryArrayInput interface {
	pulumi.Input

	ToContainerRegistryArrayOutput() ContainerRegistryArrayOutput
	ToContainerRegistryArrayOutputWithContext(context.Context) ContainerRegistryArrayOutput
}

type ContainerRegistryArray []ContainerRegistryInput

func (ContainerRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRegistry)(nil)).Elem()
}

func (i ContainerRegistryArray) ToContainerRegistryArrayOutput() ContainerRegistryArrayOutput {
	return i.ToContainerRegistryArrayOutputWithContext(context.Background())
}

func (i ContainerRegistryArray) ToContainerRegistryArrayOutputWithContext(ctx context.Context) ContainerRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryArrayOutput)
}

// ContainerRegistryMapInput is an input type that accepts ContainerRegistryMap and ContainerRegistryMapOutput values.
// You can construct a concrete instance of `ContainerRegistryMapInput` via:
//
//          ContainerRegistryMap{ "key": ContainerRegistryArgs{...} }
type ContainerRegistryMapInput interface {
	pulumi.Input

	ToContainerRegistryMapOutput() ContainerRegistryMapOutput
	ToContainerRegistryMapOutputWithContext(context.Context) ContainerRegistryMapOutput
}

type ContainerRegistryMap map[string]ContainerRegistryInput

func (ContainerRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRegistry)(nil)).Elem()
}

func (i ContainerRegistryMap) ToContainerRegistryMapOutput() ContainerRegistryMapOutput {
	return i.ToContainerRegistryMapOutputWithContext(context.Background())
}

func (i ContainerRegistryMap) ToContainerRegistryMapOutputWithContext(ctx context.Context) ContainerRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryMapOutput)
}

type ContainerRegistryOutput struct{ *pulumi.OutputState }

func (ContainerRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistry)(nil))
}

func (o ContainerRegistryOutput) ToContainerRegistryOutput() ContainerRegistryOutput {
	return o
}

func (o ContainerRegistryOutput) ToContainerRegistryOutputWithContext(ctx context.Context) ContainerRegistryOutput {
	return o
}

func (o ContainerRegistryOutput) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return o.ToContainerRegistryPtrOutputWithContext(context.Background())
}

func (o ContainerRegistryOutput) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerRegistry) *ContainerRegistry {
		return &v
	}).(ContainerRegistryPtrOutput)
}

type ContainerRegistryPtrOutput struct{ *pulumi.OutputState }

func (ContainerRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRegistry)(nil))
}

func (o ContainerRegistryPtrOutput) ToContainerRegistryPtrOutput() ContainerRegistryPtrOutput {
	return o
}

func (o ContainerRegistryPtrOutput) ToContainerRegistryPtrOutputWithContext(ctx context.Context) ContainerRegistryPtrOutput {
	return o
}

func (o ContainerRegistryPtrOutput) Elem() ContainerRegistryOutput {
	return o.ApplyT(func(v *ContainerRegistry) ContainerRegistry {
		if v != nil {
			return *v
		}
		var ret ContainerRegistry
		return ret
	}).(ContainerRegistryOutput)
}

type ContainerRegistryArrayOutput struct{ *pulumi.OutputState }

func (ContainerRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerRegistry)(nil))
}

func (o ContainerRegistryArrayOutput) ToContainerRegistryArrayOutput() ContainerRegistryArrayOutput {
	return o
}

func (o ContainerRegistryArrayOutput) ToContainerRegistryArrayOutputWithContext(ctx context.Context) ContainerRegistryArrayOutput {
	return o
}

func (o ContainerRegistryArrayOutput) Index(i pulumi.IntInput) ContainerRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerRegistry {
		return vs[0].([]ContainerRegistry)[vs[1].(int)]
	}).(ContainerRegistryOutput)
}

type ContainerRegistryMapOutput struct{ *pulumi.OutputState }

func (ContainerRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ContainerRegistry)(nil))
}

func (o ContainerRegistryMapOutput) ToContainerRegistryMapOutput() ContainerRegistryMapOutput {
	return o
}

func (o ContainerRegistryMapOutput) ToContainerRegistryMapOutputWithContext(ctx context.Context) ContainerRegistryMapOutput {
	return o
}

func (o ContainerRegistryMapOutput) MapIndex(k pulumi.StringInput) ContainerRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ContainerRegistry {
		return vs[0].(map[string]ContainerRegistry)[vs[1].(string)]
	}).(ContainerRegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRegistryInput)(nil)).Elem(), &ContainerRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRegistryPtrInput)(nil)).Elem(), &ContainerRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRegistryArrayInput)(nil)).Elem(), ContainerRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRegistryMapInput)(nil)).Elem(), ContainerRegistryMap{})
	pulumi.RegisterOutputType(ContainerRegistryOutput{})
	pulumi.RegisterOutputType(ContainerRegistryPtrOutput{})
	pulumi.RegisterOutputType(ContainerRegistryArrayOutput{})
	pulumi.RegisterOutputType(ContainerRegistryMapOutput{})
}
