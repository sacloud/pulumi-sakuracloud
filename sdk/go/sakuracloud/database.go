// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		username := cfg.RequireObject("username")
// 		password := cfg.RequireObject("password")
// 		replicaPassword := cfg.RequireObject("replicaPassword")
// 		foobarSwitch, err := sakuracloud.NewSwitch(ctx, "foobarSwitch", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewDatabase(ctx, "foobarDatabase", &sakuracloud.DatabaseArgs{
// 			DatabaseType:    pulumi.String("mariadb"),
// 			Plan:            pulumi.String("30g"),
// 			Username:        pulumi.Any(username),
// 			Password:        pulumi.Any(password),
// 			ReplicaPassword: pulumi.Any(replicaPassword),
// 			NetworkInterface: &DatabaseNetworkInterfaceArgs{
// 				SwitchId:  foobarSwitch.ID(),
// 				IpAddress: pulumi.String("192.168.11.11"),
// 				Netmask:   pulumi.Int(24),
// 				Gateway:   pulumi.String("192.168.11.1"),
// 				Port:      pulumi.Int(3306),
// 				SourceRanges: pulumi.StringArray{
// 					pulumi.String("192.168.11.0/24"),
// 					pulumi.String("192.168.12.0/24"),
// 				},
// 			},
// 			Backup: &DatabaseBackupArgs{
// 				Time: pulumi.String("00:00"),
// 				Weekdays: pulumi.StringArray{
// 					pulumi.String("mon"),
// 					pulumi.String("tue"),
// 				},
// 			},
// 			Parameters: pulumi.StringMap{
// 				"max_connections": pulumi.String("100"),
// 			},
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Database struct {
	pulumi.CustomResourceState

	// A `backup` block as defined below.
	Backup DatabaseBackupPtrOutput `pulumi:"backup"`
	// The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.
	DatabaseType pulumi.StringPtrOutput `pulumi:"databaseType"`
	// The description of the Database. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The icon id to attach to the Database.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the Database. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// An `networkInterface` block as defined below.
	NetworkInterface DatabaseNetworkInterfaceOutput `pulumi:"networkInterface"`
	// The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// The password of default user on the database.
	Password pulumi.StringOutput `pulumi:"password"`
	// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// The password of user that processing a replication.
	ReplicaPassword pulumi.StringPtrOutput `pulumi:"replicaPassword"`
	// The name of user that processing a replication. Default:`replica`.
	ReplicaUser pulumi.StringPtrOutput `pulumi:"replicaUser"`
	// Any tags to assign to the Database.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.
	Username pulumi.StringOutput `pulumi:"username"`
	// The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterface == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterface'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource Database
	err := ctx.RegisterResource("sakuracloud:index/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("sakuracloud:index/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// A `backup` block as defined below.
	Backup *DatabaseBackup `pulumi:"backup"`
	// The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.
	DatabaseType *string `pulumi:"databaseType"`
	// The description of the Database. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the Database.
	IconId *string `pulumi:"iconId"`
	// The name of the Database. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// An `networkInterface` block as defined below.
	NetworkInterface *DatabaseNetworkInterface `pulumi:"networkInterface"`
	// The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.
	Parameters map[string]string `pulumi:"parameters"`
	// The password of default user on the database.
	Password *string `pulumi:"password"`
	// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.
	Plan *string `pulumi:"plan"`
	// The password of user that processing a replication.
	ReplicaPassword *string `pulumi:"replicaPassword"`
	// The name of user that processing a replication. Default:`replica`.
	ReplicaUser *string `pulumi:"replicaUser"`
	// Any tags to assign to the Database.
	Tags []string `pulumi:"tags"`
	// The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.
	Username *string `pulumi:"username"`
	// The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type DatabaseState struct {
	// A `backup` block as defined below.
	Backup DatabaseBackupPtrInput
	// The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.
	DatabaseType pulumi.StringPtrInput
	// The description of the Database. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the Database.
	IconId pulumi.StringPtrInput
	// The name of the Database. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// An `networkInterface` block as defined below.
	NetworkInterface DatabaseNetworkInterfacePtrInput
	// The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.
	Parameters pulumi.StringMapInput
	// The password of default user on the database.
	Password pulumi.StringPtrInput
	// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.
	Plan pulumi.StringPtrInput
	// The password of user that processing a replication.
	ReplicaPassword pulumi.StringPtrInput
	// The name of user that processing a replication. Default:`replica`.
	ReplicaUser pulumi.StringPtrInput
	// Any tags to assign to the Database.
	Tags pulumi.StringArrayInput
	// The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.
	Username pulumi.StringPtrInput
	// The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// A `backup` block as defined below.
	Backup *DatabaseBackup `pulumi:"backup"`
	// The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.
	DatabaseType *string `pulumi:"databaseType"`
	// The description of the Database. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the Database.
	IconId *string `pulumi:"iconId"`
	// The name of the Database. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// An `networkInterface` block as defined below.
	NetworkInterface DatabaseNetworkInterface `pulumi:"networkInterface"`
	// The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.
	Parameters map[string]string `pulumi:"parameters"`
	// The password of default user on the database.
	Password string `pulumi:"password"`
	// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.
	Plan *string `pulumi:"plan"`
	// The password of user that processing a replication.
	ReplicaPassword *string `pulumi:"replicaPassword"`
	// The name of user that processing a replication. Default:`replica`.
	ReplicaUser *string `pulumi:"replicaUser"`
	// Any tags to assign to the Database.
	Tags []string `pulumi:"tags"`
	// The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.
	Username string `pulumi:"username"`
	// The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// A `backup` block as defined below.
	Backup DatabaseBackupPtrInput
	// The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.
	DatabaseType pulumi.StringPtrInput
	// The description of the Database. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the Database.
	IconId pulumi.StringPtrInput
	// The name of the Database. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// An `networkInterface` block as defined below.
	NetworkInterface DatabaseNetworkInterfaceInput
	// The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.
	Parameters pulumi.StringMapInput
	// The password of default user on the database.
	Password pulumi.StringInput
	// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.
	Plan pulumi.StringPtrInput
	// The password of user that processing a replication.
	ReplicaPassword pulumi.StringPtrInput
	// The name of user that processing a replication. Default:`replica`.
	ReplicaUser pulumi.StringPtrInput
	// Any tags to assign to the Database.
	Tags pulumi.StringArrayInput
	// The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.
	Username pulumi.StringInput
	// The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((*Database)(nil))
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

func (i *Database) ToDatabasePtrOutput() DatabasePtrOutput {
	return i.ToDatabasePtrOutputWithContext(context.Background())
}

func (i *Database) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePtrOutput)
}

type DatabasePtrInput interface {
	pulumi.Input

	ToDatabasePtrOutput() DatabasePtrOutput
	ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput
}

type databasePtrType DatabaseArgs

func (*databasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil))
}

func (i *databasePtrType) ToDatabasePtrOutput() DatabasePtrOutput {
	return i.ToDatabasePtrOutputWithContext(context.Background())
}

func (i *databasePtrType) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePtrOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//          DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//          DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Database)(nil))
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabasePtrOutput() DatabasePtrOutput {
	return o.ToDatabasePtrOutputWithContext(context.Background())
}

func (o DatabaseOutput) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Database) *Database {
		return &v
	}).(DatabasePtrOutput)
}

type DatabasePtrOutput struct{ *pulumi.OutputState }

func (DatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil))
}

func (o DatabasePtrOutput) ToDatabasePtrOutput() DatabasePtrOutput {
	return o
}

func (o DatabasePtrOutput) ToDatabasePtrOutputWithContext(ctx context.Context) DatabasePtrOutput {
	return o
}

func (o DatabasePtrOutput) Elem() DatabaseOutput {
	return o.ApplyT(func(v *Database) Database {
		if v != nil {
			return *v
		}
		var ret Database
		return ret
	}).(DatabaseOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Database)(nil))
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Database {
		return vs[0].([]Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Database)(nil))
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Database {
		return vs[0].(map[string]Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePtrInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabasePtrOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
