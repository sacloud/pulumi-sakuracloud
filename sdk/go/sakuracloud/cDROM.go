// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type CDROM struct {
	pulumi.CustomResourceState

	// The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`]
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with
	// [`iso_image_file`]
	ContentFileName pulumi.StringPtrOutput `pulumi:"contentFileName"`
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The md5 checksum calculated from the base64 encoded file body
	Hash pulumi.StringOutput `pulumi:"hash"`
	// The icon id to attach to the CD-ROM
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The file path to upload to as the CD-ROM. This conflicts with [`content`]
	IsoImageFile pulumi.StringPtrOutput `pulumi:"isoImageFile"`
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringOutput `pulumi:"name"`
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// Any tags to assign to the CD-ROM
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the CD-ROM will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewCDROM registers a new resource with the given unique name, arguments, and options.
func NewCDROM(ctx *pulumi.Context,
	name string, args *CDROMArgs, opts ...pulumi.ResourceOption) (*CDROM, error) {
	if args == nil {
		args = &CDROMArgs{}
	}
	var resource CDROM
	err := ctx.RegisterResource("sakuracloud:index/cDROM:CDROM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCDROM gets an existing CDROM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCDROM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CDROMState, opts ...pulumi.ResourceOption) (*CDROM, error) {
	var resource CDROM
	err := ctx.ReadResource("sakuracloud:index/cDROM:CDROM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CDROM resources.
type cdromState struct {
	// The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`]
	Content *string `pulumi:"content"`
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with
	// [`iso_image_file`]
	ContentFileName *string `pulumi:"contentFileName"`
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The md5 checksum calculated from the base64 encoded file body
	Hash *string `pulumi:"hash"`
	// The icon id to attach to the CD-ROM
	IconId *string `pulumi:"iconId"`
	// The file path to upload to as the CD-ROM. This conflicts with [`content`]
	IsoImageFile *string `pulumi:"isoImageFile"`
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]
	Size *int `pulumi:"size"`
	// Any tags to assign to the CD-ROM
	Tags []string `pulumi:"tags"`
	// The name of zone that the CD-ROM will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

type CDROMState struct {
	// The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`]
	Content pulumi.StringPtrInput
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with
	// [`iso_image_file`]
	ContentFileName pulumi.StringPtrInput
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The md5 checksum calculated from the base64 encoded file body
	Hash pulumi.StringPtrInput
	// The icon id to attach to the CD-ROM
	IconId pulumi.StringPtrInput
	// The file path to upload to as the CD-ROM. This conflicts with [`content`]
	IsoImageFile pulumi.StringPtrInput
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]
	Size pulumi.IntPtrInput
	// Any tags to assign to the CD-ROM
	Tags pulumi.StringArrayInput
	// The name of zone that the CD-ROM will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (CDROMState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdromState)(nil)).Elem()
}

type cdromArgs struct {
	// The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`]
	Content *string `pulumi:"content"`
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with
	// [`iso_image_file`]
	ContentFileName *string `pulumi:"contentFileName"`
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The md5 checksum calculated from the base64 encoded file body
	Hash *string `pulumi:"hash"`
	// The icon id to attach to the CD-ROM
	IconId *string `pulumi:"iconId"`
	// The file path to upload to as the CD-ROM. This conflicts with [`content`]
	IsoImageFile *string `pulumi:"isoImageFile"`
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]
	Size *int `pulumi:"size"`
	// Any tags to assign to the CD-ROM
	Tags []string `pulumi:"tags"`
	// The name of zone that the CD-ROM will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a CDROM resource.
type CDROMArgs struct {
	// The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`]
	Content pulumi.StringPtrInput
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with
	// [`iso_image_file`]
	ContentFileName pulumi.StringPtrInput
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The md5 checksum calculated from the base64 encoded file body
	Hash pulumi.StringPtrInput
	// The icon id to attach to the CD-ROM
	IconId pulumi.StringPtrInput
	// The file path to upload to as the CD-ROM. This conflicts with [`content`]
	IsoImageFile pulumi.StringPtrInput
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]
	Size pulumi.IntPtrInput
	// Any tags to assign to the CD-ROM
	Tags pulumi.StringArrayInput
	// The name of zone that the CD-ROM will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (CDROMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdromArgs)(nil)).Elem()
}

