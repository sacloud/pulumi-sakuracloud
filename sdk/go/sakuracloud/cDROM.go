// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud CDROM (ISO-Image) resource. This can be used to create, update, and delete CDROMs.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/cdrom.html.markdown.
type CDROM struct {
	s *pulumi.ResourceState
}

// NewCDROM registers a new resource with the given unique name, arguments, and options.
func NewCDROM(ctx *pulumi.Context,
	name string, args *CDROMArgs, opts ...pulumi.ResourceOpt) (*CDROM, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["content"] = nil
		inputs["contentFileName"] = nil
		inputs["description"] = nil
		inputs["hash"] = nil
		inputs["iconId"] = nil
		inputs["isoImageFile"] = nil
		inputs["name"] = nil
		inputs["size"] = nil
		inputs["tags"] = nil
		inputs["zone"] = nil
	} else {
		inputs["content"] = args.Content
		inputs["contentFileName"] = args.ContentFileName
		inputs["description"] = args.Description
		inputs["hash"] = args.Hash
		inputs["iconId"] = args.IconId
		inputs["isoImageFile"] = args.IsoImageFile
		inputs["name"] = args.Name
		inputs["size"] = args.Size
		inputs["tags"] = args.Tags
		inputs["zone"] = args.Zone
	}
	s, err := ctx.RegisterResource("sakuracloud:index/cDROM:CDROM", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CDROM{s: s}, nil
}

// GetCDROM gets an existing CDROM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCDROM(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CDROMState, opts ...pulumi.ResourceOpt) (*CDROM, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["content"] = state.Content
		inputs["contentFileName"] = state.ContentFileName
		inputs["description"] = state.Description
		inputs["hash"] = state.Hash
		inputs["iconId"] = state.IconId
		inputs["isoImageFile"] = state.IsoImageFile
		inputs["name"] = state.Name
		inputs["size"] = state.Size
		inputs["tags"] = state.Tags
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/cDROM:CDROM", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CDROM{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CDROM) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CDROM) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// String of the value of the CDROM. 
func (r *CDROM) Content() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["content"])
}

func (r *CDROM) ContentFileName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["contentFileName"])
}

// The description of the resource.
func (r *CDROM) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// MD5 hash value of the CDROM file.
func (r *CDROM) Hash() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hash"])
}

// The ID of the icon.
func (r *CDROM) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// CDROM file to upload (format:`raw`).
func (r *CDROM) IsoImageFile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["isoImageFile"])
}

// The name of the resource.
func (r *CDROM) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The size of the resource (unit:`GB`).   
// Valid value is one of the following: [ 5 (default) / 10 ]
func (r *CDROM) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// The tag list of the resources.
func (r *CDROM) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The ID of the zone to which the resource belongs.
func (r *CDROM) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering CDROM resources.
type CDROMState struct {
	// String of the value of the CDROM. 
	Content interface{}
	ContentFileName interface{}
	// The description of the resource.
	Description interface{}
	// MD5 hash value of the CDROM file.
	Hash interface{}
	// The ID of the icon.
	IconId interface{}
	// CDROM file to upload (format:`raw`).
	IsoImageFile interface{}
	// The name of the resource.
	Name interface{}
	// The size of the resource (unit:`GB`).   
	// Valid value is one of the following: [ 5 (default) / 10 ]
	Size interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a CDROM resource.
type CDROMArgs struct {
	// String of the value of the CDROM. 
	Content interface{}
	ContentFileName interface{}
	// The description of the resource.
	Description interface{}
	// MD5 hash value of the CDROM file.
	Hash interface{}
	// The ID of the icon.
	IconId interface{}
	// CDROM file to upload (format:`raw`).
	IsoImageFile interface{}
	// The name of the resource.
	Name interface{}
	// The size of the resource (unit:`GB`).   
	// Valid value is one of the following: [ 5 (default) / 10 ]
	Size interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
