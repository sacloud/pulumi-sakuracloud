// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud sakuracloud_enhanced_db.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewEnhancedDB(ctx, "foobar", &sakuracloud.EnhancedDBArgs{
// 			DatabaseName: pulumi.String("example"),
// 			Description:  pulumi.String("..."),
// 			Password:     pulumi.String("your-password"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("..."),
// 				pulumi.String("..."),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type EnhancedDB struct {
	pulumi.CustomResourceState

	// The name of database. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// The type of database.
	DatabaseType pulumi.StringOutput `pulumi:"databaseType"`
	// The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of database host. This will be built from `databaseName` + `tidb-is1.db.sakurausercontent.com`.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The icon id to attach to the Enhanced Database.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The value of max connections setting.
	MaxConnections pulumi.IntOutput `pulumi:"maxConnections"`
	// The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The password of database.
	Password pulumi.StringOutput `pulumi:"password"`
	// The region name.
	Region pulumi.StringOutput `pulumi:"region"`
	// Any tags to assign to the Enhanced Database.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewEnhancedDB registers a new resource with the given unique name, arguments, and options.
func NewEnhancedDB(ctx *pulumi.Context,
	name string, args *EnhancedDBArgs, opts ...pulumi.ResourceOption) (*EnhancedDB, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	var resource EnhancedDB
	err := ctx.RegisterResource("sakuracloud:index/enhancedDB:EnhancedDB", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnhancedDB gets an existing EnhancedDB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnhancedDB(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnhancedDBState, opts ...pulumi.ResourceOption) (*EnhancedDB, error) {
	var resource EnhancedDB
	err := ctx.ReadResource("sakuracloud:index/enhancedDB:EnhancedDB", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnhancedDB resources.
type enhancedDBState struct {
	// The name of database. Changing this forces a new resource to be created.
	DatabaseName *string `pulumi:"databaseName"`
	// The type of database.
	DatabaseType *string `pulumi:"databaseType"`
	// The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The name of database host. This will be built from `databaseName` + `tidb-is1.db.sakurausercontent.com`.
	Hostname *string `pulumi:"hostname"`
	// The icon id to attach to the Enhanced Database.
	IconId *string `pulumi:"iconId"`
	// The value of max connections setting.
	MaxConnections *int `pulumi:"maxConnections"`
	// The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The password of database.
	Password *string `pulumi:"password"`
	// The region name.
	Region *string `pulumi:"region"`
	// Any tags to assign to the Enhanced Database.
	Tags []string `pulumi:"tags"`
}

type EnhancedDBState struct {
	// The name of database. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringPtrInput
	// The type of database.
	DatabaseType pulumi.StringPtrInput
	// The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The name of database host. This will be built from `databaseName` + `tidb-is1.db.sakurausercontent.com`.
	Hostname pulumi.StringPtrInput
	// The icon id to attach to the Enhanced Database.
	IconId pulumi.StringPtrInput
	// The value of max connections setting.
	MaxConnections pulumi.IntPtrInput
	// The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The password of database.
	Password pulumi.StringPtrInput
	// The region name.
	Region pulumi.StringPtrInput
	// Any tags to assign to the Enhanced Database.
	Tags pulumi.StringArrayInput
}

func (EnhancedDBState) ElementType() reflect.Type {
	return reflect.TypeOf((*enhancedDBState)(nil)).Elem()
}

type enhancedDBArgs struct {
	// The name of database. Changing this forces a new resource to be created.
	DatabaseName string `pulumi:"databaseName"`
	// The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the Enhanced Database.
	IconId *string `pulumi:"iconId"`
	// The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The password of database.
	Password string `pulumi:"password"`
	// Any tags to assign to the Enhanced Database.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a EnhancedDB resource.
type EnhancedDBArgs struct {
	// The name of database. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringInput
	// The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the Enhanced Database.
	IconId pulumi.StringPtrInput
	// The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The password of database.
	Password pulumi.StringInput
	// Any tags to assign to the Enhanced Database.
	Tags pulumi.StringArrayInput
}

func (EnhancedDBArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enhancedDBArgs)(nil)).Elem()
}

type EnhancedDBInput interface {
	pulumi.Input

	ToEnhancedDBOutput() EnhancedDBOutput
	ToEnhancedDBOutputWithContext(ctx context.Context) EnhancedDBOutput
}

func (*EnhancedDB) ElementType() reflect.Type {
	return reflect.TypeOf((*EnhancedDB)(nil))
}

func (i *EnhancedDB) ToEnhancedDBOutput() EnhancedDBOutput {
	return i.ToEnhancedDBOutputWithContext(context.Background())
}

func (i *EnhancedDB) ToEnhancedDBOutputWithContext(ctx context.Context) EnhancedDBOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnhancedDBOutput)
}

func (i *EnhancedDB) ToEnhancedDBPtrOutput() EnhancedDBPtrOutput {
	return i.ToEnhancedDBPtrOutputWithContext(context.Background())
}

func (i *EnhancedDB) ToEnhancedDBPtrOutputWithContext(ctx context.Context) EnhancedDBPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnhancedDBPtrOutput)
}

type EnhancedDBPtrInput interface {
	pulumi.Input

	ToEnhancedDBPtrOutput() EnhancedDBPtrOutput
	ToEnhancedDBPtrOutputWithContext(ctx context.Context) EnhancedDBPtrOutput
}

type enhancedDBPtrType EnhancedDBArgs

func (*enhancedDBPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnhancedDB)(nil))
}

func (i *enhancedDBPtrType) ToEnhancedDBPtrOutput() EnhancedDBPtrOutput {
	return i.ToEnhancedDBPtrOutputWithContext(context.Background())
}

func (i *enhancedDBPtrType) ToEnhancedDBPtrOutputWithContext(ctx context.Context) EnhancedDBPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnhancedDBPtrOutput)
}

// EnhancedDBArrayInput is an input type that accepts EnhancedDBArray and EnhancedDBArrayOutput values.
// You can construct a concrete instance of `EnhancedDBArrayInput` via:
//
//          EnhancedDBArray{ EnhancedDBArgs{...} }
type EnhancedDBArrayInput interface {
	pulumi.Input

	ToEnhancedDBArrayOutput() EnhancedDBArrayOutput
	ToEnhancedDBArrayOutputWithContext(context.Context) EnhancedDBArrayOutput
}

type EnhancedDBArray []EnhancedDBInput

func (EnhancedDBArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnhancedDB)(nil)).Elem()
}

func (i EnhancedDBArray) ToEnhancedDBArrayOutput() EnhancedDBArrayOutput {
	return i.ToEnhancedDBArrayOutputWithContext(context.Background())
}

func (i EnhancedDBArray) ToEnhancedDBArrayOutputWithContext(ctx context.Context) EnhancedDBArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnhancedDBArrayOutput)
}

// EnhancedDBMapInput is an input type that accepts EnhancedDBMap and EnhancedDBMapOutput values.
// You can construct a concrete instance of `EnhancedDBMapInput` via:
//
//          EnhancedDBMap{ "key": EnhancedDBArgs{...} }
type EnhancedDBMapInput interface {
	pulumi.Input

	ToEnhancedDBMapOutput() EnhancedDBMapOutput
	ToEnhancedDBMapOutputWithContext(context.Context) EnhancedDBMapOutput
}

type EnhancedDBMap map[string]EnhancedDBInput

func (EnhancedDBMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnhancedDB)(nil)).Elem()
}

func (i EnhancedDBMap) ToEnhancedDBMapOutput() EnhancedDBMapOutput {
	return i.ToEnhancedDBMapOutputWithContext(context.Background())
}

func (i EnhancedDBMap) ToEnhancedDBMapOutputWithContext(ctx context.Context) EnhancedDBMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnhancedDBMapOutput)
}

type EnhancedDBOutput struct{ *pulumi.OutputState }

func (EnhancedDBOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnhancedDB)(nil))
}

func (o EnhancedDBOutput) ToEnhancedDBOutput() EnhancedDBOutput {
	return o
}

func (o EnhancedDBOutput) ToEnhancedDBOutputWithContext(ctx context.Context) EnhancedDBOutput {
	return o
}

func (o EnhancedDBOutput) ToEnhancedDBPtrOutput() EnhancedDBPtrOutput {
	return o.ToEnhancedDBPtrOutputWithContext(context.Background())
}

func (o EnhancedDBOutput) ToEnhancedDBPtrOutputWithContext(ctx context.Context) EnhancedDBPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnhancedDB) *EnhancedDB {
		return &v
	}).(EnhancedDBPtrOutput)
}

type EnhancedDBPtrOutput struct{ *pulumi.OutputState }

func (EnhancedDBPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnhancedDB)(nil))
}

func (o EnhancedDBPtrOutput) ToEnhancedDBPtrOutput() EnhancedDBPtrOutput {
	return o
}

func (o EnhancedDBPtrOutput) ToEnhancedDBPtrOutputWithContext(ctx context.Context) EnhancedDBPtrOutput {
	return o
}

func (o EnhancedDBPtrOutput) Elem() EnhancedDBOutput {
	return o.ApplyT(func(v *EnhancedDB) EnhancedDB {
		if v != nil {
			return *v
		}
		var ret EnhancedDB
		return ret
	}).(EnhancedDBOutput)
}

type EnhancedDBArrayOutput struct{ *pulumi.OutputState }

func (EnhancedDBArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnhancedDB)(nil))
}

func (o EnhancedDBArrayOutput) ToEnhancedDBArrayOutput() EnhancedDBArrayOutput {
	return o
}

func (o EnhancedDBArrayOutput) ToEnhancedDBArrayOutputWithContext(ctx context.Context) EnhancedDBArrayOutput {
	return o
}

func (o EnhancedDBArrayOutput) Index(i pulumi.IntInput) EnhancedDBOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnhancedDB {
		return vs[0].([]EnhancedDB)[vs[1].(int)]
	}).(EnhancedDBOutput)
}

type EnhancedDBMapOutput struct{ *pulumi.OutputState }

func (EnhancedDBMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EnhancedDB)(nil))
}

func (o EnhancedDBMapOutput) ToEnhancedDBMapOutput() EnhancedDBMapOutput {
	return o
}

func (o EnhancedDBMapOutput) ToEnhancedDBMapOutputWithContext(ctx context.Context) EnhancedDBMapOutput {
	return o
}

func (o EnhancedDBMapOutput) MapIndex(k pulumi.StringInput) EnhancedDBOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EnhancedDB {
		return vs[0].(map[string]EnhancedDB)[vs[1].(string)]
	}).(EnhancedDBOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnhancedDBInput)(nil)).Elem(), &EnhancedDB{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnhancedDBPtrInput)(nil)).Elem(), &EnhancedDB{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnhancedDBArrayInput)(nil)).Elem(), EnhancedDBArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnhancedDBMapInput)(nil)).Elem(), EnhancedDBMap{})
	pulumi.RegisterOutputType(EnhancedDBOutput{})
	pulumi.RegisterOutputType(EnhancedDBPtrOutput{})
	pulumi.RegisterOutputType(EnhancedDBArrayOutput{})
	pulumi.RegisterOutputType(EnhancedDBMapOutput{})
}
