// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to retrieve information about a SakuraCloud VPC Router.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/d/vpc_router.html.markdown.
func LookupVPCRouter(ctx *pulumi.Context, args *GetVPCRouterArgs) (*GetVPCRouterResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["filters"] = args.Filters
		inputs["nameSelectors"] = args.NameSelectors
		inputs["tagSelectors"] = args.TagSelectors
		inputs["zone"] = args.Zone
	}
	outputs, err := ctx.Invoke("sakuracloud:index/getVPCRouter:getVPCRouter", inputs)
	if err != nil {
		return nil, err
	}
	return &GetVPCRouterResult{
		Aliases: outputs["aliases"],
		Description: outputs["description"],
		DhcpServers: outputs["dhcpServers"],
		DhcpStaticMappings: outputs["dhcpStaticMappings"],
		Filters: outputs["filters"],
		Firewalls: outputs["firewalls"],
		GlobalAddress: outputs["globalAddress"],
		IconId: outputs["iconId"],
		Interfaces: outputs["interfaces"],
		InternetConnection: outputs["internetConnection"],
		Ipaddress1: outputs["ipaddress1"],
		Ipaddress2: outputs["ipaddress2"],
		L2tps: outputs["l2tps"],
		Name: outputs["name"],
		NameSelectors: outputs["nameSelectors"],
		Plan: outputs["plan"],
		PortForwardings: outputs["portForwardings"],
		Pptps: outputs["pptps"],
		SiteToSiteVpns: outputs["siteToSiteVpns"],
		StaticNats: outputs["staticNats"],
		StaticRoutes: outputs["staticRoutes"],
		SwitchId: outputs["switchId"],
		SyslogHost: outputs["syslogHost"],
		TagSelectors: outputs["tagSelectors"],
		Tags: outputs["tags"],
		Users: outputs["users"],
		Vip: outputs["vip"],
		Vrid: outputs["vrid"],
		Zone: outputs["zone"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getVPCRouter.
type GetVPCRouterArgs struct {
	// The map of filter key and value.
	Filters interface{}
	// The list of names to filtering.
	NameSelectors interface{}
	// The list of tags to filtering.
	TagSelectors interface{}
	// The ID of the zone.
	Zone interface{}
}

// A collection of values returned by getVPCRouter.
type GetVPCRouterResult struct {
	// The IP address aliase list. Used when plan is in `premium` or `highspec`.
	Aliases interface{}
	// The description of the resource.
	Description interface{}
	DhcpServers interface{}
	DhcpStaticMappings interface{}
	Filters interface{}
	Firewalls interface{}
	// Global IP address of the VPC Router.
	GlobalAddress interface{}
	// The ID of the icon of the resource.
	IconId interface{}
	Interfaces interface{}
	// The flag of enable/disable connection from the VPC Router to the Internet.
	InternetConnection interface{}
	// The primary IP address of the VPC Router.
	Ipaddress1 interface{}
	// The secondly IP address of the VPC Router. Used when plan is in `premium` or `highspec`.
	Ipaddress2 interface{}
	L2tps interface{}
	// The name of the resource.
	Name interface{}
	NameSelectors interface{}
	// The name of the resource plan. 
	Plan interface{}
	PortForwardings interface{}
	Pptps interface{}
	SiteToSiteVpns interface{}
	StaticNats interface{}
	StaticRoutes interface{}
	// The ID of the Switch connected to the VPC Router (eth0).
	SwitchId interface{}
	// The destination HostName/IP address to send log.	
	SyslogHost interface{}
	TagSelectors interface{}
	// The tag list of the resources.
	Tags interface{}
	Users interface{}
	// Virtual IP address of the VPC Router. Used when plan is in `premium` or `highspec`.
	Vip interface{}
	// VRID used when plan is in `premium` or `highspec`.
	Vrid interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
