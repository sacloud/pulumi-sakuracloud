// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Archive Sharing.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		source, err := sakuracloud.NewArchive(ctx, "source", &sakuracloud.ArchiveArgs{
// 			Size:        pulumi.Int(20),
// 			ArchiveFile: pulumi.String("test/dummy.raw"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewArchiveShare(ctx, "shareInfo", &sakuracloud.ArchiveShareArgs{
// 			ArchiveId: source.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ArchiveShare struct {
	pulumi.CustomResourceState

	// The id of the archive. Changing this forces a new resource to be created.
	ArchiveId pulumi.StringOutput `pulumi:"archiveId"`
	// The key to use sharing the Archive.
	ShareKey pulumi.StringOutput `pulumi:"shareKey"`
	// The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewArchiveShare registers a new resource with the given unique name, arguments, and options.
func NewArchiveShare(ctx *pulumi.Context,
	name string, args *ArchiveShareArgs, opts ...pulumi.ResourceOption) (*ArchiveShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchiveId == nil {
		return nil, errors.New("invalid value for required argument 'ArchiveId'")
	}
	var resource ArchiveShare
	err := ctx.RegisterResource("sakuracloud:index/archiveShare:ArchiveShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArchiveShare gets an existing ArchiveShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArchiveShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArchiveShareState, opts ...pulumi.ResourceOption) (*ArchiveShare, error) {
	var resource ArchiveShare
	err := ctx.ReadResource("sakuracloud:index/archiveShare:ArchiveShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArchiveShare resources.
type archiveShareState struct {
	// The id of the archive. Changing this forces a new resource to be created.
	ArchiveId *string `pulumi:"archiveId"`
	// The key to use sharing the Archive.
	ShareKey *string `pulumi:"shareKey"`
	// The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type ArchiveShareState struct {
	// The id of the archive. Changing this forces a new resource to be created.
	ArchiveId pulumi.StringPtrInput
	// The key to use sharing the Archive.
	ShareKey pulumi.StringPtrInput
	// The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (ArchiveShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveShareState)(nil)).Elem()
}

type archiveShareArgs struct {
	// The id of the archive. Changing this forces a new resource to be created.
	ArchiveId string `pulumi:"archiveId"`
	// The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a ArchiveShare resource.
type ArchiveShareArgs struct {
	// The id of the archive. Changing this forces a new resource to be created.
	ArchiveId pulumi.StringInput
	// The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (ArchiveShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*archiveShareArgs)(nil)).Elem()
}

type ArchiveShareInput interface {
	pulumi.Input

	ToArchiveShareOutput() ArchiveShareOutput
	ToArchiveShareOutputWithContext(ctx context.Context) ArchiveShareOutput
}

func (*ArchiveShare) ElementType() reflect.Type {
	return reflect.TypeOf((*ArchiveShare)(nil))
}

func (i *ArchiveShare) ToArchiveShareOutput() ArchiveShareOutput {
	return i.ToArchiveShareOutputWithContext(context.Background())
}

func (i *ArchiveShare) ToArchiveShareOutputWithContext(ctx context.Context) ArchiveShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveShareOutput)
}

func (i *ArchiveShare) ToArchiveSharePtrOutput() ArchiveSharePtrOutput {
	return i.ToArchiveSharePtrOutputWithContext(context.Background())
}

func (i *ArchiveShare) ToArchiveSharePtrOutputWithContext(ctx context.Context) ArchiveSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveSharePtrOutput)
}

type ArchiveSharePtrInput interface {
	pulumi.Input

	ToArchiveSharePtrOutput() ArchiveSharePtrOutput
	ToArchiveSharePtrOutputWithContext(ctx context.Context) ArchiveSharePtrOutput
}

type archiveSharePtrType ArchiveShareArgs

func (*archiveSharePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArchiveShare)(nil))
}

func (i *archiveSharePtrType) ToArchiveSharePtrOutput() ArchiveSharePtrOutput {
	return i.ToArchiveSharePtrOutputWithContext(context.Background())
}

func (i *archiveSharePtrType) ToArchiveSharePtrOutputWithContext(ctx context.Context) ArchiveSharePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveSharePtrOutput)
}

// ArchiveShareArrayInput is an input type that accepts ArchiveShareArray and ArchiveShareArrayOutput values.
// You can construct a concrete instance of `ArchiveShareArrayInput` via:
//
//          ArchiveShareArray{ ArchiveShareArgs{...} }
type ArchiveShareArrayInput interface {
	pulumi.Input

	ToArchiveShareArrayOutput() ArchiveShareArrayOutput
	ToArchiveShareArrayOutputWithContext(context.Context) ArchiveShareArrayOutput
}

type ArchiveShareArray []ArchiveShareInput

func (ArchiveShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArchiveShare)(nil)).Elem()
}

func (i ArchiveShareArray) ToArchiveShareArrayOutput() ArchiveShareArrayOutput {
	return i.ToArchiveShareArrayOutputWithContext(context.Background())
}

func (i ArchiveShareArray) ToArchiveShareArrayOutputWithContext(ctx context.Context) ArchiveShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveShareArrayOutput)
}

// ArchiveShareMapInput is an input type that accepts ArchiveShareMap and ArchiveShareMapOutput values.
// You can construct a concrete instance of `ArchiveShareMapInput` via:
//
//          ArchiveShareMap{ "key": ArchiveShareArgs{...} }
type ArchiveShareMapInput interface {
	pulumi.Input

	ToArchiveShareMapOutput() ArchiveShareMapOutput
	ToArchiveShareMapOutputWithContext(context.Context) ArchiveShareMapOutput
}

type ArchiveShareMap map[string]ArchiveShareInput

func (ArchiveShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArchiveShare)(nil)).Elem()
}

func (i ArchiveShareMap) ToArchiveShareMapOutput() ArchiveShareMapOutput {
	return i.ToArchiveShareMapOutputWithContext(context.Background())
}

func (i ArchiveShareMap) ToArchiveShareMapOutputWithContext(ctx context.Context) ArchiveShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchiveShareMapOutput)
}

type ArchiveShareOutput struct{ *pulumi.OutputState }

func (ArchiveShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArchiveShare)(nil))
}

func (o ArchiveShareOutput) ToArchiveShareOutput() ArchiveShareOutput {
	return o
}

func (o ArchiveShareOutput) ToArchiveShareOutputWithContext(ctx context.Context) ArchiveShareOutput {
	return o
}

func (o ArchiveShareOutput) ToArchiveSharePtrOutput() ArchiveSharePtrOutput {
	return o.ToArchiveSharePtrOutputWithContext(context.Background())
}

func (o ArchiveShareOutput) ToArchiveSharePtrOutputWithContext(ctx context.Context) ArchiveSharePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArchiveShare) *ArchiveShare {
		return &v
	}).(ArchiveSharePtrOutput)
}

type ArchiveSharePtrOutput struct{ *pulumi.OutputState }

func (ArchiveSharePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArchiveShare)(nil))
}

func (o ArchiveSharePtrOutput) ToArchiveSharePtrOutput() ArchiveSharePtrOutput {
	return o
}

func (o ArchiveSharePtrOutput) ToArchiveSharePtrOutputWithContext(ctx context.Context) ArchiveSharePtrOutput {
	return o
}

func (o ArchiveSharePtrOutput) Elem() ArchiveShareOutput {
	return o.ApplyT(func(v *ArchiveShare) ArchiveShare {
		if v != nil {
			return *v
		}
		var ret ArchiveShare
		return ret
	}).(ArchiveShareOutput)
}

type ArchiveShareArrayOutput struct{ *pulumi.OutputState }

func (ArchiveShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArchiveShare)(nil))
}

func (o ArchiveShareArrayOutput) ToArchiveShareArrayOutput() ArchiveShareArrayOutput {
	return o
}

func (o ArchiveShareArrayOutput) ToArchiveShareArrayOutputWithContext(ctx context.Context) ArchiveShareArrayOutput {
	return o
}

func (o ArchiveShareArrayOutput) Index(i pulumi.IntInput) ArchiveShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArchiveShare {
		return vs[0].([]ArchiveShare)[vs[1].(int)]
	}).(ArchiveShareOutput)
}

type ArchiveShareMapOutput struct{ *pulumi.OutputState }

func (ArchiveShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArchiveShare)(nil))
}

func (o ArchiveShareMapOutput) ToArchiveShareMapOutput() ArchiveShareMapOutput {
	return o
}

func (o ArchiveShareMapOutput) ToArchiveShareMapOutputWithContext(ctx context.Context) ArchiveShareMapOutput {
	return o
}

func (o ArchiveShareMapOutput) MapIndex(k pulumi.StringInput) ArchiveShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArchiveShare {
		return vs[0].(map[string]ArchiveShare)[vs[1].(string)]
	}).(ArchiveShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveShareInput)(nil)).Elem(), &ArchiveShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveSharePtrInput)(nil)).Elem(), &ArchiveShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveShareArrayInput)(nil)).Elem(), ArchiveShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArchiveShareMapInput)(nil)).Elem(), ArchiveShareMap{})
	pulumi.RegisterOutputType(ArchiveShareOutput{})
	pulumi.RegisterOutputType(ArchiveSharePtrOutput{})
	pulumi.RegisterOutputType(ArchiveShareArrayOutput{})
	pulumi.RegisterOutputType(ArchiveShareMapOutput{})
}
