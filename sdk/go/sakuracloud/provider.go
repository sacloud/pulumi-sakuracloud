// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the sakuracloud package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the
	// `SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is specified
	AcceptLanguage pulumi.StringPtrOutput `pulumi:"acceptLanguage"`
	// The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment variables, or
	// via a shared credentials file if `profile` is specified. Default:`https://secure.sakura.ad.jp/cloud/zone`
	ApiRootUrl pulumi.StringPtrOutput `pulumi:"apiRootUrl"`
	// The name of zone to use as default for global resources. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_DEFAULT_ZONE` environment variables, or via a shared credentials file if `profile` is specified
	DefaultZone pulumi.StringPtrOutput `pulumi:"defaultZone"`
	// The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can also be sourced
	// from the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is specified
	FakeMode pulumi.StringPtrOutput `pulumi:"fakeMode"`
	// The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping the
	// provider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared credentials file if
	// `profile` is specified
	FakeStorePath pulumi.StringPtrOutput `pulumi:"fakeStorePath"`
	// The profile name of your SakuraCloud account. Default:`default`
	Profile pulumi.StringPtrOutput `pulumi:"profile"`
	// The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is specified
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified
	Token pulumi.StringPtrOutput `pulumi:"token"`
	// The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment variables, or via a
	// shared credentials file if `profile` is specified
	Trace pulumi.StringPtrOutput `pulumi:"trace"`
	// The name of zone to use as default. It must be provided, but it can also be sourced from the `SAKURACLOUD_ZONE`
	// environment variables, or via a shared credentials file if `profile` is specified
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.Profile == nil {
		args.Profile = pulumi.StringPtr(getEnvOrDefault("default", nil, "SAKURACLOUD_PROFILE").(string))
	}
	if args.Secret == nil {
		args.Secret = pulumi.StringPtr(getEnvOrDefault("", nil, "SAKURACLOUD_ACCESS_TOKEN_SECRET").(string))
	}
	if args.Token == nil {
		args.Token = pulumi.StringPtr(getEnvOrDefault("", nil, "SAKURACLOUD_ACCESS_TOKEN").(string))
	}
	if args.Zone == nil {
		args.Zone = pulumi.StringPtr(getEnvOrDefault("is1b", nil, "SAKURACLOUD_ZONE").(string))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:sakuracloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the
	// `SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is specified
	AcceptLanguage *string `pulumi:"acceptLanguage"`
	// The maximum number of SakuraCloud API calls per second. It can also be sourced from the `SAKURACLOUD_RATE_LIMIT`
	// environment variables, or via a shared credentials file if `profile` is specified. Default:`10`
	ApiRequestRateLimit *int `pulumi:"apiRequestRateLimit"`
	// The timeout seconds for each SakuraCloud API call. It can also be sourced from the `SAKURACLOUD_API_REQUEST_TIMEOUT`
	// environment variables, or via a shared credentials file if `profile` is specified. Default:`300`
	ApiRequestTimeout *int `pulumi:"apiRequestTimeout"`
	// The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment variables, or
	// via a shared credentials file if `profile` is specified. Default:`https://secure.sakura.ad.jp/cloud/zone`
	ApiRootUrl *string `pulumi:"apiRootUrl"`
	// The name of zone to use as default for global resources. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_DEFAULT_ZONE` environment variables, or via a shared credentials file if `profile` is specified
	DefaultZone *string `pulumi:"defaultZone"`
	// The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can also be sourced
	// from the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is specified
	FakeMode *string `pulumi:"fakeMode"`
	// The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping the
	// provider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared credentials file if
	// `profile` is specified
	FakeStorePath *string `pulumi:"fakeStorePath"`
	// The profile name of your SakuraCloud account. Default:`default`
	Profile *string `pulumi:"profile"`
	// The maximum number of API call retries used when SakuraCloud API returns status code `423` or `503`. It can also be
	// sourced from the `SAKURACLOUD_RETRY_MAX` environment variables, or via a shared credentials file if `profile` is
	// specified. Default:`100`
	RetryMax *int `pulumi:"retryMax"`
	// The maximum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or
	// `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MAX` environment variables, or via a shared credentials
	// file if `profile` is specified
	RetryWaitMax *int `pulumi:"retryWaitMax"`
	// The minimum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or
	// `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MIN` environment variables, or via a shared credentials
	// file if `profile` is specified
	RetryWaitMin *int `pulumi:"retryWaitMin"`
	// The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is specified
	Secret *string `pulumi:"secret"`
	// The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified
	Token *string `pulumi:"token"`
	// The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment variables, or via a
	// shared credentials file if `profile` is specified
	Trace *string `pulumi:"trace"`
	// The name of zone to use as default. It must be provided, but it can also be sourced from the `SAKURACLOUD_ZONE`
	// environment variables, or via a shared credentials file if `profile` is specified
	Zone *string `pulumi:"zone"`
	// A list of available SakuraCloud zone name. It can also be sourced via a shared credentials file if `profile` is
	// specified. Default:[`is1a`, `is1b`, `tk1a`, `tk1v`]
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the
	// `SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is specified
	AcceptLanguage pulumi.StringPtrInput
	// The maximum number of SakuraCloud API calls per second. It can also be sourced from the `SAKURACLOUD_RATE_LIMIT`
	// environment variables, or via a shared credentials file if `profile` is specified. Default:`10`
	ApiRequestRateLimit pulumi.IntPtrInput
	// The timeout seconds for each SakuraCloud API call. It can also be sourced from the `SAKURACLOUD_API_REQUEST_TIMEOUT`
	// environment variables, or via a shared credentials file if `profile` is specified. Default:`300`
	ApiRequestTimeout pulumi.IntPtrInput
	// The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment variables, or
	// via a shared credentials file if `profile` is specified. Default:`https://secure.sakura.ad.jp/cloud/zone`
	ApiRootUrl pulumi.StringPtrInput
	// The name of zone to use as default for global resources. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_DEFAULT_ZONE` environment variables, or via a shared credentials file if `profile` is specified
	DefaultZone pulumi.StringPtrInput
	// The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can also be sourced
	// from the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is specified
	FakeMode pulumi.StringPtrInput
	// The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping the
	// provider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared credentials file if
	// `profile` is specified
	FakeStorePath pulumi.StringPtrInput
	// The profile name of your SakuraCloud account. Default:`default`
	Profile pulumi.StringPtrInput
	// The maximum number of API call retries used when SakuraCloud API returns status code `423` or `503`. It can also be
	// sourced from the `SAKURACLOUD_RETRY_MAX` environment variables, or via a shared credentials file if `profile` is
	// specified. Default:`100`
	RetryMax pulumi.IntPtrInput
	// The maximum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or
	// `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MAX` environment variables, or via a shared credentials
	// file if `profile` is specified
	RetryWaitMax pulumi.IntPtrInput
	// The minimum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or
	// `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MIN` environment variables, or via a shared credentials
	// file if `profile` is specified
	RetryWaitMin pulumi.IntPtrInput
	// The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is specified
	Secret pulumi.StringPtrInput
	// The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the
	// `SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified
	Token pulumi.StringPtrInput
	// The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment variables, or via a
	// shared credentials file if `profile` is specified
	Trace pulumi.StringPtrInput
	// The name of zone to use as default. It must be provided, but it can also be sourced from the `SAKURACLOUD_ZONE`
	// environment variables, or via a shared credentials file if `profile` is specified
	Zone pulumi.StringPtrInput
	// A list of available SakuraCloud zone name. It can also be sourced via a shared credentials file if `profile` is
	// specified. Default:[`is1a`, `is1b`, `tk1a`, `tk1v`]
	Zones pulumi.StringArrayInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *Provider) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderPtrInput interface {
	pulumi.Input

	ToProviderPtrOutput() ProviderPtrOutput
	ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput
}

type providerPtrType ProviderArgs

func (*providerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (i *providerPtrType) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *providerPtrType) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o.ToProviderPtrOutputWithContext(context.Background())
}

func (o ProviderOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Provider) *Provider {
		return &v
	}).(ProviderPtrOutput)
}

type ProviderPtrOutput struct{ *pulumi.OutputState }

func (ProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (o ProviderPtrOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o
}

func (o ProviderPtrOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o
}

func (o ProviderPtrOutput) Elem() ProviderOutput {
	return o.ApplyT(func(v *Provider) Provider {
		if v != nil {
			return *v
		}
		var ret Provider
		return ret
	}).(ProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderPtrInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderPtrOutput{})
}
