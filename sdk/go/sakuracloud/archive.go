// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Archive resource. This can be used to create, update, and delete Archives.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/archive.html.markdown.
type Archive struct {
	s *pulumi.ResourceState
}

// NewArchive registers a new resource with the given unique name, arguments, and options.
func NewArchive(ctx *pulumi.Context,
	name string, args *ArchiveArgs, opts ...pulumi.ResourceOpt) (*Archive, error) {
	if args == nil || args.ArchiveFile == nil {
		return nil, errors.New("missing required argument 'ArchiveFile'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["archiveFile"] = nil
		inputs["description"] = nil
		inputs["hash"] = nil
		inputs["iconId"] = nil
		inputs["name"] = nil
		inputs["size"] = nil
		inputs["tags"] = nil
		inputs["zone"] = nil
	} else {
		inputs["archiveFile"] = args.ArchiveFile
		inputs["description"] = args.Description
		inputs["hash"] = args.Hash
		inputs["iconId"] = args.IconId
		inputs["name"] = args.Name
		inputs["size"] = args.Size
		inputs["tags"] = args.Tags
		inputs["zone"] = args.Zone
	}
	s, err := ctx.RegisterResource("sakuracloud:index/archive:Archive", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Archive{s: s}, nil
}

// GetArchive gets an existing Archive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArchive(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ArchiveState, opts ...pulumi.ResourceOpt) (*Archive, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["archiveFile"] = state.ArchiveFile
		inputs["description"] = state.Description
		inputs["hash"] = state.Hash
		inputs["iconId"] = state.IconId
		inputs["name"] = state.Name
		inputs["size"] = state.Size
		inputs["tags"] = state.Tags
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/archive:Archive", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Archive{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Archive) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Archive) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Archive file to upload (format:`raw`).
func (r *Archive) ArchiveFile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["archiveFile"])
}

// The description of the resource.
func (r *Archive) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// MD5 hash value of the archive file.
func (r *Archive) Hash() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hash"])
}

// The ID of the icon.
func (r *Archive) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The name of the resource.
func (r *Archive) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The size of the resource (unit:`GB`).   
// Valid value is one of the following: [ 20 (default) / 40 / 60 / 80 / 100 / 250 / 500 / 750 / 1024 ]
func (r *Archive) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// The tag list of the resources.
func (r *Archive) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The ID of the zone to which the resource belongs.
func (r *Archive) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Archive resources.
type ArchiveState struct {
	// Archive file to upload (format:`raw`).
	ArchiveFile interface{}
	// The description of the resource.
	Description interface{}
	// MD5 hash value of the archive file.
	Hash interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The size of the resource (unit:`GB`).   
	// Valid value is one of the following: [ 20 (default) / 40 / 60 / 80 / 100 / 250 / 500 / 750 / 1024 ]
	Size interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a Archive resource.
type ArchiveArgs struct {
	// Archive file to upload (format:`raw`).
	ArchiveFile interface{}
	// The description of the resource.
	Description interface{}
	// MD5 hash value of the archive file.
	Hash interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The size of the resource (unit:`GB`).   
	// Valid value is one of the following: [ 20 (default) / 40 / 60 / 80 / 100 / 250 / 500 / 750 / 1024 ]
	Size interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
