// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about an existing Bridge.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.LookupBridge(ctx, &GetBridgeArgs{
// 			Filter: GetBridgeFilter{
// 				Names: []string{
// 					"foobar",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupBridge(ctx *pulumi.Context, args *LookupBridgeArgs, opts ...pulumi.InvokeOption) (*LookupBridgeResult, error) {
	var rv LookupBridgeResult
	err := ctx.Invoke("sakuracloud:index/getBridge:getBridge", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBridge.
type LookupBridgeArgs struct {
	// One or more values used for filtering, as defined below.
	Filter *GetBridgeFilter `pulumi:"filter"`
	// The name of zone that the Bridge is in (e.g. `is1a`, `tk1a`).
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getBridge.
type LookupBridgeResult struct {
	// The description of the Bridge.
	Description string           `pulumi:"description"`
	Filter      *GetBridgeFilter `pulumi:"filter"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the Bridge.
	Name string `pulumi:"name"`
	Zone string `pulumi:"zone"`
}

func LookupBridgeOutput(ctx *pulumi.Context, args LookupBridgeOutputArgs, opts ...pulumi.InvokeOption) LookupBridgeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBridgeResult, error) {
			args := v.(LookupBridgeArgs)
			r, err := LookupBridge(ctx, &args, opts...)
			return *r, err
		}).(LookupBridgeResultOutput)
}

// A collection of arguments for invoking getBridge.
type LookupBridgeOutputArgs struct {
	// One or more values used for filtering, as defined below.
	Filter GetBridgeFilterPtrInput `pulumi:"filter"`
	// The name of zone that the Bridge is in (e.g. `is1a`, `tk1a`).
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LookupBridgeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBridgeArgs)(nil)).Elem()
}

// A collection of values returned by getBridge.
type LookupBridgeResultOutput struct{ *pulumi.OutputState }

func (LookupBridgeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBridgeResult)(nil)).Elem()
}

func (o LookupBridgeResultOutput) ToLookupBridgeResultOutput() LookupBridgeResultOutput {
	return o
}

func (o LookupBridgeResultOutput) ToLookupBridgeResultOutputWithContext(ctx context.Context) LookupBridgeResultOutput {
	return o
}

// The description of the Bridge.
func (o LookupBridgeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBridgeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupBridgeResultOutput) Filter() GetBridgeFilterPtrOutput {
	return o.ApplyT(func(v LookupBridgeResult) *GetBridgeFilter { return v.Filter }).(GetBridgeFilterPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupBridgeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBridgeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Bridge.
func (o LookupBridgeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBridgeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupBridgeResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBridgeResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBridgeResultOutput{})
}
