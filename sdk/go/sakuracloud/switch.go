// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Switch.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewSwitch(ctx, "foobar", &sakuracloud.SwitchArgs{
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Switch struct {
	pulumi.CustomResourceState

	// The bridge id attached to the Switch.
	BridgeId pulumi.StringPtrOutput `pulumi:"bridgeId"`
	// The description of the Switch. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The icon id to attach to the Switch.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the Switch. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of server id connected to the switch.
	ServerIds pulumi.StringArrayOutput `pulumi:"serverIds"`
	// Any tags to assign to the Switch.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSwitch registers a new resource with the given unique name, arguments, and options.
func NewSwitch(ctx *pulumi.Context,
	name string, args *SwitchArgs, opts ...pulumi.ResourceOption) (*Switch, error) {
	if args == nil {
		args = &SwitchArgs{}
	}

	var resource Switch
	err := ctx.RegisterResource("sakuracloud:index/switch:Switch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitch gets an existing Switch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchState, opts ...pulumi.ResourceOption) (*Switch, error) {
	var resource Switch
	err := ctx.ReadResource("sakuracloud:index/switch:Switch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Switch resources.
type switchState struct {
	// The bridge id attached to the Switch.
	BridgeId *string `pulumi:"bridgeId"`
	// The description of the Switch. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the Switch.
	IconId *string `pulumi:"iconId"`
	// The name of the Switch. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// A list of server id connected to the switch.
	ServerIds []string `pulumi:"serverIds"`
	// Any tags to assign to the Switch.
	Tags []string `pulumi:"tags"`
	// The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type SwitchState struct {
	// The bridge id attached to the Switch.
	BridgeId pulumi.StringPtrInput
	// The description of the Switch. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the Switch.
	IconId pulumi.StringPtrInput
	// The name of the Switch. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// A list of server id connected to the switch.
	ServerIds pulumi.StringArrayInput
	// Any tags to assign to the Switch.
	Tags pulumi.StringArrayInput
	// The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (SwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchState)(nil)).Elem()
}

type switchArgs struct {
	// The bridge id attached to the Switch.
	BridgeId *string `pulumi:"bridgeId"`
	// The description of the Switch. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the Switch.
	IconId *string `pulumi:"iconId"`
	// The name of the Switch. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// Any tags to assign to the Switch.
	Tags []string `pulumi:"tags"`
	// The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Switch resource.
type SwitchArgs struct {
	// The bridge id attached to the Switch.
	BridgeId pulumi.StringPtrInput
	// The description of the Switch. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the Switch.
	IconId pulumi.StringPtrInput
	// The name of the Switch. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// Any tags to assign to the Switch.
	Tags pulumi.StringArrayInput
	// The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (SwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchArgs)(nil)).Elem()
}

type SwitchInput interface {
	pulumi.Input

	ToSwitchOutput() SwitchOutput
	ToSwitchOutputWithContext(ctx context.Context) SwitchOutput
}

func (*Switch) ElementType() reflect.Type {
	return reflect.TypeOf((*Switch)(nil))
}

func (i *Switch) ToSwitchOutput() SwitchOutput {
	return i.ToSwitchOutputWithContext(context.Background())
}

func (i *Switch) ToSwitchOutputWithContext(ctx context.Context) SwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchOutput)
}

func (i *Switch) ToSwitchPtrOutput() SwitchPtrOutput {
	return i.ToSwitchPtrOutputWithContext(context.Background())
}

func (i *Switch) ToSwitchPtrOutputWithContext(ctx context.Context) SwitchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPtrOutput)
}

type SwitchPtrInput interface {
	pulumi.Input

	ToSwitchPtrOutput() SwitchPtrOutput
	ToSwitchPtrOutputWithContext(ctx context.Context) SwitchPtrOutput
}

type switchPtrType SwitchArgs

func (*switchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Switch)(nil))
}

func (i *switchPtrType) ToSwitchPtrOutput() SwitchPtrOutput {
	return i.ToSwitchPtrOutputWithContext(context.Background())
}

func (i *switchPtrType) ToSwitchPtrOutputWithContext(ctx context.Context) SwitchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchPtrOutput)
}

// SwitchArrayInput is an input type that accepts SwitchArray and SwitchArrayOutput values.
// You can construct a concrete instance of `SwitchArrayInput` via:
//
//          SwitchArray{ SwitchArgs{...} }
type SwitchArrayInput interface {
	pulumi.Input

	ToSwitchArrayOutput() SwitchArrayOutput
	ToSwitchArrayOutputWithContext(context.Context) SwitchArrayOutput
}

type SwitchArray []SwitchInput

func (SwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Switch)(nil)).Elem()
}

func (i SwitchArray) ToSwitchArrayOutput() SwitchArrayOutput {
	return i.ToSwitchArrayOutputWithContext(context.Background())
}

func (i SwitchArray) ToSwitchArrayOutputWithContext(ctx context.Context) SwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchArrayOutput)
}

// SwitchMapInput is an input type that accepts SwitchMap and SwitchMapOutput values.
// You can construct a concrete instance of `SwitchMapInput` via:
//
//          SwitchMap{ "key": SwitchArgs{...} }
type SwitchMapInput interface {
	pulumi.Input

	ToSwitchMapOutput() SwitchMapOutput
	ToSwitchMapOutputWithContext(context.Context) SwitchMapOutput
}

type SwitchMap map[string]SwitchInput

func (SwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Switch)(nil)).Elem()
}

func (i SwitchMap) ToSwitchMapOutput() SwitchMapOutput {
	return i.ToSwitchMapOutputWithContext(context.Background())
}

func (i SwitchMap) ToSwitchMapOutputWithContext(ctx context.Context) SwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchMapOutput)
}

type SwitchOutput struct{ *pulumi.OutputState }

func (SwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Switch)(nil))
}

func (o SwitchOutput) ToSwitchOutput() SwitchOutput {
	return o
}

func (o SwitchOutput) ToSwitchOutputWithContext(ctx context.Context) SwitchOutput {
	return o
}

func (o SwitchOutput) ToSwitchPtrOutput() SwitchPtrOutput {
	return o.ToSwitchPtrOutputWithContext(context.Background())
}

func (o SwitchOutput) ToSwitchPtrOutputWithContext(ctx context.Context) SwitchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Switch) *Switch {
		return &v
	}).(SwitchPtrOutput)
}

type SwitchPtrOutput struct{ *pulumi.OutputState }

func (SwitchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Switch)(nil))
}

func (o SwitchPtrOutput) ToSwitchPtrOutput() SwitchPtrOutput {
	return o
}

func (o SwitchPtrOutput) ToSwitchPtrOutputWithContext(ctx context.Context) SwitchPtrOutput {
	return o
}

func (o SwitchPtrOutput) Elem() SwitchOutput {
	return o.ApplyT(func(v *Switch) Switch {
		if v != nil {
			return *v
		}
		var ret Switch
		return ret
	}).(SwitchOutput)
}

type SwitchArrayOutput struct{ *pulumi.OutputState }

func (SwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Switch)(nil))
}

func (o SwitchArrayOutput) ToSwitchArrayOutput() SwitchArrayOutput {
	return o
}

func (o SwitchArrayOutput) ToSwitchArrayOutputWithContext(ctx context.Context) SwitchArrayOutput {
	return o
}

func (o SwitchArrayOutput) Index(i pulumi.IntInput) SwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Switch {
		return vs[0].([]Switch)[vs[1].(int)]
	}).(SwitchOutput)
}

type SwitchMapOutput struct{ *pulumi.OutputState }

func (SwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Switch)(nil))
}

func (o SwitchMapOutput) ToSwitchMapOutput() SwitchMapOutput {
	return o
}

func (o SwitchMapOutput) ToSwitchMapOutputWithContext(ctx context.Context) SwitchMapOutput {
	return o
}

func (o SwitchMapOutput) MapIndex(k pulumi.StringInput) SwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Switch {
		return vs[0].(map[string]Switch)[vs[1].(string)]
	}).(SwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchInput)(nil)).Elem(), &Switch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchPtrInput)(nil)).Elem(), &Switch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchArrayInput)(nil)).Elem(), SwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchMapInput)(nil)).Elem(), SwitchMap{})
	pulumi.RegisterOutputType(SwitchOutput{})
	pulumi.RegisterOutputType(SwitchPtrOutput{})
	pulumi.RegisterOutputType(SwitchArrayOutput{})
	pulumi.RegisterOutputType(SwitchMapOutput{})
}
