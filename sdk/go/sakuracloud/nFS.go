// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud NFS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foobarSwitch, err := sakuracloud.NewSwitch(ctx, "foobarSwitch", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewNFS(ctx, "foobarNFS", &sakuracloud.NFSArgs{
// 			Plan: pulumi.String("ssd"),
// 			Size: pulumi.Int(500),
// 			NetworkInterface: &sakuracloud.NFSNetworkInterfaceArgs{
// 				SwitchId:  foobarSwitch.ID(),
// 				IpAddress: pulumi.String("192.168.11.101"),
// 				Netmask:   pulumi.Int(24),
// 				Gateway:   pulumi.String("192.168.11.1"),
// 			},
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type NFS struct {
	pulumi.CustomResourceState

	// The description of the NFS. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The icon id to attach to the NFS.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the NFS. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// An `networkInterface` block as defined below.
	NetworkInterface NFSNetworkInterfaceOutput `pulumi:"networkInterface"`
	// The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// Any tags to assign to the NFS.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewNFS registers a new resource with the given unique name, arguments, and options.
func NewNFS(ctx *pulumi.Context,
	name string, args *NFSArgs, opts ...pulumi.ResourceOption) (*NFS, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterface == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterface'")
	}
	var resource NFS
	err := ctx.RegisterResource("sakuracloud:index/nFS:NFS", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNFS gets an existing NFS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNFS(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NFSState, opts ...pulumi.ResourceOption) (*NFS, error) {
	var resource NFS
	err := ctx.ReadResource("sakuracloud:index/nFS:NFS", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NFS resources.
type nfsState struct {
	// The description of the NFS. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the NFS.
	IconId *string `pulumi:"iconId"`
	// The name of the NFS. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// An `networkInterface` block as defined below.
	NetworkInterface *NFSNetworkInterface `pulumi:"networkInterface"`
	// The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.
	Plan *string `pulumi:"plan"`
	// The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.
	Size *int `pulumi:"size"`
	// Any tags to assign to the NFS.
	Tags []string `pulumi:"tags"`
	// The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type NFSState struct {
	// The description of the NFS. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the NFS.
	IconId pulumi.StringPtrInput
	// The name of the NFS. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// An `networkInterface` block as defined below.
	NetworkInterface NFSNetworkInterfacePtrInput
	// The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.
	Plan pulumi.StringPtrInput
	// The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.
	Size pulumi.IntPtrInput
	// Any tags to assign to the NFS.
	Tags pulumi.StringArrayInput
	// The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (NFSState) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsState)(nil)).Elem()
}

type nfsArgs struct {
	// The description of the NFS. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the NFS.
	IconId *string `pulumi:"iconId"`
	// The name of the NFS. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// An `networkInterface` block as defined below.
	NetworkInterface NFSNetworkInterface `pulumi:"networkInterface"`
	// The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.
	Plan *string `pulumi:"plan"`
	// The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.
	Size *int `pulumi:"size"`
	// Any tags to assign to the NFS.
	Tags []string `pulumi:"tags"`
	// The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a NFS resource.
type NFSArgs struct {
	// The description of the NFS. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the NFS.
	IconId pulumi.StringPtrInput
	// The name of the NFS. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// An `networkInterface` block as defined below.
	NetworkInterface NFSNetworkInterfaceInput
	// The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.
	Plan pulumi.StringPtrInput
	// The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.
	Size pulumi.IntPtrInput
	// Any tags to assign to the NFS.
	Tags pulumi.StringArrayInput
	// The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (NFSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nfsArgs)(nil)).Elem()
}

type NFSInput interface {
	pulumi.Input

	ToNFSOutput() NFSOutput
	ToNFSOutputWithContext(ctx context.Context) NFSOutput
}

func (*NFS) ElementType() reflect.Type {
	return reflect.TypeOf((*NFS)(nil))
}

func (i *NFS) ToNFSOutput() NFSOutput {
	return i.ToNFSOutputWithContext(context.Background())
}

func (i *NFS) ToNFSOutputWithContext(ctx context.Context) NFSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSOutput)
}

func (i *NFS) ToNFSPtrOutput() NFSPtrOutput {
	return i.ToNFSPtrOutputWithContext(context.Background())
}

func (i *NFS) ToNFSPtrOutputWithContext(ctx context.Context) NFSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSPtrOutput)
}

type NFSPtrInput interface {
	pulumi.Input

	ToNFSPtrOutput() NFSPtrOutput
	ToNFSPtrOutputWithContext(ctx context.Context) NFSPtrOutput
}

type nfsPtrType NFSArgs

func (*nfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NFS)(nil))
}

func (i *nfsPtrType) ToNFSPtrOutput() NFSPtrOutput {
	return i.ToNFSPtrOutputWithContext(context.Background())
}

func (i *nfsPtrType) ToNFSPtrOutputWithContext(ctx context.Context) NFSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSPtrOutput)
}

// NFSArrayInput is an input type that accepts NFSArray and NFSArrayOutput values.
// You can construct a concrete instance of `NFSArrayInput` via:
//
//          NFSArray{ NFSArgs{...} }
type NFSArrayInput interface {
	pulumi.Input

	ToNFSArrayOutput() NFSArrayOutput
	ToNFSArrayOutputWithContext(context.Context) NFSArrayOutput
}

type NFSArray []NFSInput

func (NFSArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*NFS)(nil))
}

func (i NFSArray) ToNFSArrayOutput() NFSArrayOutput {
	return i.ToNFSArrayOutputWithContext(context.Background())
}

func (i NFSArray) ToNFSArrayOutputWithContext(ctx context.Context) NFSArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSArrayOutput)
}

// NFSMapInput is an input type that accepts NFSMap and NFSMapOutput values.
// You can construct a concrete instance of `NFSMapInput` via:
//
//          NFSMap{ "key": NFSArgs{...} }
type NFSMapInput interface {
	pulumi.Input

	ToNFSMapOutput() NFSMapOutput
	ToNFSMapOutputWithContext(context.Context) NFSMapOutput
}

type NFSMap map[string]NFSInput

func (NFSMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*NFS)(nil))
}

func (i NFSMap) ToNFSMapOutput() NFSMapOutput {
	return i.ToNFSMapOutputWithContext(context.Background())
}

func (i NFSMap) ToNFSMapOutputWithContext(ctx context.Context) NFSMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NFSMapOutput)
}

type NFSOutput struct {
	*pulumi.OutputState
}

func (NFSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NFS)(nil))
}

func (o NFSOutput) ToNFSOutput() NFSOutput {
	return o
}

func (o NFSOutput) ToNFSOutputWithContext(ctx context.Context) NFSOutput {
	return o
}

func (o NFSOutput) ToNFSPtrOutput() NFSPtrOutput {
	return o.ToNFSPtrOutputWithContext(context.Background())
}

func (o NFSOutput) ToNFSPtrOutputWithContext(ctx context.Context) NFSPtrOutput {
	return o.ApplyT(func(v NFS) *NFS {
		return &v
	}).(NFSPtrOutput)
}

type NFSPtrOutput struct {
	*pulumi.OutputState
}

func (NFSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NFS)(nil))
}

func (o NFSPtrOutput) ToNFSPtrOutput() NFSPtrOutput {
	return o
}

func (o NFSPtrOutput) ToNFSPtrOutputWithContext(ctx context.Context) NFSPtrOutput {
	return o
}

type NFSArrayOutput struct{ *pulumi.OutputState }

func (NFSArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NFS)(nil))
}

func (o NFSArrayOutput) ToNFSArrayOutput() NFSArrayOutput {
	return o
}

func (o NFSArrayOutput) ToNFSArrayOutputWithContext(ctx context.Context) NFSArrayOutput {
	return o
}

func (o NFSArrayOutput) Index(i pulumi.IntInput) NFSOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NFS {
		return vs[0].([]NFS)[vs[1].(int)]
	}).(NFSOutput)
}

type NFSMapOutput struct{ *pulumi.OutputState }

func (NFSMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NFS)(nil))
}

func (o NFSMapOutput) ToNFSMapOutput() NFSMapOutput {
	return o
}

func (o NFSMapOutput) ToNFSMapOutputWithContext(ctx context.Context) NFSMapOutput {
	return o
}

func (o NFSMapOutput) MapIndex(k pulumi.StringInput) NFSOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NFS {
		return vs[0].(map[string]NFS)[vs[1].(string)]
	}).(NFSOutput)
}

func init() {
	pulumi.RegisterOutputType(NFSOutput{})
	pulumi.RegisterOutputType(NFSPtrOutput{})
	pulumi.RegisterOutputType(NFSArrayOutput{})
	pulumi.RegisterOutputType(NFSMapOutput{})
}
