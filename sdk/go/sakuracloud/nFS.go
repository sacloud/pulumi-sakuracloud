// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud NFS Appliance resource. This can be used to create, update, and delete NFS Appliances.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/nfs.html.markdown.
type NFS struct {
	s *pulumi.ResourceState
}

// NewNFS registers a new resource with the given unique name, arguments, and options.
func NewNFS(ctx *pulumi.Context,
	name string, args *NFSArgs, opts ...pulumi.ResourceOpt) (*NFS, error) {
	if args == nil || args.Ipaddress == nil {
		return nil, errors.New("missing required argument 'Ipaddress'")
	}
	if args == nil || args.NwMaskLen == nil {
		return nil, errors.New("missing required argument 'NwMaskLen'")
	}
	if args == nil || args.SwitchId == nil {
		return nil, errors.New("missing required argument 'SwitchId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["defaultRoute"] = nil
		inputs["description"] = nil
		inputs["gracefulShutdownTimeout"] = nil
		inputs["iconId"] = nil
		inputs["ipaddress"] = nil
		inputs["name"] = nil
		inputs["nwMaskLen"] = nil
		inputs["plan"] = nil
		inputs["size"] = nil
		inputs["switchId"] = nil
		inputs["tags"] = nil
		inputs["zone"] = nil
	} else {
		inputs["defaultRoute"] = args.DefaultRoute
		inputs["description"] = args.Description
		inputs["gracefulShutdownTimeout"] = args.GracefulShutdownTimeout
		inputs["iconId"] = args.IconId
		inputs["ipaddress"] = args.Ipaddress
		inputs["name"] = args.Name
		inputs["nwMaskLen"] = args.NwMaskLen
		inputs["plan"] = args.Plan
		inputs["size"] = args.Size
		inputs["switchId"] = args.SwitchId
		inputs["tags"] = args.Tags
		inputs["zone"] = args.Zone
	}
	s, err := ctx.RegisterResource("sakuracloud:index/nFS:NFS", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NFS{s: s}, nil
}

// GetNFS gets an existing NFS resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNFS(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NFSState, opts ...pulumi.ResourceOpt) (*NFS, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["defaultRoute"] = state.DefaultRoute
		inputs["description"] = state.Description
		inputs["gracefulShutdownTimeout"] = state.GracefulShutdownTimeout
		inputs["iconId"] = state.IconId
		inputs["ipaddress"] = state.Ipaddress
		inputs["name"] = state.Name
		inputs["nwMaskLen"] = state.NwMaskLen
		inputs["plan"] = state.Plan
		inputs["size"] = state.Size
		inputs["switchId"] = state.SwitchId
		inputs["tags"] = state.Tags
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/nFS:NFS", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &NFS{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *NFS) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *NFS) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The default route IP address of the NFS Appliance.
func (r *NFS) DefaultRoute() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultRoute"])
}

// The description of the resource.
func (r *NFS) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The wait time (seconds) to do graceful shutdown the NFS Appliance.
func (r *NFS) GracefulShutdownTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["gracefulShutdownTimeout"])
}

// The ID of the icon.
func (r *NFS) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The IP address of the NFS Appliance.
func (r *NFS) Ipaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress"])
}

// The name of the resource.
func (r *NFS) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The network mask length of the NFS Appliance.
func (r *NFS) NwMaskLen() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["nwMaskLen"])
}

// The plan of the NFS Appliance 
// Valid value is one of the following: [ hdd (default) / ssd ]
func (r *NFS) Plan() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["plan"])
}

// The size of the NFS Appliance (unit:`GB`).  
// Valid value is one of the following: [ 100 (default) / 500 / 1024 / 2048 / 4096 / 8192(hdd only) / 12288(hdd only) ]
func (r *NFS) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// The ID of the switch connected to the NFS Appliance.
func (r *NFS) SwitchId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["switchId"])
}

// The tag list of the resources.
func (r *NFS) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The ID of the zone to which the resource belongs.
func (r *NFS) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering NFS resources.
type NFSState struct {
	// The default route IP address of the NFS Appliance.
	DefaultRoute interface{}
	// The description of the resource.
	Description interface{}
	// The wait time (seconds) to do graceful shutdown the NFS Appliance.
	GracefulShutdownTimeout interface{}
	// The ID of the icon.
	IconId interface{}
	// The IP address of the NFS Appliance.
	Ipaddress interface{}
	// The name of the resource.
	Name interface{}
	// The network mask length of the NFS Appliance.
	NwMaskLen interface{}
	// The plan of the NFS Appliance 
	// Valid value is one of the following: [ hdd (default) / ssd ]
	Plan interface{}
	// The size of the NFS Appliance (unit:`GB`).  
	// Valid value is one of the following: [ 100 (default) / 500 / 1024 / 2048 / 4096 / 8192(hdd only) / 12288(hdd only) ]
	Size interface{}
	// The ID of the switch connected to the NFS Appliance.
	SwitchId interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a NFS resource.
type NFSArgs struct {
	// The default route IP address of the NFS Appliance.
	DefaultRoute interface{}
	// The description of the resource.
	Description interface{}
	// The wait time (seconds) to do graceful shutdown the NFS Appliance.
	GracefulShutdownTimeout interface{}
	// The ID of the icon.
	IconId interface{}
	// The IP address of the NFS Appliance.
	Ipaddress interface{}
	// The name of the resource.
	Name interface{}
	// The network mask length of the NFS Appliance.
	NwMaskLen interface{}
	// The plan of the NFS Appliance 
	// Valid value is one of the following: [ hdd (default) / ssd ]
	Plan interface{}
	// The size of the NFS Appliance (unit:`GB`).  
	// Valid value is one of the following: [ 100 (default) / 500 / 1024 / 2048 / 4096 / 8192(hdd only) / 12288(hdd only) ]
	Size interface{}
	// The ID of the switch connected to the NFS Appliance.
	SwitchId interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
