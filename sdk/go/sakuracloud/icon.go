// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Icon resource. This can be used to create, update, and delete Icons.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/icon.html.markdown.
type Icon struct {
	s *pulumi.ResourceState
}

// NewIcon registers a new resource with the given unique name, arguments, and options.
func NewIcon(ctx *pulumi.Context,
	name string, args *IconArgs, opts ...pulumi.ResourceOpt) (*Icon, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["base64content"] = nil
		inputs["name"] = nil
		inputs["source"] = nil
		inputs["tags"] = nil
	} else {
		inputs["base64content"] = args.Base64content
		inputs["name"] = args.Name
		inputs["source"] = args.Source
		inputs["tags"] = args.Tags
	}
	inputs["body"] = nil
	inputs["url"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/icon:Icon", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Icon{s: s}, nil
}

// GetIcon gets an existing Icon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIcon(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IconState, opts ...pulumi.ResourceOpt) (*Icon, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["base64content"] = state.Base64content
		inputs["body"] = state.Body
		inputs["name"] = state.Name
		inputs["source"] = state.Source
		inputs["tags"] = state.Tags
		inputs["url"] = state.Url
	}
	s, err := ctx.ReadResource("sakuracloud:index/icon:Icon", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Icon{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Icon) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Icon) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The base64 encoded body of source content.
func (r *Icon) Base64content() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["base64content"])
}

// Base64 encoded icon data (size:`small`).
func (r *Icon) Body() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["body"])
}

// The name of the resource.
func (r *Icon) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The path of source content file.
func (r *Icon) Source() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["source"])
}

// The tag list of the resources.
func (r *Icon) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// URL to access this resource.
func (r *Icon) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// Input properties used for looking up and filtering Icon resources.
type IconState struct {
	// The base64 encoded body of source content.
	Base64content interface{}
	// Base64 encoded icon data (size:`small`).
	Body interface{}
	// The name of the resource.
	Name interface{}
	// The path of source content file.
	Source interface{}
	// The tag list of the resources.
	Tags interface{}
	// URL to access this resource.
	Url interface{}
}

// The set of arguments for constructing a Icon resource.
type IconArgs struct {
	// The base64 encoded body of source content.
	Base64content interface{}
	// The name of the resource.
	Name interface{}
	// The path of source content file.
	Source interface{}
	// The tag list of the resources.
	Tags interface{}
}
