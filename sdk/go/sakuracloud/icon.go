// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud Icon.
type Icon struct {
	pulumi.CustomResourceState

	// The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.
	Base64content pulumi.StringPtrOutput `pulumi:"base64content"`
	// The name of the Icon. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.
	Source pulumi.StringPtrOutput `pulumi:"source"`
	// Any tags to assign to the Icon.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The URL for getting the icon's raw data.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewIcon registers a new resource with the given unique name, arguments, and options.
func NewIcon(ctx *pulumi.Context,
	name string, args *IconArgs, opts ...pulumi.ResourceOption) (*Icon, error) {
	if args == nil {
		args = &IconArgs{}
	}

	var resource Icon
	err := ctx.RegisterResource("sakuracloud:index/icon:Icon", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIcon gets an existing Icon resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIcon(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IconState, opts ...pulumi.ResourceOption) (*Icon, error) {
	var resource Icon
	err := ctx.ReadResource("sakuracloud:index/icon:Icon", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Icon resources.
type iconState struct {
	// The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.
	Base64content *string `pulumi:"base64content"`
	// The name of the Icon. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.
	Source *string `pulumi:"source"`
	// Any tags to assign to the Icon.
	Tags []string `pulumi:"tags"`
	// The URL for getting the icon's raw data.
	Url *string `pulumi:"url"`
}

type IconState struct {
	// The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.
	Base64content pulumi.StringPtrInput
	// The name of the Icon. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.
	Source pulumi.StringPtrInput
	// Any tags to assign to the Icon.
	Tags pulumi.StringArrayInput
	// The URL for getting the icon's raw data.
	Url pulumi.StringPtrInput
}

func (IconState) ElementType() reflect.Type {
	return reflect.TypeOf((*iconState)(nil)).Elem()
}

type iconArgs struct {
	// The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.
	Base64content *string `pulumi:"base64content"`
	// The name of the Icon. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.
	Source *string `pulumi:"source"`
	// Any tags to assign to the Icon.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Icon resource.
type IconArgs struct {
	// The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.
	Base64content pulumi.StringPtrInput
	// The name of the Icon. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.
	Source pulumi.StringPtrInput
	// Any tags to assign to the Icon.
	Tags pulumi.StringArrayInput
}

func (IconArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iconArgs)(nil)).Elem()
}

type IconInput interface {
	pulumi.Input

	ToIconOutput() IconOutput
	ToIconOutputWithContext(ctx context.Context) IconOutput
}

func (*Icon) ElementType() reflect.Type {
	return reflect.TypeOf((*Icon)(nil))
}

func (i *Icon) ToIconOutput() IconOutput {
	return i.ToIconOutputWithContext(context.Background())
}

func (i *Icon) ToIconOutputWithContext(ctx context.Context) IconOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconOutput)
}

func (i *Icon) ToIconPtrOutput() IconPtrOutput {
	return i.ToIconPtrOutputWithContext(context.Background())
}

func (i *Icon) ToIconPtrOutputWithContext(ctx context.Context) IconPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconPtrOutput)
}

type IconPtrInput interface {
	pulumi.Input

	ToIconPtrOutput() IconPtrOutput
	ToIconPtrOutputWithContext(ctx context.Context) IconPtrOutput
}

type iconPtrType IconArgs

func (*iconPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Icon)(nil))
}

func (i *iconPtrType) ToIconPtrOutput() IconPtrOutput {
	return i.ToIconPtrOutputWithContext(context.Background())
}

func (i *iconPtrType) ToIconPtrOutputWithContext(ctx context.Context) IconPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconPtrOutput)
}

// IconArrayInput is an input type that accepts IconArray and IconArrayOutput values.
// You can construct a concrete instance of `IconArrayInput` via:
//
//          IconArray{ IconArgs{...} }
type IconArrayInput interface {
	pulumi.Input

	ToIconArrayOutput() IconArrayOutput
	ToIconArrayOutputWithContext(context.Context) IconArrayOutput
}

type IconArray []IconInput

func (IconArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Icon)(nil))
}

func (i IconArray) ToIconArrayOutput() IconArrayOutput {
	return i.ToIconArrayOutputWithContext(context.Background())
}

func (i IconArray) ToIconArrayOutputWithContext(ctx context.Context) IconArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconArrayOutput)
}

// IconMapInput is an input type that accepts IconMap and IconMapOutput values.
// You can construct a concrete instance of `IconMapInput` via:
//
//          IconMap{ "key": IconArgs{...} }
type IconMapInput interface {
	pulumi.Input

	ToIconMapOutput() IconMapOutput
	ToIconMapOutputWithContext(context.Context) IconMapOutput
}

type IconMap map[string]IconInput

func (IconMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Icon)(nil))
}

func (i IconMap) ToIconMapOutput() IconMapOutput {
	return i.ToIconMapOutputWithContext(context.Background())
}

func (i IconMap) ToIconMapOutputWithContext(ctx context.Context) IconMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconMapOutput)
}

type IconOutput struct {
	*pulumi.OutputState
}

func (IconOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Icon)(nil))
}

func (o IconOutput) ToIconOutput() IconOutput {
	return o
}

func (o IconOutput) ToIconOutputWithContext(ctx context.Context) IconOutput {
	return o
}

func (o IconOutput) ToIconPtrOutput() IconPtrOutput {
	return o.ToIconPtrOutputWithContext(context.Background())
}

func (o IconOutput) ToIconPtrOutputWithContext(ctx context.Context) IconPtrOutput {
	return o.ApplyT(func(v Icon) *Icon {
		return &v
	}).(IconPtrOutput)
}

type IconPtrOutput struct {
	*pulumi.OutputState
}

func (IconPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Icon)(nil))
}

func (o IconPtrOutput) ToIconPtrOutput() IconPtrOutput {
	return o
}

func (o IconPtrOutput) ToIconPtrOutputWithContext(ctx context.Context) IconPtrOutput {
	return o
}

type IconArrayOutput struct{ *pulumi.OutputState }

func (IconArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Icon)(nil))
}

func (o IconArrayOutput) ToIconArrayOutput() IconArrayOutput {
	return o
}

func (o IconArrayOutput) ToIconArrayOutputWithContext(ctx context.Context) IconArrayOutput {
	return o
}

func (o IconArrayOutput) Index(i pulumi.IntInput) IconOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Icon {
		return vs[0].([]Icon)[vs[1].(int)]
	}).(IconOutput)
}

type IconMapOutput struct{ *pulumi.OutputState }

func (IconMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Icon)(nil))
}

func (o IconMapOutput) ToIconMapOutput() IconMapOutput {
	return o
}

func (o IconMapOutput) ToIconMapOutputWithContext(ctx context.Context) IconMapOutput {
	return o
}

func (o IconMapOutput) MapIndex(k pulumi.StringInput) IconOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Icon {
		return vs[0].(map[string]Icon)[vs[1].(string)]
	}).(IconOutput)
}

func init() {
	pulumi.RegisterOutputType(IconOutput{})
	pulumi.RegisterOutputType(IconPtrOutput{})
	pulumi.RegisterOutputType(IconArrayOutput{})
	pulumi.RegisterOutputType(IconMapOutput{})
}
