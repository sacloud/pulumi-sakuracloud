// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud IPv4 PTR.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		server, err := sakuracloud.NewServer(ctx, "server", &sakuracloud.ServerArgs{
// 			NetworkInterfaces: sakuracloud.ServerNetworkInterfaceArray{
// 				&sakuracloud.ServerNetworkInterfaceArgs{
// 					Upstream: pulumi.String("shared"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewIPv4Ptr(ctx, "foobar", &sakuracloud.IPv4PtrArgs{
// 			IpAddress:     server.IpAddress,
// 			Hostname:      pulumi.String("www.example.com"),
// 			RetryMax:      pulumi.Int(30),
// 			RetryInterval: pulumi.Int(10),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IPv4Ptr struct {
	pulumi.CustomResourceState

	// The value of the PTR record. This must be FQDN.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The IP address to which the PTR record is set.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.
	RetryInterval pulumi.IntPtrOutput `pulumi:"retryInterval"`
	// The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.
	RetryMax pulumi.IntPtrOutput `pulumi:"retryMax"`
	// The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewIPv4Ptr registers a new resource with the given unique name, arguments, and options.
func NewIPv4Ptr(ctx *pulumi.Context,
	name string, args *IPv4PtrArgs, opts ...pulumi.ResourceOption) (*IPv4Ptr, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	var resource IPv4Ptr
	err := ctx.RegisterResource("sakuracloud:index/iPv4Ptr:IPv4Ptr", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIPv4Ptr gets an existing IPv4Ptr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPv4Ptr(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IPv4PtrState, opts ...pulumi.ResourceOption) (*IPv4Ptr, error) {
	var resource IPv4Ptr
	err := ctx.ReadResource("sakuracloud:index/iPv4Ptr:IPv4Ptr", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IPv4Ptr resources.
type ipv4PtrState struct {
	// The value of the PTR record. This must be FQDN.
	Hostname *string `pulumi:"hostname"`
	// The IP address to which the PTR record is set.
	IpAddress *string `pulumi:"ipAddress"`
	// The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.
	RetryInterval *int `pulumi:"retryInterval"`
	// The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.
	RetryMax *int `pulumi:"retryMax"`
	// The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type IPv4PtrState struct {
	// The value of the PTR record. This must be FQDN.
	Hostname pulumi.StringPtrInput
	// The IP address to which the PTR record is set.
	IpAddress pulumi.StringPtrInput
	// The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.
	RetryInterval pulumi.IntPtrInput
	// The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.
	RetryMax pulumi.IntPtrInput
	// The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (IPv4PtrState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4PtrState)(nil)).Elem()
}

type ipv4PtrArgs struct {
	// The value of the PTR record. This must be FQDN.
	Hostname string `pulumi:"hostname"`
	// The IP address to which the PTR record is set.
	IpAddress string `pulumi:"ipAddress"`
	// The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.
	RetryInterval *int `pulumi:"retryInterval"`
	// The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.
	RetryMax *int `pulumi:"retryMax"`
	// The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a IPv4Ptr resource.
type IPv4PtrArgs struct {
	// The value of the PTR record. This must be FQDN.
	Hostname pulumi.StringInput
	// The IP address to which the PTR record is set.
	IpAddress pulumi.StringInput
	// The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.
	RetryInterval pulumi.IntPtrInput
	// The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.
	RetryMax pulumi.IntPtrInput
	// The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (IPv4PtrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv4PtrArgs)(nil)).Elem()
}

type IPv4PtrInput interface {
	pulumi.Input

	ToIPv4PtrOutput() IPv4PtrOutput
	ToIPv4PtrOutputWithContext(ctx context.Context) IPv4PtrOutput
}

func (*IPv4Ptr) ElementType() reflect.Type {
	return reflect.TypeOf((*IPv4Ptr)(nil))
}

func (i *IPv4Ptr) ToIPv4PtrOutput() IPv4PtrOutput {
	return i.ToIPv4PtrOutputWithContext(context.Background())
}

func (i *IPv4Ptr) ToIPv4PtrOutputWithContext(ctx context.Context) IPv4PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPv4PtrOutput)
}

func (i *IPv4Ptr) ToIPv4PtrPtrOutput() IPv4PtrPtrOutput {
	return i.ToIPv4PtrPtrOutputWithContext(context.Background())
}

func (i *IPv4Ptr) ToIPv4PtrPtrOutputWithContext(ctx context.Context) IPv4PtrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPv4PtrPtrOutput)
}

type IPv4PtrPtrInput interface {
	pulumi.Input

	ToIPv4PtrPtrOutput() IPv4PtrPtrOutput
	ToIPv4PtrPtrOutputWithContext(ctx context.Context) IPv4PtrPtrOutput
}

type ipv4PtrPtrType IPv4PtrArgs

func (*ipv4PtrPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IPv4Ptr)(nil))
}

func (i *ipv4PtrPtrType) ToIPv4PtrPtrOutput() IPv4PtrPtrOutput {
	return i.ToIPv4PtrPtrOutputWithContext(context.Background())
}

func (i *ipv4PtrPtrType) ToIPv4PtrPtrOutputWithContext(ctx context.Context) IPv4PtrPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPv4PtrPtrOutput)
}

// IPv4PtrArrayInput is an input type that accepts IPv4PtrArray and IPv4PtrArrayOutput values.
// You can construct a concrete instance of `IPv4PtrArrayInput` via:
//
//          IPv4PtrArray{ IPv4PtrArgs{...} }
type IPv4PtrArrayInput interface {
	pulumi.Input

	ToIPv4PtrArrayOutput() IPv4PtrArrayOutput
	ToIPv4PtrArrayOutputWithContext(context.Context) IPv4PtrArrayOutput
}

type IPv4PtrArray []IPv4PtrInput

func (IPv4PtrArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IPv4Ptr)(nil))
}

func (i IPv4PtrArray) ToIPv4PtrArrayOutput() IPv4PtrArrayOutput {
	return i.ToIPv4PtrArrayOutputWithContext(context.Background())
}

func (i IPv4PtrArray) ToIPv4PtrArrayOutputWithContext(ctx context.Context) IPv4PtrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPv4PtrArrayOutput)
}

// IPv4PtrMapInput is an input type that accepts IPv4PtrMap and IPv4PtrMapOutput values.
// You can construct a concrete instance of `IPv4PtrMapInput` via:
//
//          IPv4PtrMap{ "key": IPv4PtrArgs{...} }
type IPv4PtrMapInput interface {
	pulumi.Input

	ToIPv4PtrMapOutput() IPv4PtrMapOutput
	ToIPv4PtrMapOutputWithContext(context.Context) IPv4PtrMapOutput
}

type IPv4PtrMap map[string]IPv4PtrInput

func (IPv4PtrMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IPv4Ptr)(nil))
}

func (i IPv4PtrMap) ToIPv4PtrMapOutput() IPv4PtrMapOutput {
	return i.ToIPv4PtrMapOutputWithContext(context.Background())
}

func (i IPv4PtrMap) ToIPv4PtrMapOutputWithContext(ctx context.Context) IPv4PtrMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPv4PtrMapOutput)
}

type IPv4PtrOutput struct {
	*pulumi.OutputState
}

func (IPv4PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPv4Ptr)(nil))
}

func (o IPv4PtrOutput) ToIPv4PtrOutput() IPv4PtrOutput {
	return o
}

func (o IPv4PtrOutput) ToIPv4PtrOutputWithContext(ctx context.Context) IPv4PtrOutput {
	return o
}

func (o IPv4PtrOutput) ToIPv4PtrPtrOutput() IPv4PtrPtrOutput {
	return o.ToIPv4PtrPtrOutputWithContext(context.Background())
}

func (o IPv4PtrOutput) ToIPv4PtrPtrOutputWithContext(ctx context.Context) IPv4PtrPtrOutput {
	return o.ApplyT(func(v IPv4Ptr) *IPv4Ptr {
		return &v
	}).(IPv4PtrPtrOutput)
}

type IPv4PtrPtrOutput struct {
	*pulumi.OutputState
}

func (IPv4PtrPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IPv4Ptr)(nil))
}

func (o IPv4PtrPtrOutput) ToIPv4PtrPtrOutput() IPv4PtrPtrOutput {
	return o
}

func (o IPv4PtrPtrOutput) ToIPv4PtrPtrOutputWithContext(ctx context.Context) IPv4PtrPtrOutput {
	return o
}

type IPv4PtrArrayOutput struct{ *pulumi.OutputState }

func (IPv4PtrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPv4Ptr)(nil))
}

func (o IPv4PtrArrayOutput) ToIPv4PtrArrayOutput() IPv4PtrArrayOutput {
	return o
}

func (o IPv4PtrArrayOutput) ToIPv4PtrArrayOutputWithContext(ctx context.Context) IPv4PtrArrayOutput {
	return o
}

func (o IPv4PtrArrayOutput) Index(i pulumi.IntInput) IPv4PtrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPv4Ptr {
		return vs[0].([]IPv4Ptr)[vs[1].(int)]
	}).(IPv4PtrOutput)
}

type IPv4PtrMapOutput struct{ *pulumi.OutputState }

func (IPv4PtrMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IPv4Ptr)(nil))
}

func (o IPv4PtrMapOutput) ToIPv4PtrMapOutput() IPv4PtrMapOutput {
	return o
}

func (o IPv4PtrMapOutput) ToIPv4PtrMapOutputWithContext(ctx context.Context) IPv4PtrMapOutput {
	return o
}

func (o IPv4PtrMapOutput) MapIndex(k pulumi.StringInput) IPv4PtrOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IPv4Ptr {
		return vs[0].(map[string]IPv4Ptr)[vs[1].(string)]
	}).(IPv4PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(IPv4PtrOutput{})
	pulumi.RegisterOutputType(IPv4PtrPtrOutput{})
	pulumi.RegisterOutputType(IPv4PtrArrayOutput{})
	pulumi.RegisterOutputType(IPv4PtrMapOutput{})
}
