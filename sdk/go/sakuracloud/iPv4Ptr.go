// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud IPv4 PTR Record resource. This can be used to create, update, and delete IPv4 PTR records.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/ipv4_ptr.html.markdown.
type IPv4Ptr struct {
	s *pulumi.ResourceState
}

// NewIPv4Ptr registers a new resource with the given unique name, arguments, and options.
func NewIPv4Ptr(ctx *pulumi.Context,
	name string, args *IPv4PtrArgs, opts ...pulumi.ResourceOpt) (*IPv4Ptr, error) {
	if args == nil || args.Hostname == nil {
		return nil, errors.New("missing required argument 'Hostname'")
	}
	if args == nil || args.Ipaddress == nil {
		return nil, errors.New("missing required argument 'Ipaddress'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["hostname"] = nil
		inputs["ipaddress"] = nil
		inputs["retryInterval"] = nil
		inputs["retryMax"] = nil
		inputs["zone"] = nil
	} else {
		inputs["hostname"] = args.Hostname
		inputs["ipaddress"] = args.Ipaddress
		inputs["retryInterval"] = args.RetryInterval
		inputs["retryMax"] = args.RetryMax
		inputs["zone"] = args.Zone
	}
	s, err := ctx.RegisterResource("sakuracloud:index/iPv4Ptr:IPv4Ptr", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPv4Ptr{s: s}, nil
}

// GetIPv4Ptr gets an existing IPv4Ptr resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIPv4Ptr(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IPv4PtrState, opts ...pulumi.ResourceOpt) (*IPv4Ptr, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["hostname"] = state.Hostname
		inputs["ipaddress"] = state.Ipaddress
		inputs["retryInterval"] = state.RetryInterval
		inputs["retryMax"] = state.RetryMax
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/iPv4Ptr:IPv4Ptr", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IPv4Ptr{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IPv4Ptr) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IPv4Ptr) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The hostname of target.
func (r *IPv4Ptr) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

// The target IP address.
func (r *IPv4Ptr) Ipaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress"])
}

// Interval of API call retry (unit:`second`, default:`10`).
func (r *IPv4Ptr) RetryInterval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["retryInterval"])
}

// Max count of API call retry (default:`30`).
func (r *IPv4Ptr) RetryMax() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["retryMax"])
}

// The ID of the zone to which the resource belongs.
func (r *IPv4Ptr) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering IPv4Ptr resources.
type IPv4PtrState struct {
	// The hostname of target.
	Hostname interface{}
	// The target IP address.
	Ipaddress interface{}
	// Interval of API call retry (unit:`second`, default:`10`).
	RetryInterval interface{}
	// Max count of API call retry (default:`30`).
	RetryMax interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a IPv4Ptr resource.
type IPv4PtrArgs struct {
	// The hostname of target.
	Hostname interface{}
	// The target IP address.
	Ipaddress interface{}
	// Interval of API call retry (unit:`second`, default:`10`).
	RetryInterval interface{}
	// Max count of API call retry (default:`30`).
	RetryMax interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
