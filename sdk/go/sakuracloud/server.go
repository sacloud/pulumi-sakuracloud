// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foobarPacketFilter, err := sakuracloud.LookupPacketFilter(ctx, &GetPacketFilterArgs{
// 			Filter: GetPacketFilterFilter{
// 				Names: []string{
// 					"foobar",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt0 := "ubuntu2004"
// 		ubuntu, err := sakuracloud.LookupArchive(ctx, &GetArchiveArgs{
// 			OsType: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		foobarDisk, err := sakuracloud.NewDisk(ctx, "foobarDisk", &sakuracloud.DiskArgs{
// 			SourceArchiveId: pulumi.String(ubuntu.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewServer(ctx, "foobarServer", &sakuracloud.ServerArgs{
// 			Disks: pulumi.StringArray{
// 				foobarDisk.ID(),
// 			},
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 			NetworkInterfaces: ServerNetworkInterfaceArray{
// 				&ServerNetworkInterfaceArgs{
// 					Upstream:       pulumi.String("shared"),
// 					PacketFilterId: pulumi.String(foobarPacketFilter.Id),
// 				},
// 			},
// 			DiskEditParameter: &ServerDiskEditParameterArgs{
// 				Hostname:      pulumi.String("hostname"),
// 				Password:      pulumi.String("password"),
// 				DisablePwAuth: pulumi.Bool(true),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Server struct {
	pulumi.CustomResourceState

	// The id of the CD-ROM to attach to the Server.
	CdromId pulumi.StringPtrOutput `pulumi:"cdromId"`
	// The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.
	Commitment pulumi.StringPtrOutput `pulumi:"commitment"`
	// The number of virtual CPUs. Default:`1`.
	Core pulumi.IntPtrOutput `pulumi:"core"`
	// The description of the Server. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A `diskEditParameter` block as defined below. This parameter conflicts with [`userData`].
	DiskEditParameter ServerDiskEditParameterPtrOutput `pulumi:"diskEditParameter"`
	// A list of disk id connected to the server.
	Disks pulumi.StringArrayOutput `pulumi:"disks"`
	// A list of IP address of DNS server in the zone.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// The flag to use force shutdown when need to reboot/shutdown while applying.
	ForceShutdown pulumi.BoolPtrOutput `pulumi:"forceShutdown"`
	// The gateway address used by the Server.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The number of GPUs.
	Gpu pulumi.IntPtrOutput `pulumi:"gpu"`
	// The hostname of the Server. The length of this value must be in the range [`1`-`64`].
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The icon id to attach to the Server.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.
	InterfaceDriver pulumi.StringPtrOutput `pulumi:"interfaceDriver"`
	// The IP address to assign to the Server.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The size of memory in GiB. Default:`1`.
	Memory pulumi.IntPtrOutput `pulumi:"memory"`
	// The name of the Server. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The bit length of the subnet to assign to the Server.
	Netmask pulumi.IntOutput `pulumi:"netmask"`
	// The network address which the `ipAddress` belongs.
	NetworkAddress pulumi.StringOutput `pulumi:"networkAddress"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces ServerNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostId pulumi.StringPtrOutput `pulumi:"privateHostId"`
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostName pulumi.StringOutput `pulumi:"privateHostName"`
	// Any tags to assign to the Server.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// A string representing the user data used by cloud-init. This parameter conflicts with [`diskEditParameter`].
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		args = &ServerArgs{}
	}

	var resource Server
	err := ctx.RegisterResource("sakuracloud:index/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("sakuracloud:index/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// The id of the CD-ROM to attach to the Server.
	CdromId *string `pulumi:"cdromId"`
	// The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.
	Commitment *string `pulumi:"commitment"`
	// The number of virtual CPUs. Default:`1`.
	Core *int `pulumi:"core"`
	// The description of the Server. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// A `diskEditParameter` block as defined below. This parameter conflicts with [`userData`].
	DiskEditParameter *ServerDiskEditParameter `pulumi:"diskEditParameter"`
	// A list of disk id connected to the server.
	Disks []string `pulumi:"disks"`
	// A list of IP address of DNS server in the zone.
	DnsServers []string `pulumi:"dnsServers"`
	// The flag to use force shutdown when need to reboot/shutdown while applying.
	ForceShutdown *bool `pulumi:"forceShutdown"`
	// The gateway address used by the Server.
	Gateway *string `pulumi:"gateway"`
	// The number of GPUs.
	Gpu *int `pulumi:"gpu"`
	// The hostname of the Server. The length of this value must be in the range [`1`-`64`].
	Hostname *string `pulumi:"hostname"`
	// The icon id to attach to the Server.
	IconId *string `pulumi:"iconId"`
	// The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.
	InterfaceDriver *string `pulumi:"interfaceDriver"`
	// The IP address to assign to the Server.
	IpAddress *string `pulumi:"ipAddress"`
	// The size of memory in GiB. Default:`1`.
	Memory *int `pulumi:"memory"`
	// The name of the Server. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The bit length of the subnet to assign to the Server.
	Netmask *int `pulumi:"netmask"`
	// The network address which the `ipAddress` belongs.
	NetworkAddress *string `pulumi:"networkAddress"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []ServerNetworkInterface `pulumi:"networkInterfaces"`
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostId *string `pulumi:"privateHostId"`
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostName *string `pulumi:"privateHostName"`
	// Any tags to assign to the Server.
	Tags []string `pulumi:"tags"`
	// A string representing the user data used by cloud-init. This parameter conflicts with [`diskEditParameter`].
	UserData *string `pulumi:"userData"`
	// The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type ServerState struct {
	// The id of the CD-ROM to attach to the Server.
	CdromId pulumi.StringPtrInput
	// The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.
	Commitment pulumi.StringPtrInput
	// The number of virtual CPUs. Default:`1`.
	Core pulumi.IntPtrInput
	// The description of the Server. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// A `diskEditParameter` block as defined below. This parameter conflicts with [`userData`].
	DiskEditParameter ServerDiskEditParameterPtrInput
	// A list of disk id connected to the server.
	Disks pulumi.StringArrayInput
	// A list of IP address of DNS server in the zone.
	DnsServers pulumi.StringArrayInput
	// The flag to use force shutdown when need to reboot/shutdown while applying.
	ForceShutdown pulumi.BoolPtrInput
	// The gateway address used by the Server.
	Gateway pulumi.StringPtrInput
	// The number of GPUs.
	Gpu pulumi.IntPtrInput
	// The hostname of the Server. The length of this value must be in the range [`1`-`64`].
	Hostname pulumi.StringPtrInput
	// The icon id to attach to the Server.
	IconId pulumi.StringPtrInput
	// The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.
	InterfaceDriver pulumi.StringPtrInput
	// The IP address to assign to the Server.
	IpAddress pulumi.StringPtrInput
	// The size of memory in GiB. Default:`1`.
	Memory pulumi.IntPtrInput
	// The name of the Server. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The bit length of the subnet to assign to the Server.
	Netmask pulumi.IntPtrInput
	// The network address which the `ipAddress` belongs.
	NetworkAddress pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces ServerNetworkInterfaceArrayInput
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostId pulumi.StringPtrInput
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostName pulumi.StringPtrInput
	// Any tags to assign to the Server.
	Tags pulumi.StringArrayInput
	// A string representing the user data used by cloud-init. This parameter conflicts with [`diskEditParameter`].
	UserData pulumi.StringPtrInput
	// The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	// The id of the CD-ROM to attach to the Server.
	CdromId *string `pulumi:"cdromId"`
	// The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.
	Commitment *string `pulumi:"commitment"`
	// The number of virtual CPUs. Default:`1`.
	Core *int `pulumi:"core"`
	// The description of the Server. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// A `diskEditParameter` block as defined below. This parameter conflicts with [`userData`].
	DiskEditParameter *ServerDiskEditParameter `pulumi:"diskEditParameter"`
	// A list of disk id connected to the server.
	Disks []string `pulumi:"disks"`
	// The flag to use force shutdown when need to reboot/shutdown while applying.
	ForceShutdown *bool `pulumi:"forceShutdown"`
	// The number of GPUs.
	Gpu *int `pulumi:"gpu"`
	// The icon id to attach to the Server.
	IconId *string `pulumi:"iconId"`
	// The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.
	InterfaceDriver *string `pulumi:"interfaceDriver"`
	// The size of memory in GiB. Default:`1`.
	Memory *int `pulumi:"memory"`
	// The name of the Server. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces []ServerNetworkInterface `pulumi:"networkInterfaces"`
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostId *string `pulumi:"privateHostId"`
	// Any tags to assign to the Server.
	Tags []string `pulumi:"tags"`
	// A string representing the user data used by cloud-init. This parameter conflicts with [`diskEditParameter`].
	UserData *string `pulumi:"userData"`
	// The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The id of the CD-ROM to attach to the Server.
	CdromId pulumi.StringPtrInput
	// The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.
	Commitment pulumi.StringPtrInput
	// The number of virtual CPUs. Default:`1`.
	Core pulumi.IntPtrInput
	// The description of the Server. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// A `diskEditParameter` block as defined below. This parameter conflicts with [`userData`].
	DiskEditParameter ServerDiskEditParameterPtrInput
	// A list of disk id connected to the server.
	Disks pulumi.StringArrayInput
	// The flag to use force shutdown when need to reboot/shutdown while applying.
	ForceShutdown pulumi.BoolPtrInput
	// The number of GPUs.
	Gpu pulumi.IntPtrInput
	// The icon id to attach to the Server.
	IconId pulumi.StringPtrInput
	// The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.
	InterfaceDriver pulumi.StringPtrInput
	// The size of memory in GiB. Default:`1`.
	Memory pulumi.IntPtrInput
	// The name of the Server. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// One or more `networkInterface` blocks as defined below.
	NetworkInterfaces ServerNetworkInterfaceArrayInput
	// The id of the PrivateHost which the Server is assigned.
	PrivateHostId pulumi.StringPtrInput
	// Any tags to assign to the Server.
	Tags pulumi.StringArrayInput
	// A string representing the user data used by cloud-init. This parameter conflicts with [`diskEditParameter`].
	UserData pulumi.StringPtrInput
	// The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((*Server)(nil))
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

func (i *Server) ToServerPtrOutput() ServerPtrOutput {
	return i.ToServerPtrOutputWithContext(context.Background())
}

func (i *Server) ToServerPtrOutputWithContext(ctx context.Context) ServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPtrOutput)
}

type ServerPtrInput interface {
	pulumi.Input

	ToServerPtrOutput() ServerPtrOutput
	ToServerPtrOutputWithContext(ctx context.Context) ServerPtrOutput
}

type serverPtrType ServerArgs

func (*serverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil))
}

func (i *serverPtrType) ToServerPtrOutput() ServerPtrOutput {
	return i.ToServerPtrOutputWithContext(context.Background())
}

func (i *serverPtrType) ToServerPtrOutputWithContext(ctx context.Context) ServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPtrOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//          ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//          ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Server)(nil))
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

func (o ServerOutput) ToServerPtrOutput() ServerPtrOutput {
	return o.ToServerPtrOutputWithContext(context.Background())
}

func (o ServerOutput) ToServerPtrOutputWithContext(ctx context.Context) ServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Server) *Server {
		return &v
	}).(ServerPtrOutput)
}

type ServerPtrOutput struct{ *pulumi.OutputState }

func (ServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil))
}

func (o ServerPtrOutput) ToServerPtrOutput() ServerPtrOutput {
	return o
}

func (o ServerPtrOutput) ToServerPtrOutputWithContext(ctx context.Context) ServerPtrOutput {
	return o
}

func (o ServerPtrOutput) Elem() ServerOutput {
	return o.ApplyT(func(v *Server) Server {
		if v != nil {
			return *v
		}
		var ret Server
		return ret
	}).(ServerOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Server)(nil))
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Server {
		return vs[0].([]Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Server)(nil))
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Server {
		return vs[0].(map[string]Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPtrInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerPtrOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
