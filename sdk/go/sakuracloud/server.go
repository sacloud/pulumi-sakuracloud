// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Server resource. This can be used to create, update, and delete Servers.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/server.html.markdown.
type Server struct {
	s *pulumi.ResourceState
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOpt) (*Server, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["additionalDisplayIpaddresses"] = nil
		inputs["additionalNics"] = nil
		inputs["cdromId"] = nil
		inputs["commitment"] = nil
		inputs["core"] = nil
		inputs["description"] = nil
		inputs["disablePwAuth"] = nil
		inputs["disks"] = nil
		inputs["displayIpaddress"] = nil
		inputs["gateway"] = nil
		inputs["gracefulShutdownTimeout"] = nil
		inputs["hostname"] = nil
		inputs["iconId"] = nil
		inputs["interfaceDriver"] = nil
		inputs["ipaddress"] = nil
		inputs["memory"] = nil
		inputs["name"] = nil
		inputs["nic"] = nil
		inputs["noteIds"] = nil
		inputs["nwMaskLen"] = nil
		inputs["packetFilterIds"] = nil
		inputs["password"] = nil
		inputs["privateHostId"] = nil
		inputs["sshKeyIds"] = nil
		inputs["tags"] = nil
		inputs["zone"] = nil
	} else {
		inputs["additionalDisplayIpaddresses"] = args.AdditionalDisplayIpaddresses
		inputs["additionalNics"] = args.AdditionalNics
		inputs["cdromId"] = args.CdromId
		inputs["commitment"] = args.Commitment
		inputs["core"] = args.Core
		inputs["description"] = args.Description
		inputs["disablePwAuth"] = args.DisablePwAuth
		inputs["disks"] = args.Disks
		inputs["displayIpaddress"] = args.DisplayIpaddress
		inputs["gateway"] = args.Gateway
		inputs["gracefulShutdownTimeout"] = args.GracefulShutdownTimeout
		inputs["hostname"] = args.Hostname
		inputs["iconId"] = args.IconId
		inputs["interfaceDriver"] = args.InterfaceDriver
		inputs["ipaddress"] = args.Ipaddress
		inputs["memory"] = args.Memory
		inputs["name"] = args.Name
		inputs["nic"] = args.Nic
		inputs["noteIds"] = args.NoteIds
		inputs["nwMaskLen"] = args.NwMaskLen
		inputs["packetFilterIds"] = args.PacketFilterIds
		inputs["password"] = args.Password
		inputs["privateHostId"] = args.PrivateHostId
		inputs["sshKeyIds"] = args.SshKeyIds
		inputs["tags"] = args.Tags
		inputs["zone"] = args.Zone
	}
	inputs["dnsServers"] = nil
	inputs["macaddresses"] = nil
	inputs["nwAddress"] = nil
	inputs["privateHostName"] = nil
	inputs["vncHost"] = nil
	inputs["vncPassword"] = nil
	inputs["vncPort"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/server:Server", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerState, opts ...pulumi.ResourceOpt) (*Server, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["additionalDisplayIpaddresses"] = state.AdditionalDisplayIpaddresses
		inputs["additionalNics"] = state.AdditionalNics
		inputs["cdromId"] = state.CdromId
		inputs["commitment"] = state.Commitment
		inputs["core"] = state.Core
		inputs["description"] = state.Description
		inputs["disablePwAuth"] = state.DisablePwAuth
		inputs["disks"] = state.Disks
		inputs["displayIpaddress"] = state.DisplayIpaddress
		inputs["dnsServers"] = state.DnsServers
		inputs["gateway"] = state.Gateway
		inputs["gracefulShutdownTimeout"] = state.GracefulShutdownTimeout
		inputs["hostname"] = state.Hostname
		inputs["iconId"] = state.IconId
		inputs["interfaceDriver"] = state.InterfaceDriver
		inputs["ipaddress"] = state.Ipaddress
		inputs["macaddresses"] = state.Macaddresses
		inputs["memory"] = state.Memory
		inputs["name"] = state.Name
		inputs["nic"] = state.Nic
		inputs["noteIds"] = state.NoteIds
		inputs["nwAddress"] = state.NwAddress
		inputs["nwMaskLen"] = state.NwMaskLen
		inputs["packetFilterIds"] = state.PacketFilterIds
		inputs["password"] = state.Password
		inputs["privateHostId"] = state.PrivateHostId
		inputs["privateHostName"] = state.PrivateHostName
		inputs["sshKeyIds"] = state.SshKeyIds
		inputs["tags"] = state.Tags
		inputs["vncHost"] = state.VncHost
		inputs["vncPassword"] = state.VncPassword
		inputs["vncPort"] = state.VncPort
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/server:Server", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Server) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Server) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The display IP address list of the NICs (excluding primary NIC) of Server.  
func (r *Server) AdditionalDisplayIpaddresses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["additionalDisplayIpaddresses"])
}

// The ID list of the Switches connected to NICs (excluding primary NIC) of Server.  
// Valid values are one of the following: [ <Switch ID> / "" (disconnected) ]
func (r *Server) AdditionalNics() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["additionalNics"])
}

// The ID of the CD-ROM inserted to Server.
func (r *Server) CdromId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cdromId"])
}

// The plan of assignment of CPU to VM(default:`standard`).  
// Valid value is one of the following: [ "standard" (default) / "dedicatedcpu"]
func (r *Server) Commitment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["commitment"])
}

// The number of cores (default:`1`).
func (r *Server) Core() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["core"])
}

// The description of the resource.
func (r *Server) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The flag of disable password auth via SSH.
func (r *Server) DisablePwAuth() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disablePwAuth"])
}

// The ID list of the Disks connected to Server.
func (r *Server) Disks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["disks"])
}

// The IP address of NIC for display. Valid only when connected to switch.  
func (r *Server) DisplayIpaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayIpaddress"])
}

// List of default DNS servers for the zone to which the Server belongs.
func (r *Server) DnsServers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dnsServers"])
}

// Default gateway address of the Server to set with `"Modify Disk"` API.	 
func (r *Server) Gateway() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gateway"])
}

// The wait time (seconds) to do graceful shutdown the Server.
func (r *Server) GracefulShutdownTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["gracefulShutdownTimeout"])
}

// The hostname to set with `"Modify Disk"` API.
func (r *Server) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

// The ID of the icon.
func (r *Server) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The name of network interface driver.  
// Valid value is one of the following: [ "virtio" (default) / "e1000"]
func (r *Server) InterfaceDriver() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["interfaceDriver"])
}

// The IP address of primary NIC to set with `"Modify Disk"` API.
func (r *Server) Ipaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress"])
}

// The MAC address list of NICs connected to Server.
func (r *Server) Macaddresses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["macaddresses"])
}

// The size of memory (unit:`GB`, default:`1`).
func (r *Server) Memory() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["memory"])
}

// The name of the resource.
func (r *Server) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The primary NIC's connection destination.  
// Valid value is one of the following: [ "shared" (default) / <Switch ID> / "" (disconnected) ]
func (r *Server) Nic() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nic"])
}

// The ID list of Notes (Startup-Scripts) to set with `"Modify Disk"` API.
func (r *Server) NoteIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["noteIds"])
}

// The network address of the Server.
func (r *Server) NwAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nwAddress"])
}

// Network mask length of the Server to set with `"Modify Disk"` API.
func (r *Server) NwMaskLen() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nwMaskLen"])
}

// The ID list of the Packet Filters connected to Server.
func (r *Server) PacketFilterIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["packetFilterIds"])
}

// The password of OS's administrator to set with `"Modify Disk"` API.
func (r *Server) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// The ID of the Private Host to which the Server belongs.
func (r *Server) PrivateHostId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateHostId"])
}

// The name of the Private Host to which the Server belongs.
func (r *Server) PrivateHostName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateHostName"])
}

// The ID list of SSH Keys to set with `"Modify Disk"` API.
func (r *Server) SshKeyIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sshKeyIds"])
}

// The tag list of the resources.
func (r *Server) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The hostname of VNC server.
func (r *Server) VncHost() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vncHost"])
}

// The password of VNC server.
func (r *Server) VncPassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vncPassword"])
}

// The port number of VNC server.
func (r *Server) VncPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["vncPort"])
}

// The ID of the zone to which the resource belongs.
func (r *Server) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Server resources.
type ServerState struct {
	// The display IP address list of the NICs (excluding primary NIC) of Server.  
	AdditionalDisplayIpaddresses interface{}
	// The ID list of the Switches connected to NICs (excluding primary NIC) of Server.  
	// Valid values are one of the following: [ <Switch ID> / "" (disconnected) ]
	AdditionalNics interface{}
	// The ID of the CD-ROM inserted to Server.
	CdromId interface{}
	// The plan of assignment of CPU to VM(default:`standard`).  
	// Valid value is one of the following: [ "standard" (default) / "dedicatedcpu"]
	Commitment interface{}
	// The number of cores (default:`1`).
	Core interface{}
	// The description of the resource.
	Description interface{}
	// The flag of disable password auth via SSH.
	DisablePwAuth interface{}
	// The ID list of the Disks connected to Server.
	Disks interface{}
	// The IP address of NIC for display. Valid only when connected to switch.  
	DisplayIpaddress interface{}
	// List of default DNS servers for the zone to which the Server belongs.
	DnsServers interface{}
	// Default gateway address of the Server to set with `"Modify Disk"` API.	 
	Gateway interface{}
	// The wait time (seconds) to do graceful shutdown the Server.
	GracefulShutdownTimeout interface{}
	// The hostname to set with `"Modify Disk"` API.
	Hostname interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of network interface driver.  
	// Valid value is one of the following: [ "virtio" (default) / "e1000"]
	InterfaceDriver interface{}
	// The IP address of primary NIC to set with `"Modify Disk"` API.
	Ipaddress interface{}
	// The MAC address list of NICs connected to Server.
	Macaddresses interface{}
	// The size of memory (unit:`GB`, default:`1`).
	Memory interface{}
	// The name of the resource.
	Name interface{}
	// The primary NIC's connection destination.  
	// Valid value is one of the following: [ "shared" (default) / <Switch ID> / "" (disconnected) ]
	Nic interface{}
	// The ID list of Notes (Startup-Scripts) to set with `"Modify Disk"` API.
	NoteIds interface{}
	// The network address of the Server.
	NwAddress interface{}
	// Network mask length of the Server to set with `"Modify Disk"` API.
	NwMaskLen interface{}
	// The ID list of the Packet Filters connected to Server.
	PacketFilterIds interface{}
	// The password of OS's administrator to set with `"Modify Disk"` API.
	Password interface{}
	// The ID of the Private Host to which the Server belongs.
	PrivateHostId interface{}
	// The name of the Private Host to which the Server belongs.
	PrivateHostName interface{}
	// The ID list of SSH Keys to set with `"Modify Disk"` API.
	SshKeyIds interface{}
	// The tag list of the resources.
	Tags interface{}
	// The hostname of VNC server.
	VncHost interface{}
	// The password of VNC server.
	VncPassword interface{}
	// The port number of VNC server.
	VncPort interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// The display IP address list of the NICs (excluding primary NIC) of Server.  
	AdditionalDisplayIpaddresses interface{}
	// The ID list of the Switches connected to NICs (excluding primary NIC) of Server.  
	// Valid values are one of the following: [ <Switch ID> / "" (disconnected) ]
	AdditionalNics interface{}
	// The ID of the CD-ROM inserted to Server.
	CdromId interface{}
	// The plan of assignment of CPU to VM(default:`standard`).  
	// Valid value is one of the following: [ "standard" (default) / "dedicatedcpu"]
	Commitment interface{}
	// The number of cores (default:`1`).
	Core interface{}
	// The description of the resource.
	Description interface{}
	// The flag of disable password auth via SSH.
	DisablePwAuth interface{}
	// The ID list of the Disks connected to Server.
	Disks interface{}
	// The IP address of NIC for display. Valid only when connected to switch.  
	DisplayIpaddress interface{}
	// Default gateway address of the Server to set with `"Modify Disk"` API.	 
	Gateway interface{}
	// The wait time (seconds) to do graceful shutdown the Server.
	GracefulShutdownTimeout interface{}
	// The hostname to set with `"Modify Disk"` API.
	Hostname interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of network interface driver.  
	// Valid value is one of the following: [ "virtio" (default) / "e1000"]
	InterfaceDriver interface{}
	// The IP address of primary NIC to set with `"Modify Disk"` API.
	Ipaddress interface{}
	// The size of memory (unit:`GB`, default:`1`).
	Memory interface{}
	// The name of the resource.
	Name interface{}
	// The primary NIC's connection destination.  
	// Valid value is one of the following: [ "shared" (default) / <Switch ID> / "" (disconnected) ]
	Nic interface{}
	// The ID list of Notes (Startup-Scripts) to set with `"Modify Disk"` API.
	NoteIds interface{}
	// Network mask length of the Server to set with `"Modify Disk"` API.
	NwMaskLen interface{}
	// The ID list of the Packet Filters connected to Server.
	PacketFilterIds interface{}
	// The password of OS's administrator to set with `"Modify Disk"` API.
	Password interface{}
	// The ID of the Private Host to which the Server belongs.
	PrivateHostId interface{}
	// The ID list of SSH Keys to set with `"Modify Disk"` API.
	SshKeyIds interface{}
	// The tag list of the resources.
	Tags interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
