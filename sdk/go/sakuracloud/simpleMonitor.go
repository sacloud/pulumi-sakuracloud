// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud Simple Monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewSimpleMonitor(ctx, "foobar", &sakuracloud.SimpleMonitorArgs{
// 			DelayLoop:   pulumi.Int(60),
// 			Description: pulumi.String("description"),
// 			HealthCheck: &sakuracloud.SimpleMonitorHealthCheckArgs{
// 				ContainsString: pulumi.String("ok"),
// 				HostHeader:     pulumi.String("example.com"),
// 				Http2:          pulumi.Bool(true),
// 				Path:           pulumi.String("/"),
// 				Port:           pulumi.Int(443),
// 				Protocol:       pulumi.String("https"),
// 				Sni:            pulumi.Bool(true),
// 				Status:         pulumi.Int(200),
// 			},
// 			NotifyEmailEnabled: pulumi.Bool(true),
// 			NotifyEmailHtml:    pulumi.Bool(true),
// 			NotifySlackEnabled: pulumi.Bool(true),
// 			NotifySlackWebhook: pulumi.String("https://hooks.slack.com/services/xxx/xxx/xxx"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 			Target:  pulumi.String("www.example.com"),
// 			Timeout: pulumi.Int(10),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type SimpleMonitor struct {
	pulumi.CustomResourceState

	// The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.
	DelayLoop pulumi.IntPtrOutput `pulumi:"delayLoop"`
	// The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The flag to enable monitoring by the simple monitor. Default:`true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A `healthCheck` block as defined below.
	HealthCheck SimpleMonitorHealthCheckOutput `pulumi:"healthCheck"`
	// The icon id to attach to the SimpleMonitor.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The flag to enable notification by email. Default:`true`.
	NotifyEmailEnabled pulumi.BoolPtrOutput `pulumi:"notifyEmailEnabled"`
	// The flag to enable HTML format instead of text format.
	NotifyEmailHtml pulumi.BoolPtrOutput `pulumi:"notifyEmailHtml"`
	// The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.
	NotifyInterval pulumi.IntPtrOutput `pulumi:"notifyInterval"`
	// The flag to enable notification by slack/discord.
	NotifySlackEnabled pulumi.BoolPtrOutput `pulumi:"notifySlackEnabled"`
	// The webhook URL for sending notification by slack/discord.
	NotifySlackWebhook pulumi.StringPtrOutput `pulumi:"notifySlackWebhook"`
	// Any tags to assign to the SimpleMonitor.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.
	Target pulumi.StringOutput `pulumi:"target"`
	// The timeout in seconds for monitoring. This must be in the range [`10`-`30`].
	Timeout pulumi.IntOutput `pulumi:"timeout"`
}

// NewSimpleMonitor registers a new resource with the given unique name, arguments, and options.
func NewSimpleMonitor(ctx *pulumi.Context,
	name string, args *SimpleMonitorArgs, opts ...pulumi.ResourceOption) (*SimpleMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthCheck == nil {
		return nil, errors.New("invalid value for required argument 'HealthCheck'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	var resource SimpleMonitor
	err := ctx.RegisterResource("sakuracloud:index/simpleMonitor:SimpleMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSimpleMonitor gets an existing SimpleMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSimpleMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SimpleMonitorState, opts ...pulumi.ResourceOption) (*SimpleMonitor, error) {
	var resource SimpleMonitor
	err := ctx.ReadResource("sakuracloud:index/simpleMonitor:SimpleMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SimpleMonitor resources.
type simpleMonitorState struct {
	// The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.
	DelayLoop *int `pulumi:"delayLoop"`
	// The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The flag to enable monitoring by the simple monitor. Default:`true`.
	Enabled *bool `pulumi:"enabled"`
	// A `healthCheck` block as defined below.
	HealthCheck *SimpleMonitorHealthCheck `pulumi:"healthCheck"`
	// The icon id to attach to the SimpleMonitor.
	IconId *string `pulumi:"iconId"`
	// The flag to enable notification by email. Default:`true`.
	NotifyEmailEnabled *bool `pulumi:"notifyEmailEnabled"`
	// The flag to enable HTML format instead of text format.
	NotifyEmailHtml *bool `pulumi:"notifyEmailHtml"`
	// The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.
	NotifyInterval *int `pulumi:"notifyInterval"`
	// The flag to enable notification by slack/discord.
	NotifySlackEnabled *bool `pulumi:"notifySlackEnabled"`
	// The webhook URL for sending notification by slack/discord.
	NotifySlackWebhook *string `pulumi:"notifySlackWebhook"`
	// Any tags to assign to the SimpleMonitor.
	Tags []string `pulumi:"tags"`
	// The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.
	Target *string `pulumi:"target"`
	// The timeout in seconds for monitoring. This must be in the range [`10`-`30`].
	Timeout *int `pulumi:"timeout"`
}

type SimpleMonitorState struct {
	// The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.
	DelayLoop pulumi.IntPtrInput
	// The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The flag to enable monitoring by the simple monitor. Default:`true`.
	Enabled pulumi.BoolPtrInput
	// A `healthCheck` block as defined below.
	HealthCheck SimpleMonitorHealthCheckPtrInput
	// The icon id to attach to the SimpleMonitor.
	IconId pulumi.StringPtrInput
	// The flag to enable notification by email. Default:`true`.
	NotifyEmailEnabled pulumi.BoolPtrInput
	// The flag to enable HTML format instead of text format.
	NotifyEmailHtml pulumi.BoolPtrInput
	// The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.
	NotifyInterval pulumi.IntPtrInput
	// The flag to enable notification by slack/discord.
	NotifySlackEnabled pulumi.BoolPtrInput
	// The webhook URL for sending notification by slack/discord.
	NotifySlackWebhook pulumi.StringPtrInput
	// Any tags to assign to the SimpleMonitor.
	Tags pulumi.StringArrayInput
	// The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.
	Target pulumi.StringPtrInput
	// The timeout in seconds for monitoring. This must be in the range [`10`-`30`].
	Timeout pulumi.IntPtrInput
}

func (SimpleMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*simpleMonitorState)(nil)).Elem()
}

type simpleMonitorArgs struct {
	// The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.
	DelayLoop *int `pulumi:"delayLoop"`
	// The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The flag to enable monitoring by the simple monitor. Default:`true`.
	Enabled *bool `pulumi:"enabled"`
	// A `healthCheck` block as defined below.
	HealthCheck SimpleMonitorHealthCheck `pulumi:"healthCheck"`
	// The icon id to attach to the SimpleMonitor.
	IconId *string `pulumi:"iconId"`
	// The flag to enable notification by email. Default:`true`.
	NotifyEmailEnabled *bool `pulumi:"notifyEmailEnabled"`
	// The flag to enable HTML format instead of text format.
	NotifyEmailHtml *bool `pulumi:"notifyEmailHtml"`
	// The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.
	NotifyInterval *int `pulumi:"notifyInterval"`
	// The flag to enable notification by slack/discord.
	NotifySlackEnabled *bool `pulumi:"notifySlackEnabled"`
	// The webhook URL for sending notification by slack/discord.
	NotifySlackWebhook *string `pulumi:"notifySlackWebhook"`
	// Any tags to assign to the SimpleMonitor.
	Tags []string `pulumi:"tags"`
	// The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.
	Target string `pulumi:"target"`
	// The timeout in seconds for monitoring. This must be in the range [`10`-`30`].
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a SimpleMonitor resource.
type SimpleMonitorArgs struct {
	// The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.
	DelayLoop pulumi.IntPtrInput
	// The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The flag to enable monitoring by the simple monitor. Default:`true`.
	Enabled pulumi.BoolPtrInput
	// A `healthCheck` block as defined below.
	HealthCheck SimpleMonitorHealthCheckInput
	// The icon id to attach to the SimpleMonitor.
	IconId pulumi.StringPtrInput
	// The flag to enable notification by email. Default:`true`.
	NotifyEmailEnabled pulumi.BoolPtrInput
	// The flag to enable HTML format instead of text format.
	NotifyEmailHtml pulumi.BoolPtrInput
	// The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.
	NotifyInterval pulumi.IntPtrInput
	// The flag to enable notification by slack/discord.
	NotifySlackEnabled pulumi.BoolPtrInput
	// The webhook URL for sending notification by slack/discord.
	NotifySlackWebhook pulumi.StringPtrInput
	// Any tags to assign to the SimpleMonitor.
	Tags pulumi.StringArrayInput
	// The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.
	Target pulumi.StringInput
	// The timeout in seconds for monitoring. This must be in the range [`10`-`30`].
	Timeout pulumi.IntPtrInput
}

func (SimpleMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*simpleMonitorArgs)(nil)).Elem()
}

type SimpleMonitorInput interface {
	pulumi.Input

	ToSimpleMonitorOutput() SimpleMonitorOutput
	ToSimpleMonitorOutputWithContext(ctx context.Context) SimpleMonitorOutput
}

func (*SimpleMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleMonitor)(nil))
}

func (i *SimpleMonitor) ToSimpleMonitorOutput() SimpleMonitorOutput {
	return i.ToSimpleMonitorOutputWithContext(context.Background())
}

func (i *SimpleMonitor) ToSimpleMonitorOutputWithContext(ctx context.Context) SimpleMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleMonitorOutput)
}

func (i *SimpleMonitor) ToSimpleMonitorPtrOutput() SimpleMonitorPtrOutput {
	return i.ToSimpleMonitorPtrOutputWithContext(context.Background())
}

func (i *SimpleMonitor) ToSimpleMonitorPtrOutputWithContext(ctx context.Context) SimpleMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleMonitorPtrOutput)
}

type SimpleMonitorPtrInput interface {
	pulumi.Input

	ToSimpleMonitorPtrOutput() SimpleMonitorPtrOutput
	ToSimpleMonitorPtrOutputWithContext(ctx context.Context) SimpleMonitorPtrOutput
}

type simpleMonitorPtrType SimpleMonitorArgs

func (*simpleMonitorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleMonitor)(nil))
}

func (i *simpleMonitorPtrType) ToSimpleMonitorPtrOutput() SimpleMonitorPtrOutput {
	return i.ToSimpleMonitorPtrOutputWithContext(context.Background())
}

func (i *simpleMonitorPtrType) ToSimpleMonitorPtrOutputWithContext(ctx context.Context) SimpleMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleMonitorPtrOutput)
}

// SimpleMonitorArrayInput is an input type that accepts SimpleMonitorArray and SimpleMonitorArrayOutput values.
// You can construct a concrete instance of `SimpleMonitorArrayInput` via:
//
//          SimpleMonitorArray{ SimpleMonitorArgs{...} }
type SimpleMonitorArrayInput interface {
	pulumi.Input

	ToSimpleMonitorArrayOutput() SimpleMonitorArrayOutput
	ToSimpleMonitorArrayOutputWithContext(context.Context) SimpleMonitorArrayOutput
}

type SimpleMonitorArray []SimpleMonitorInput

func (SimpleMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SimpleMonitor)(nil))
}

func (i SimpleMonitorArray) ToSimpleMonitorArrayOutput() SimpleMonitorArrayOutput {
	return i.ToSimpleMonitorArrayOutputWithContext(context.Background())
}

func (i SimpleMonitorArray) ToSimpleMonitorArrayOutputWithContext(ctx context.Context) SimpleMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleMonitorArrayOutput)
}

// SimpleMonitorMapInput is an input type that accepts SimpleMonitorMap and SimpleMonitorMapOutput values.
// You can construct a concrete instance of `SimpleMonitorMapInput` via:
//
//          SimpleMonitorMap{ "key": SimpleMonitorArgs{...} }
type SimpleMonitorMapInput interface {
	pulumi.Input

	ToSimpleMonitorMapOutput() SimpleMonitorMapOutput
	ToSimpleMonitorMapOutputWithContext(context.Context) SimpleMonitorMapOutput
}

type SimpleMonitorMap map[string]SimpleMonitorInput

func (SimpleMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SimpleMonitor)(nil))
}

func (i SimpleMonitorMap) ToSimpleMonitorMapOutput() SimpleMonitorMapOutput {
	return i.ToSimpleMonitorMapOutputWithContext(context.Background())
}

func (i SimpleMonitorMap) ToSimpleMonitorMapOutputWithContext(ctx context.Context) SimpleMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleMonitorMapOutput)
}

type SimpleMonitorOutput struct {
	*pulumi.OutputState
}

func (SimpleMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleMonitor)(nil))
}

func (o SimpleMonitorOutput) ToSimpleMonitorOutput() SimpleMonitorOutput {
	return o
}

func (o SimpleMonitorOutput) ToSimpleMonitorOutputWithContext(ctx context.Context) SimpleMonitorOutput {
	return o
}

func (o SimpleMonitorOutput) ToSimpleMonitorPtrOutput() SimpleMonitorPtrOutput {
	return o.ToSimpleMonitorPtrOutputWithContext(context.Background())
}

func (o SimpleMonitorOutput) ToSimpleMonitorPtrOutputWithContext(ctx context.Context) SimpleMonitorPtrOutput {
	return o.ApplyT(func(v SimpleMonitor) *SimpleMonitor {
		return &v
	}).(SimpleMonitorPtrOutput)
}

type SimpleMonitorPtrOutput struct {
	*pulumi.OutputState
}

func (SimpleMonitorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleMonitor)(nil))
}

func (o SimpleMonitorPtrOutput) ToSimpleMonitorPtrOutput() SimpleMonitorPtrOutput {
	return o
}

func (o SimpleMonitorPtrOutput) ToSimpleMonitorPtrOutputWithContext(ctx context.Context) SimpleMonitorPtrOutput {
	return o
}

type SimpleMonitorArrayOutput struct{ *pulumi.OutputState }

func (SimpleMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SimpleMonitor)(nil))
}

func (o SimpleMonitorArrayOutput) ToSimpleMonitorArrayOutput() SimpleMonitorArrayOutput {
	return o
}

func (o SimpleMonitorArrayOutput) ToSimpleMonitorArrayOutputWithContext(ctx context.Context) SimpleMonitorArrayOutput {
	return o
}

func (o SimpleMonitorArrayOutput) Index(i pulumi.IntInput) SimpleMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SimpleMonitor {
		return vs[0].([]SimpleMonitor)[vs[1].(int)]
	}).(SimpleMonitorOutput)
}

type SimpleMonitorMapOutput struct{ *pulumi.OutputState }

func (SimpleMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SimpleMonitor)(nil))
}

func (o SimpleMonitorMapOutput) ToSimpleMonitorMapOutput() SimpleMonitorMapOutput {
	return o
}

func (o SimpleMonitorMapOutput) ToSimpleMonitorMapOutputWithContext(ctx context.Context) SimpleMonitorMapOutput {
	return o
}

func (o SimpleMonitorMapOutput) MapIndex(k pulumi.StringInput) SimpleMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SimpleMonitor {
		return vs[0].(map[string]SimpleMonitor)[vs[1].(string)]
	}).(SimpleMonitorOutput)
}

func init() {
	pulumi.RegisterOutputType(SimpleMonitorOutput{})
	pulumi.RegisterOutputType(SimpleMonitorPtrOutput{})
	pulumi.RegisterOutputType(SimpleMonitorArrayOutput{})
	pulumi.RegisterOutputType(SimpleMonitorMapOutput{})
}
