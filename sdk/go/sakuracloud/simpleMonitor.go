// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Simple Monitor resource. This can be used to create, update, and delete Simple Monitors.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/simple_monitor.html.markdown.
type SimpleMonitor struct {
	s *pulumi.ResourceState
}

// NewSimpleMonitor registers a new resource with the given unique name, arguments, and options.
func NewSimpleMonitor(ctx *pulumi.Context,
	name string, args *SimpleMonitorArgs, opts ...pulumi.ResourceOpt) (*SimpleMonitor, error) {
	if args == nil || args.HealthCheck == nil {
		return nil, errors.New("missing required argument 'HealthCheck'")
	}
	if args == nil || args.Target == nil {
		return nil, errors.New("missing required argument 'Target'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["enabled"] = nil
		inputs["healthCheck"] = nil
		inputs["iconId"] = nil
		inputs["notifyEmailEnabled"] = nil
		inputs["notifyEmailHtml"] = nil
		inputs["notifyInterval"] = nil
		inputs["notifySlackEnabled"] = nil
		inputs["notifySlackWebhook"] = nil
		inputs["tags"] = nil
		inputs["target"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["healthCheck"] = args.HealthCheck
		inputs["iconId"] = args.IconId
		inputs["notifyEmailEnabled"] = args.NotifyEmailEnabled
		inputs["notifyEmailHtml"] = args.NotifyEmailHtml
		inputs["notifyInterval"] = args.NotifyInterval
		inputs["notifySlackEnabled"] = args.NotifySlackEnabled
		inputs["notifySlackWebhook"] = args.NotifySlackWebhook
		inputs["tags"] = args.Tags
		inputs["target"] = args.Target
	}
	s, err := ctx.RegisterResource("sakuracloud:index/simpleMonitor:SimpleMonitor", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SimpleMonitor{s: s}, nil
}

// GetSimpleMonitor gets an existing SimpleMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSimpleMonitor(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SimpleMonitorState, opts ...pulumi.ResourceOpt) (*SimpleMonitor, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["healthCheck"] = state.HealthCheck
		inputs["iconId"] = state.IconId
		inputs["notifyEmailEnabled"] = state.NotifyEmailEnabled
		inputs["notifyEmailHtml"] = state.NotifyEmailHtml
		inputs["notifyInterval"] = state.NotifyInterval
		inputs["notifySlackEnabled"] = state.NotifySlackEnabled
		inputs["notifySlackWebhook"] = state.NotifySlackWebhook
		inputs["tags"] = state.Tags
		inputs["target"] = state.Target
	}
	s, err := ctx.ReadResource("sakuracloud:index/simpleMonitor:SimpleMonitor", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SimpleMonitor{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SimpleMonitor) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SimpleMonitor) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The description of the resource.
func (r *SimpleMonitor) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The flag of enable/disable monitoring.
func (r *SimpleMonitor) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// Health check rules. It contains some attributes to Health Check.
func (r *SimpleMonitor) HealthCheck() *pulumi.Output {
	return r.s.State["healthCheck"]
}

// The ID of the icon of the resource.
func (r *SimpleMonitor) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The flag of enable/disable notification by E-mail.
func (r *SimpleMonitor) NotifyEmailEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["notifyEmailEnabled"])
}

// The flag of enable/disable HTML format for E-mail.
func (r *SimpleMonitor) NotifyEmailHtml() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["notifyEmailHtml"])
}

// The intervals of notify (unit:`second`).  
func (r *SimpleMonitor) NotifyInterval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["notifyInterval"])
}

// The flag of enable/disable notification by slack.
func (r *SimpleMonitor) NotifySlackEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["notifySlackEnabled"])
}

// The webhook URL of destination of slack notification.
func (r *SimpleMonitor) NotifySlackWebhook() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notifySlackWebhook"])
}

// The tag list of the resources.
func (r *SimpleMonitor) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The HostName or IP address of monitoring target.
func (r *SimpleMonitor) Target() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["target"])
}

// Input properties used for looking up and filtering SimpleMonitor resources.
type SimpleMonitorState struct {
	// The description of the resource.
	Description interface{}
	// The flag of enable/disable monitoring.
	Enabled interface{}
	// Health check rules. It contains some attributes to Health Check.
	HealthCheck interface{}
	// The ID of the icon of the resource.
	IconId interface{}
	// The flag of enable/disable notification by E-mail.
	NotifyEmailEnabled interface{}
	// The flag of enable/disable HTML format for E-mail.
	NotifyEmailHtml interface{}
	// The intervals of notify (unit:`second`).  
	NotifyInterval interface{}
	// The flag of enable/disable notification by slack.
	NotifySlackEnabled interface{}
	// The webhook URL of destination of slack notification.
	NotifySlackWebhook interface{}
	// The tag list of the resources.
	Tags interface{}
	// The HostName or IP address of monitoring target.
	Target interface{}
}

// The set of arguments for constructing a SimpleMonitor resource.
type SimpleMonitorArgs struct {
	// The description of the resource.
	Description interface{}
	// The flag of enable/disable monitoring.
	Enabled interface{}
	// Health check rules. It contains some attributes to Health Check.
	HealthCheck interface{}
	// The ID of the icon of the resource.
	IconId interface{}
	// The flag of enable/disable notification by E-mail.
	NotifyEmailEnabled interface{}
	// The flag of enable/disable HTML format for E-mail.
	NotifyEmailHtml interface{}
	// The intervals of notify (unit:`second`).  
	NotifyInterval interface{}
	// The flag of enable/disable notification by slack.
	NotifySlackEnabled interface{}
	// The webhook URL of destination of slack notification.
	NotifySlackWebhook interface{}
	// The tag list of the resources.
	Tags interface{}
	// The HostName or IP address of monitoring target.
	Target interface{}
}
