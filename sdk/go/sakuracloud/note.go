// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Note struct {
	pulumi.CustomResourceState

	// The class of the Note. This must be one of `shell`/`yaml_cloud_config`
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The content of the Note. This must be specified as a shell script or as a cloud-config
	Content pulumi.StringOutput `pulumi:"content"`
	// The description of the Note. This will be computed from special tags within body of `content`
	Description pulumi.StringOutput `pulumi:"description"`
	// The icon id to attach to the Note
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the Note. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringOutput `pulumi:"name"`
	// Any tags to assign to the Note
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewNote registers a new resource with the given unique name, arguments, and options.
func NewNote(ctx *pulumi.Context,
	name string, args *NoteArgs, opts ...pulumi.ResourceOption) (*Note, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	if args == nil {
		args = &NoteArgs{}
	}
	var resource Note
	err := ctx.RegisterResource("sakuracloud:index/note:Note", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNote gets an existing Note resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNote(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NoteState, opts ...pulumi.ResourceOption) (*Note, error) {
	var resource Note
	err := ctx.ReadResource("sakuracloud:index/note:Note", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Note resources.
type noteState struct {
	// The class of the Note. This must be one of `shell`/`yaml_cloud_config`
	Class *string `pulumi:"class"`
	// The content of the Note. This must be specified as a shell script or as a cloud-config
	Content *string `pulumi:"content"`
	// The description of the Note. This will be computed from special tags within body of `content`
	Description *string `pulumi:"description"`
	// The icon id to attach to the Note
	IconId *string `pulumi:"iconId"`
	// The name of the Note. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// Any tags to assign to the Note
	Tags []string `pulumi:"tags"`
}

type NoteState struct {
	// The class of the Note. This must be one of `shell`/`yaml_cloud_config`
	Class pulumi.StringPtrInput
	// The content of the Note. This must be specified as a shell script or as a cloud-config
	Content pulumi.StringPtrInput
	// The description of the Note. This will be computed from special tags within body of `content`
	Description pulumi.StringPtrInput
	// The icon id to attach to the Note
	IconId pulumi.StringPtrInput
	// The name of the Note. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// Any tags to assign to the Note
	Tags pulumi.StringArrayInput
}

func (NoteState) ElementType() reflect.Type {
	return reflect.TypeOf((*noteState)(nil)).Elem()
}

type noteArgs struct {
	// The class of the Note. This must be one of `shell`/`yaml_cloud_config`
	Class *string `pulumi:"class"`
	// The content of the Note. This must be specified as a shell script or as a cloud-config
	Content string `pulumi:"content"`
	// The icon id to attach to the Note
	IconId *string `pulumi:"iconId"`
	// The name of the Note. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// Any tags to assign to the Note
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a Note resource.
type NoteArgs struct {
	// The class of the Note. This must be one of `shell`/`yaml_cloud_config`
	Class pulumi.StringPtrInput
	// The content of the Note. This must be specified as a shell script or as a cloud-config
	Content pulumi.StringInput
	// The icon id to attach to the Note
	IconId pulumi.StringPtrInput
	// The name of the Note. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// Any tags to assign to the Note
	Tags pulumi.StringArrayInput
}

func (NoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*noteArgs)(nil)).Elem()
}
