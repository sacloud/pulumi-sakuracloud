// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Note (Startup-Script) resource. This can be used to create, update, and delete Notes.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/note.html.markdown.
type Note struct {
	s *pulumi.ResourceState
}

// NewNote registers a new resource with the given unique name, arguments, and options.
func NewNote(ctx *pulumi.Context,
	name string, args *NoteArgs, opts ...pulumi.ResourceOpt) (*Note, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["class"] = nil
		inputs["content"] = nil
		inputs["iconId"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
	} else {
		inputs["class"] = args.Class
		inputs["content"] = args.Content
		inputs["iconId"] = args.IconId
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
	}
	inputs["description"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/note:Note", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Note{s: s}, nil
}

// GetNote gets an existing Note resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNote(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NoteState, opts ...pulumi.ResourceOpt) (*Note, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["class"] = state.Class
		inputs["content"] = state.Content
		inputs["description"] = state.Description
		inputs["iconId"] = state.IconId
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("sakuracloud:index/note:Note", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Note{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Note) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Note) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The content body of the Note.  
// Valid value is one of the following: [ "shell" (default) / "yamlCloudConfig" ]
func (r *Note) Class() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["class"])
}

// The content body of the Note.
func (r *Note) Content() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["content"])
}

// The description of the resource.
func (r *Note) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The ID of the icon.
func (r *Note) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The name of the resource.
func (r *Note) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The tag list of the resources.
func (r *Note) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Note resources.
type NoteState struct {
	// The content body of the Note.  
	// Valid value is one of the following: [ "shell" (default) / "yamlCloudConfig" ]
	Class interface{}
	// The content body of the Note.
	Content interface{}
	// The description of the resource.
	Description interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The tag list of the resources.
	Tags interface{}
}

// The set of arguments for constructing a Note resource.
type NoteArgs struct {
	// The content body of the Note.  
	// Valid value is one of the following: [ "shell" (default) / "yamlCloudConfig" ]
	Class interface{}
	// The content body of the Note.
	Content interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// The tag list of the resources.
	Tags interface{}
}
