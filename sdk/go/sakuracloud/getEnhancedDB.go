// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about an existing Enhanced Database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.LookupEnhancedDB(ctx, &GetEnhancedDBArgs{
// 			Filter: GetEnhancedDBFilter{
// 				Names: []string{
// 					"foobar",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupEnhancedDB(ctx *pulumi.Context, args *LookupEnhancedDBArgs, opts ...pulumi.InvokeOption) (*LookupEnhancedDBResult, error) {
	var rv LookupEnhancedDBResult
	err := ctx.Invoke("sakuracloud:index/getEnhancedDB:getEnhancedDB", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEnhancedDB.
type LookupEnhancedDBArgs struct {
	// One or more values used for filtering, as defined below.
	Filter *GetEnhancedDBFilter `pulumi:"filter"`
}

// A collection of values returned by getEnhancedDB.
type LookupEnhancedDBResult struct {
	// The name of database.
	DatabaseName string `pulumi:"databaseName"`
	// The type of database.
	DatabaseType string `pulumi:"databaseType"`
	// The description of the EnhancedDB.
	Description string               `pulumi:"description"`
	Filter      *GetEnhancedDBFilter `pulumi:"filter"`
	// The name of database host. This will be built from `databaseName` + `tidb-is1.db.sakurausercontent.com`.
	Hostname string `pulumi:"hostname"`
	// The icon id attached to the EnhancedDB.
	IconId string `pulumi:"iconId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The value of max connections setting.
	MaxConnections int `pulumi:"maxConnections"`
	// The name of the EnhancedDB.
	Name string `pulumi:"name"`
	// The region name.
	Region string `pulumi:"region"`
	// Any tags assigned to the EnhancedDB.
	Tags []string `pulumi:"tags"`
}

func LookupEnhancedDBOutput(ctx *pulumi.Context, args LookupEnhancedDBOutputArgs, opts ...pulumi.InvokeOption) LookupEnhancedDBResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEnhancedDBResult, error) {
			args := v.(LookupEnhancedDBArgs)
			r, err := LookupEnhancedDB(ctx, &args, opts...)
			return *r, err
		}).(LookupEnhancedDBResultOutput)
}

// A collection of arguments for invoking getEnhancedDB.
type LookupEnhancedDBOutputArgs struct {
	// One or more values used for filtering, as defined below.
	Filter GetEnhancedDBFilterPtrInput `pulumi:"filter"`
}

func (LookupEnhancedDBOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnhancedDBArgs)(nil)).Elem()
}

// A collection of values returned by getEnhancedDB.
type LookupEnhancedDBResultOutput struct{ *pulumi.OutputState }

func (LookupEnhancedDBResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEnhancedDBResult)(nil)).Elem()
}

func (o LookupEnhancedDBResultOutput) ToLookupEnhancedDBResultOutput() LookupEnhancedDBResultOutput {
	return o
}

func (o LookupEnhancedDBResultOutput) ToLookupEnhancedDBResultOutputWithContext(ctx context.Context) LookupEnhancedDBResultOutput {
	return o
}

// The name of database.
func (o LookupEnhancedDBResultOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The type of database.
func (o LookupEnhancedDBResultOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.DatabaseType }).(pulumi.StringOutput)
}

// The description of the EnhancedDB.
func (o LookupEnhancedDBResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupEnhancedDBResultOutput) Filter() GetEnhancedDBFilterPtrOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) *GetEnhancedDBFilter { return v.Filter }).(GetEnhancedDBFilterPtrOutput)
}

// The name of database host. This will be built from `databaseName` + `tidb-is1.db.sakurausercontent.com`.
func (o LookupEnhancedDBResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The icon id attached to the EnhancedDB.
func (o LookupEnhancedDBResultOutput) IconId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.IconId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupEnhancedDBResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.Id }).(pulumi.StringOutput)
}

// The value of max connections setting.
func (o LookupEnhancedDBResultOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// The name of the EnhancedDB.
func (o LookupEnhancedDBResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.Name }).(pulumi.StringOutput)
}

// The region name.
func (o LookupEnhancedDBResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) string { return v.Region }).(pulumi.StringOutput)
}

// Any tags assigned to the EnhancedDB.
func (o LookupEnhancedDBResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEnhancedDBResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEnhancedDBResultOutput{})
}
