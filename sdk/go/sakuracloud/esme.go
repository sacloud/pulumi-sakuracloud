// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud ESME resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewESME(ctx, "foobar", &sakuracloud.ESMEArgs{
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ESME struct {
	pulumi.CustomResourceState

	// The description of the ESME. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The icon id to attach to the ESME.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the ESME. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The API URL for send SMS with generated OTP.
	SendMessageWithGeneratedOtpApiUrl pulumi.StringOutput `pulumi:"sendMessageWithGeneratedOtpApiUrl"`
	// The API URL for send SMS with inputted OTP.
	SendMessageWithInputtedOtpApiUrl pulumi.StringOutput `pulumi:"sendMessageWithInputtedOtpApiUrl"`
	// Any tags to assign to the ESME.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewESME registers a new resource with the given unique name, arguments, and options.
func NewESME(ctx *pulumi.Context,
	name string, args *ESMEArgs, opts ...pulumi.ResourceOption) (*ESME, error) {
	if args == nil {
		args = &ESMEArgs{}
	}

	var resource ESME
	err := ctx.RegisterResource("sakuracloud:index/eSME:ESME", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetESME gets an existing ESME resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetESME(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ESMEState, opts ...pulumi.ResourceOption) (*ESME, error) {
	var resource ESME
	err := ctx.ReadResource("sakuracloud:index/eSME:ESME", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ESME resources.
type esmeState struct {
	// The description of the ESME. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the ESME.
	IconId *string `pulumi:"iconId"`
	// The name of the ESME. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The API URL for send SMS with generated OTP.
	SendMessageWithGeneratedOtpApiUrl *string `pulumi:"sendMessageWithGeneratedOtpApiUrl"`
	// The API URL for send SMS with inputted OTP.
	SendMessageWithInputtedOtpApiUrl *string `pulumi:"sendMessageWithInputtedOtpApiUrl"`
	// Any tags to assign to the ESME.
	Tags []string `pulumi:"tags"`
}

type ESMEState struct {
	// The description of the ESME. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the ESME.
	IconId pulumi.StringPtrInput
	// The name of the ESME. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The API URL for send SMS with generated OTP.
	SendMessageWithGeneratedOtpApiUrl pulumi.StringPtrInput
	// The API URL for send SMS with inputted OTP.
	SendMessageWithInputtedOtpApiUrl pulumi.StringPtrInput
	// Any tags to assign to the ESME.
	Tags pulumi.StringArrayInput
}

func (ESMEState) ElementType() reflect.Type {
	return reflect.TypeOf((*esmeState)(nil)).Elem()
}

type esmeArgs struct {
	// The description of the ESME. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The icon id to attach to the ESME.
	IconId *string `pulumi:"iconId"`
	// The name of the ESME. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// Any tags to assign to the ESME.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a ESME resource.
type ESMEArgs struct {
	// The description of the ESME. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The icon id to attach to the ESME.
	IconId pulumi.StringPtrInput
	// The name of the ESME. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// Any tags to assign to the ESME.
	Tags pulumi.StringArrayInput
}

func (ESMEArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*esmeArgs)(nil)).Elem()
}

type ESMEInput interface {
	pulumi.Input

	ToESMEOutput() ESMEOutput
	ToESMEOutputWithContext(ctx context.Context) ESMEOutput
}

func (*ESME) ElementType() reflect.Type {
	return reflect.TypeOf((*ESME)(nil))
}

func (i *ESME) ToESMEOutput() ESMEOutput {
	return i.ToESMEOutputWithContext(context.Background())
}

func (i *ESME) ToESMEOutputWithContext(ctx context.Context) ESMEOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ESMEOutput)
}

func (i *ESME) ToESMEPtrOutput() ESMEPtrOutput {
	return i.ToESMEPtrOutputWithContext(context.Background())
}

func (i *ESME) ToESMEPtrOutputWithContext(ctx context.Context) ESMEPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ESMEPtrOutput)
}

type ESMEPtrInput interface {
	pulumi.Input

	ToESMEPtrOutput() ESMEPtrOutput
	ToESMEPtrOutputWithContext(ctx context.Context) ESMEPtrOutput
}

type esmePtrType ESMEArgs

func (*esmePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ESME)(nil))
}

func (i *esmePtrType) ToESMEPtrOutput() ESMEPtrOutput {
	return i.ToESMEPtrOutputWithContext(context.Background())
}

func (i *esmePtrType) ToESMEPtrOutputWithContext(ctx context.Context) ESMEPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ESMEPtrOutput)
}

// ESMEArrayInput is an input type that accepts ESMEArray and ESMEArrayOutput values.
// You can construct a concrete instance of `ESMEArrayInput` via:
//
//          ESMEArray{ ESMEArgs{...} }
type ESMEArrayInput interface {
	pulumi.Input

	ToESMEArrayOutput() ESMEArrayOutput
	ToESMEArrayOutputWithContext(context.Context) ESMEArrayOutput
}

type ESMEArray []ESMEInput

func (ESMEArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ESME)(nil))
}

func (i ESMEArray) ToESMEArrayOutput() ESMEArrayOutput {
	return i.ToESMEArrayOutputWithContext(context.Background())
}

func (i ESMEArray) ToESMEArrayOutputWithContext(ctx context.Context) ESMEArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ESMEArrayOutput)
}

// ESMEMapInput is an input type that accepts ESMEMap and ESMEMapOutput values.
// You can construct a concrete instance of `ESMEMapInput` via:
//
//          ESMEMap{ "key": ESMEArgs{...} }
type ESMEMapInput interface {
	pulumi.Input

	ToESMEMapOutput() ESMEMapOutput
	ToESMEMapOutputWithContext(context.Context) ESMEMapOutput
}

type ESMEMap map[string]ESMEInput

func (ESMEMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ESME)(nil))
}

func (i ESMEMap) ToESMEMapOutput() ESMEMapOutput {
	return i.ToESMEMapOutputWithContext(context.Background())
}

func (i ESMEMap) ToESMEMapOutputWithContext(ctx context.Context) ESMEMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ESMEMapOutput)
}

type ESMEOutput struct {
	*pulumi.OutputState
}

func (ESMEOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ESME)(nil))
}

func (o ESMEOutput) ToESMEOutput() ESMEOutput {
	return o
}

func (o ESMEOutput) ToESMEOutputWithContext(ctx context.Context) ESMEOutput {
	return o
}

func (o ESMEOutput) ToESMEPtrOutput() ESMEPtrOutput {
	return o.ToESMEPtrOutputWithContext(context.Background())
}

func (o ESMEOutput) ToESMEPtrOutputWithContext(ctx context.Context) ESMEPtrOutput {
	return o.ApplyT(func(v ESME) *ESME {
		return &v
	}).(ESMEPtrOutput)
}

type ESMEPtrOutput struct {
	*pulumi.OutputState
}

func (ESMEPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ESME)(nil))
}

func (o ESMEPtrOutput) ToESMEPtrOutput() ESMEPtrOutput {
	return o
}

func (o ESMEPtrOutput) ToESMEPtrOutputWithContext(ctx context.Context) ESMEPtrOutput {
	return o
}

type ESMEArrayOutput struct{ *pulumi.OutputState }

func (ESMEArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ESME)(nil))
}

func (o ESMEArrayOutput) ToESMEArrayOutput() ESMEArrayOutput {
	return o
}

func (o ESMEArrayOutput) ToESMEArrayOutputWithContext(ctx context.Context) ESMEArrayOutput {
	return o
}

func (o ESMEArrayOutput) Index(i pulumi.IntInput) ESMEOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ESME {
		return vs[0].([]ESME)[vs[1].(int)]
	}).(ESMEOutput)
}

type ESMEMapOutput struct{ *pulumi.OutputState }

func (ESMEMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ESME)(nil))
}

func (o ESMEMapOutput) ToESMEMapOutput() ESMEMapOutput {
	return o
}

func (o ESMEMapOutput) ToESMEMapOutputWithContext(ctx context.Context) ESMEMapOutput {
	return o
}

func (o ESMEMapOutput) MapIndex(k pulumi.StringInput) ESMEOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ESME {
		return vs[0].(map[string]ESME)[vs[1].(string)]
	}).(ESMEOutput)
}

func init() {
	pulumi.RegisterOutputType(ESMEOutput{})
	pulumi.RegisterOutputType(ESMEPtrOutput{})
	pulumi.RegisterOutputType(ESMEArrayOutput{})
	pulumi.RegisterOutputType(ESMEMapOutput{})
}
