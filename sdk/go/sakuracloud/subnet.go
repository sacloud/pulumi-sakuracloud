// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Subnet resource. This can be used to create, update, and delete Subnets.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/subnet.html.markdown.
type Subnet struct {
	s *pulumi.ResourceState
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	if args == nil || args.InternetId == nil {
		return nil, errors.New("missing required argument 'InternetId'")
	}
	if args == nil || args.NextHop == nil {
		return nil, errors.New("missing required argument 'NextHop'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["internetId"] = nil
		inputs["nextHop"] = nil
		inputs["nwMaskLen"] = nil
		inputs["zone"] = nil
	} else {
		inputs["internetId"] = args.InternetId
		inputs["nextHop"] = args.NextHop
		inputs["nwMaskLen"] = args.NwMaskLen
		inputs["zone"] = args.Zone
	}
	inputs["ipaddresses"] = nil
	inputs["maxIpaddress"] = nil
	inputs["minIpaddress"] = nil
	inputs["nwAddress"] = nil
	inputs["switchId"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/subnet:Subnet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetState, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["internetId"] = state.InternetId
		inputs["ipaddresses"] = state.Ipaddresses
		inputs["maxIpaddress"] = state.MaxIpaddress
		inputs["minIpaddress"] = state.MinIpaddress
		inputs["nextHop"] = state.NextHop
		inputs["nwAddress"] = state.NwAddress
		inputs["nwMaskLen"] = state.NwMaskLen
		inputs["switchId"] = state.SwitchId
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/subnet:Subnet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnet) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnet) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the Internet resource.
func (r *Subnet) InternetId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["internetId"])
}

// Global IP address list.
func (r *Subnet) Ipaddresses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["ipaddresses"])
}

// Max global IP address.
func (r *Subnet) MaxIpaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maxIpaddress"])
}

// Min global IP address.
func (r *Subnet) MinIpaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["minIpaddress"])
}

// The next hop IP address.
func (r *Subnet) NextHop() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nextHop"])
}

// The network address.
func (r *Subnet) NwAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nwAddress"])
}

// Network mask length.  
// Valid value is one of the following: [ 28 (default) / 27 / 26 ]
func (r *Subnet) NwMaskLen() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["nwMaskLen"])
}

func (r *Subnet) SwitchId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["switchId"])
}

// The ID of the zone to which the resource belongs.
func (r *Subnet) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering Subnet resources.
type SubnetState struct {
	// The ID of the Internet resource.
	InternetId interface{}
	// Global IP address list.
	Ipaddresses interface{}
	// Max global IP address.
	MaxIpaddress interface{}
	// Min global IP address.
	MinIpaddress interface{}
	// The next hop IP address.
	NextHop interface{}
	// The network address.
	NwAddress interface{}
	// Network mask length.  
	// Valid value is one of the following: [ 28 (default) / 27 / 26 ]
	NwMaskLen interface{}
	SwitchId interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// The ID of the Internet resource.
	InternetId interface{}
	// The next hop IP address.
	NextHop interface{}
	// Network mask length.  
	// Valid value is one of the following: [ 28 (default) / 27 / 26 ]
	NwMaskLen interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
