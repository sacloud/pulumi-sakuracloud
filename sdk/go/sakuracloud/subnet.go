// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	// The id of the switch+router resource that the subnet belongs
	InternetId pulumi.StringOutput `pulumi:"internetId"`
	// A list of assigned global address to the subnet
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// Maximum IP address in assigned global addresses to the subnet
	MaxIpAddress pulumi.StringOutput `pulumi:"maxIpAddress"`
	// Minimum IP address in assigned global addresses to the subnet
	MinIpAddress pulumi.StringOutput `pulumi:"minIpAddress"`
	// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]
	Netmask pulumi.IntPtrOutput `pulumi:"netmask"`
	// The IPv4 network address assigned to the Subnet
	NetworkAddress pulumi.StringOutput `pulumi:"networkAddress"`
	// The ip address of the next-hop at the subnet
	NextHop pulumi.StringOutput `pulumi:"nextHop"`
	// The id of the switch connected from the Subnet
	SwitchId pulumi.StringOutput `pulumi:"switchId"`
	// The name of zone that the Subnet will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil || args.InternetId == nil {
		return nil, errors.New("missing required argument 'InternetId'")
	}
	if args == nil || args.NextHop == nil {
		return nil, errors.New("missing required argument 'NextHop'")
	}
	if args == nil {
		args = &SubnetArgs{}
	}
	var resource Subnet
	err := ctx.RegisterResource("sakuracloud:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("sakuracloud:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// The id of the switch+router resource that the subnet belongs
	InternetId *string `pulumi:"internetId"`
	// A list of assigned global address to the subnet
	IpAddresses []string `pulumi:"ipAddresses"`
	// Maximum IP address in assigned global addresses to the subnet
	MaxIpAddress *string `pulumi:"maxIpAddress"`
	// Minimum IP address in assigned global addresses to the subnet
	MinIpAddress *string `pulumi:"minIpAddress"`
	// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]
	Netmask *int `pulumi:"netmask"`
	// The IPv4 network address assigned to the Subnet
	NetworkAddress *string `pulumi:"networkAddress"`
	// The ip address of the next-hop at the subnet
	NextHop *string `pulumi:"nextHop"`
	// The id of the switch connected from the Subnet
	SwitchId *string `pulumi:"switchId"`
	// The name of zone that the Subnet will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

type SubnetState struct {
	// The id of the switch+router resource that the subnet belongs
	InternetId pulumi.StringPtrInput
	// A list of assigned global address to the subnet
	IpAddresses pulumi.StringArrayInput
	// Maximum IP address in assigned global addresses to the subnet
	MaxIpAddress pulumi.StringPtrInput
	// Minimum IP address in assigned global addresses to the subnet
	MinIpAddress pulumi.StringPtrInput
	// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]
	Netmask pulumi.IntPtrInput
	// The IPv4 network address assigned to the Subnet
	NetworkAddress pulumi.StringPtrInput
	// The ip address of the next-hop at the subnet
	NextHop pulumi.StringPtrInput
	// The id of the switch connected from the Subnet
	SwitchId pulumi.StringPtrInput
	// The name of zone that the Subnet will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// The id of the switch+router resource that the subnet belongs
	InternetId string `pulumi:"internetId"`
	// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]
	Netmask *int `pulumi:"netmask"`
	// The ip address of the next-hop at the subnet
	NextHop string `pulumi:"nextHop"`
	// The name of zone that the Subnet will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// The id of the switch+router resource that the subnet belongs
	InternetId pulumi.StringInput
	// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]
	Netmask pulumi.IntPtrInput
	// The ip address of the next-hop at the subnet
	NextHop pulumi.StringInput
	// The name of zone that the Subnet will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

