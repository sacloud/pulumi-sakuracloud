// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Get information about an existing ProxyLB.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.LookupProxyLB(ctx, &sakuracloud.LookupProxyLBArgs{
// 			Filter: sakuracloud.GetProxyLBFilter{
// 				Names: []string{
// 					"foobar",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupProxyLB(ctx *pulumi.Context, args *LookupProxyLBArgs, opts ...pulumi.InvokeOption) (*LookupProxyLBResult, error) {
	var rv LookupProxyLBResult
	err := ctx.Invoke("sakuracloud:index/getProxyLB:getProxyLB", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProxyLB.
type LookupProxyLBArgs struct {
	// One or more values used for filtering, as defined below.
	Filter *GetProxyLBFilter `pulumi:"filter"`
}

// A collection of values returned by getProxyLB.
type LookupProxyLBResult struct {
	// A list of `bindPort` blocks as defined below.
	BindPorts []GetProxyLBBindPort `pulumi:"bindPorts"`
	// A list of `certificate` blocks as defined below.
	Certificates []GetProxyLBCertificate `pulumi:"certificates"`
	// The description of the ProxyLB.
	Description string            `pulumi:"description"`
	Filter      *GetProxyLBFilter `pulumi:"filter"`
	// The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record.
	Fqdn string `pulumi:"fqdn"`
	// The flag to enable gzip compression.
	Gzip bool `pulumi:"gzip"`
	// A list of `healthCheck` blocks as defined below.
	HealthChecks []GetProxyLBHealthCheck `pulumi:"healthChecks"`
	// The icon id attached to the ProxyLB.
	IconId string `pulumi:"iconId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the ProxyLB.
	Name string `pulumi:"name"`
	// The plan name of the ProxyLB. This will be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`].
	Plan int `pulumi:"plan"`
	// A list of CIDR block used by the ProxyLB to access the server.
	ProxyNetworks []string `pulumi:"proxyNetworks"`
	// The name of region that the proxy LB is in. This will be one of [`tk1`/`is1`/`anycast`].
	Region string `pulumi:"region"`
	// A list of `rule` blocks as defined below.
	Rules []GetProxyLBRule `pulumi:"rules"`
	// A list of `server` blocks as defined below.
	Servers []GetProxyLBServer `pulumi:"servers"`
	// A list of `sorryServer` blocks as defined below.
	SorryServers []GetProxyLBSorryServer `pulumi:"sorryServers"`
	// The flag to enable sticky session.
	StickySession bool `pulumi:"stickySession"`
	// Any tags assigned to the ProxyLB.
	Tags []string `pulumi:"tags"`
	// The timeout duration in seconds.
	Timeout int `pulumi:"timeout"`
	// The virtual IP address assigned to the ProxyLB.
	Vip string `pulumi:"vip"`
	// The flag to enable VIP fail-over.
	VipFailover bool `pulumi:"vipFailover"`
}
