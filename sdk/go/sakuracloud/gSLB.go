// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud GSLB resource. This can be used to create, update, and delete GSLBs.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/gslb.html.markdown.
type GSLB struct {
	s *pulumi.ResourceState
}

// NewGSLB registers a new resource with the given unique name, arguments, and options.
func NewGSLB(ctx *pulumi.Context,
	name string, args *GSLBArgs, opts ...pulumi.ResourceOpt) (*GSLB, error) {
	if args == nil || args.HealthCheck == nil {
		return nil, errors.New("missing required argument 'HealthCheck'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["healthCheck"] = nil
		inputs["iconId"] = nil
		inputs["name"] = nil
		inputs["servers"] = nil
		inputs["sorryServer"] = nil
		inputs["tags"] = nil
		inputs["weighted"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["healthCheck"] = args.HealthCheck
		inputs["iconId"] = args.IconId
		inputs["name"] = args.Name
		inputs["servers"] = args.Servers
		inputs["sorryServer"] = args.SorryServer
		inputs["tags"] = args.Tags
		inputs["weighted"] = args.Weighted
	}
	inputs["fqdn"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/gSLB:GSLB", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GSLB{s: s}, nil
}

// GetGSLB gets an existing GSLB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGSLB(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GSLBState, opts ...pulumi.ResourceOpt) (*GSLB, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["fqdn"] = state.Fqdn
		inputs["healthCheck"] = state.HealthCheck
		inputs["iconId"] = state.IconId
		inputs["name"] = state.Name
		inputs["servers"] = state.Servers
		inputs["sorryServer"] = state.SorryServer
		inputs["tags"] = state.Tags
		inputs["weighted"] = state.Weighted
	}
	s, err := ctx.ReadResource("sakuracloud:index/gSLB:GSLB", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GSLB{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GSLB) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GSLB) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The description of the resource.
func (r *GSLB) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// FQDN to access this resource.
func (r *GSLB) Fqdn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fqdn"])
}

// Health check rules. It contains some attributes to Health Check.
func (r *GSLB) HealthCheck() *pulumi.Output {
	return r.s.State["healthCheck"]
}

// The ID of the icon.
func (r *GSLB) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The name of the resource.
func (r *GSLB) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Real servers. It contains some attributes to Servers.
func (r *GSLB) Servers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["servers"])
}

// The hostname or IP address of sorry server.
func (r *GSLB) SorryServer() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sorryServer"])
}

// The tag list of the resources.
func (r *GSLB) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The flag for enable/disable weighting (default:`true`).
func (r *GSLB) Weighted() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["weighted"])
}

// Input properties used for looking up and filtering GSLB resources.
type GSLBState struct {
	// The description of the resource.
	Description interface{}
	// FQDN to access this resource.
	Fqdn interface{}
	// Health check rules. It contains some attributes to Health Check.
	HealthCheck interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// Real servers. It contains some attributes to Servers.
	Servers interface{}
	// The hostname or IP address of sorry server.
	SorryServer interface{}
	// The tag list of the resources.
	Tags interface{}
	// The flag for enable/disable weighting (default:`true`).
	Weighted interface{}
}

// The set of arguments for constructing a GSLB resource.
type GSLBArgs struct {
	// The description of the resource.
	Description interface{}
	// Health check rules. It contains some attributes to Health Check.
	HealthCheck interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.
	Name interface{}
	// Real servers. It contains some attributes to Servers.
	Servers interface{}
	// The hostname or IP address of sorry server.
	SorryServer interface{}
	// The tag list of the resources.
	Tags interface{}
	// The flag for enable/disable weighting (default:`true`).
	Weighted interface{}
}
