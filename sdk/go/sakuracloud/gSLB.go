// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud GSLB.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewGSLB(ctx, "foobar", &sakuracloud.GSLBArgs{
// 			Description: pulumi.String("description"),
// 			HealthCheck: &sakuracloud.GSLBHealthCheckArgs{
// 				DelayLoop:  pulumi.Int(10),
// 				HostHeader: pulumi.String("example.com"),
// 				Path:       pulumi.String("/"),
// 				Protocol:   pulumi.String("http"),
// 				Status:     pulumi.String("200"),
// 			},
// 			Servers: sakuracloud.GSLBServerArray{
// 				&sakuracloud.GSLBServerArgs{
// 					Enabled:   pulumi.Bool(true),
// 					IpAddress: pulumi.String("192.2.0.11"),
// 					Weight:    pulumi.Int(1),
// 				},
// 				&sakuracloud.GSLBServerArgs{
// 					Enabled:   pulumi.Bool(true),
// 					IpAddress: pulumi.String("192.2.0.12"),
// 					Weight:    pulumi.Int(1),
// 				},
// 			},
// 			SorryServer: pulumi.String("192.2.0.1"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type GSLB struct {
	pulumi.CustomResourceState

	// The description of the GSLB. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The FQDN for accessing to the GSLB. This is typically used as value of CNAME record.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// A `healthCheck` block as defined below.
	HealthCheck GSLBHealthCheckOutput `pulumi:"healthCheck"`
	// The icon id to attach to the GSLB.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the GSLB. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `server` blocks as defined below.
	Servers GSLBServerArrayOutput `pulumi:"servers"`
	// The IP address of the SorryServer. This will be used when all servers are down.
	SorryServer pulumi.StringPtrOutput `pulumi:"sorryServer"`
	// Any tags to assign to the GSLB.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The flag to enable weighted load-balancing.
	Weighted pulumi.BoolPtrOutput `pulumi:"weighted"`
}

// NewGSLB registers a new resource with the given unique name, arguments, and options.
func NewGSLB(ctx *pulumi.Context,
	name string, args *GSLBArgs, opts ...pulumi.ResourceOption) (*GSLB, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthCheck == nil {
		return nil, errors.New("invalid value for required argument 'HealthCheck'")
	}
	var resource GSLB
	err := ctx.RegisterResource("sakuracloud:index/gSLB:GSLB", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGSLB gets an existing GSLB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGSLB(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GSLBState, opts ...pulumi.ResourceOption) (*GSLB, error) {
	var resource GSLB
	err := ctx.ReadResource("sakuracloud:index/gSLB:GSLB", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GSLB resources.
type gslbState struct {
	// The description of the GSLB. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The FQDN for accessing to the GSLB. This is typically used as value of CNAME record.
	Fqdn *string `pulumi:"fqdn"`
	// A `healthCheck` block as defined below.
	HealthCheck *GSLBHealthCheck `pulumi:"healthCheck"`
	// The icon id to attach to the GSLB.
	IconId *string `pulumi:"iconId"`
	// The name of the GSLB. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// One or more `server` blocks as defined below.
	Servers []GSLBServer `pulumi:"servers"`
	// The IP address of the SorryServer. This will be used when all servers are down.
	SorryServer *string `pulumi:"sorryServer"`
	// Any tags to assign to the GSLB.
	Tags []string `pulumi:"tags"`
	// The flag to enable weighted load-balancing.
	Weighted *bool `pulumi:"weighted"`
}

type GSLBState struct {
	// The description of the GSLB. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The FQDN for accessing to the GSLB. This is typically used as value of CNAME record.
	Fqdn pulumi.StringPtrInput
	// A `healthCheck` block as defined below.
	HealthCheck GSLBHealthCheckPtrInput
	// The icon id to attach to the GSLB.
	IconId pulumi.StringPtrInput
	// The name of the GSLB. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// One or more `server` blocks as defined below.
	Servers GSLBServerArrayInput
	// The IP address of the SorryServer. This will be used when all servers are down.
	SorryServer pulumi.StringPtrInput
	// Any tags to assign to the GSLB.
	Tags pulumi.StringArrayInput
	// The flag to enable weighted load-balancing.
	Weighted pulumi.BoolPtrInput
}

func (GSLBState) ElementType() reflect.Type {
	return reflect.TypeOf((*gslbState)(nil)).Elem()
}

type gslbArgs struct {
	// The description of the GSLB. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// A `healthCheck` block as defined below.
	HealthCheck GSLBHealthCheck `pulumi:"healthCheck"`
	// The icon id to attach to the GSLB.
	IconId *string `pulumi:"iconId"`
	// The name of the GSLB. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// One or more `server` blocks as defined below.
	Servers []GSLBServer `pulumi:"servers"`
	// The IP address of the SorryServer. This will be used when all servers are down.
	SorryServer *string `pulumi:"sorryServer"`
	// Any tags to assign to the GSLB.
	Tags []string `pulumi:"tags"`
	// The flag to enable weighted load-balancing.
	Weighted *bool `pulumi:"weighted"`
}

// The set of arguments for constructing a GSLB resource.
type GSLBArgs struct {
	// The description of the GSLB. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// A `healthCheck` block as defined below.
	HealthCheck GSLBHealthCheckInput
	// The icon id to attach to the GSLB.
	IconId pulumi.StringPtrInput
	// The name of the GSLB. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// One or more `server` blocks as defined below.
	Servers GSLBServerArrayInput
	// The IP address of the SorryServer. This will be used when all servers are down.
	SorryServer pulumi.StringPtrInput
	// Any tags to assign to the GSLB.
	Tags pulumi.StringArrayInput
	// The flag to enable weighted load-balancing.
	Weighted pulumi.BoolPtrInput
}

func (GSLBArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gslbArgs)(nil)).Elem()
}

type GSLBInput interface {
	pulumi.Input

	ToGSLBOutput() GSLBOutput
	ToGSLBOutputWithContext(ctx context.Context) GSLBOutput
}

func (*GSLB) ElementType() reflect.Type {
	return reflect.TypeOf((*GSLB)(nil))
}

func (i *GSLB) ToGSLBOutput() GSLBOutput {
	return i.ToGSLBOutputWithContext(context.Background())
}

func (i *GSLB) ToGSLBOutputWithContext(ctx context.Context) GSLBOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GSLBOutput)
}

func (i *GSLB) ToGSLBPtrOutput() GSLBPtrOutput {
	return i.ToGSLBPtrOutputWithContext(context.Background())
}

func (i *GSLB) ToGSLBPtrOutputWithContext(ctx context.Context) GSLBPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GSLBPtrOutput)
}

type GSLBPtrInput interface {
	pulumi.Input

	ToGSLBPtrOutput() GSLBPtrOutput
	ToGSLBPtrOutputWithContext(ctx context.Context) GSLBPtrOutput
}

type gslbPtrType GSLBArgs

func (*gslbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GSLB)(nil))
}

func (i *gslbPtrType) ToGSLBPtrOutput() GSLBPtrOutput {
	return i.ToGSLBPtrOutputWithContext(context.Background())
}

func (i *gslbPtrType) ToGSLBPtrOutputWithContext(ctx context.Context) GSLBPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GSLBPtrOutput)
}

// GSLBArrayInput is an input type that accepts GSLBArray and GSLBArrayOutput values.
// You can construct a concrete instance of `GSLBArrayInput` via:
//
//          GSLBArray{ GSLBArgs{...} }
type GSLBArrayInput interface {
	pulumi.Input

	ToGSLBArrayOutput() GSLBArrayOutput
	ToGSLBArrayOutputWithContext(context.Context) GSLBArrayOutput
}

type GSLBArray []GSLBInput

func (GSLBArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*GSLB)(nil))
}

func (i GSLBArray) ToGSLBArrayOutput() GSLBArrayOutput {
	return i.ToGSLBArrayOutputWithContext(context.Background())
}

func (i GSLBArray) ToGSLBArrayOutputWithContext(ctx context.Context) GSLBArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GSLBArrayOutput)
}

// GSLBMapInput is an input type that accepts GSLBMap and GSLBMapOutput values.
// You can construct a concrete instance of `GSLBMapInput` via:
//
//          GSLBMap{ "key": GSLBArgs{...} }
type GSLBMapInput interface {
	pulumi.Input

	ToGSLBMapOutput() GSLBMapOutput
	ToGSLBMapOutputWithContext(context.Context) GSLBMapOutput
}

type GSLBMap map[string]GSLBInput

func (GSLBMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*GSLB)(nil))
}

func (i GSLBMap) ToGSLBMapOutput() GSLBMapOutput {
	return i.ToGSLBMapOutputWithContext(context.Background())
}

func (i GSLBMap) ToGSLBMapOutputWithContext(ctx context.Context) GSLBMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GSLBMapOutput)
}

type GSLBOutput struct {
	*pulumi.OutputState
}

func (GSLBOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GSLB)(nil))
}

func (o GSLBOutput) ToGSLBOutput() GSLBOutput {
	return o
}

func (o GSLBOutput) ToGSLBOutputWithContext(ctx context.Context) GSLBOutput {
	return o
}

func (o GSLBOutput) ToGSLBPtrOutput() GSLBPtrOutput {
	return o.ToGSLBPtrOutputWithContext(context.Background())
}

func (o GSLBOutput) ToGSLBPtrOutputWithContext(ctx context.Context) GSLBPtrOutput {
	return o.ApplyT(func(v GSLB) *GSLB {
		return &v
	}).(GSLBPtrOutput)
}

type GSLBPtrOutput struct {
	*pulumi.OutputState
}

func (GSLBPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GSLB)(nil))
}

func (o GSLBPtrOutput) ToGSLBPtrOutput() GSLBPtrOutput {
	return o
}

func (o GSLBPtrOutput) ToGSLBPtrOutputWithContext(ctx context.Context) GSLBPtrOutput {
	return o
}

type GSLBArrayOutput struct{ *pulumi.OutputState }

func (GSLBArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GSLB)(nil))
}

func (o GSLBArrayOutput) ToGSLBArrayOutput() GSLBArrayOutput {
	return o
}

func (o GSLBArrayOutput) ToGSLBArrayOutputWithContext(ctx context.Context) GSLBArrayOutput {
	return o
}

func (o GSLBArrayOutput) Index(i pulumi.IntInput) GSLBOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GSLB {
		return vs[0].([]GSLB)[vs[1].(int)]
	}).(GSLBOutput)
}

type GSLBMapOutput struct{ *pulumi.OutputState }

func (GSLBMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GSLB)(nil))
}

func (o GSLBMapOutput) ToGSLBMapOutput() GSLBMapOutput {
	return o
}

func (o GSLBMapOutput) ToGSLBMapOutputWithContext(ctx context.Context) GSLBMapOutput {
	return o
}

func (o GSLBMapOutput) MapIndex(k pulumi.StringInput) GSLBOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GSLB {
		return vs[0].(map[string]GSLB)[vs[1].(string)]
	}).(GSLBOutput)
}

func init() {
	pulumi.RegisterOutputType(GSLBOutput{})
	pulumi.RegisterOutputType(GSLBPtrOutput{})
	pulumi.RegisterOutputType(GSLBArrayOutput{})
	pulumi.RegisterOutputType(GSLBMapOutput{})
}
