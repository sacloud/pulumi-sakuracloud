// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Get information about an existing Simple Monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.LookupSimpleMonitor(ctx, &sakuracloud.LookupSimpleMonitorArgs{
// 			Filter: sakuracloud.GetSimpleMonitorFilter{
// 				Names: []string{
// 					"foobar",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupSimpleMonitor(ctx *pulumi.Context, args *LookupSimpleMonitorArgs, opts ...pulumi.InvokeOption) (*LookupSimpleMonitorResult, error) {
	var rv LookupSimpleMonitorResult
	err := ctx.Invoke("sakuracloud:index/getSimpleMonitor:getSimpleMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSimpleMonitor.
type LookupSimpleMonitorArgs struct {
	// One or more values used for filtering, as defined below.
	Filter *GetSimpleMonitorFilter `pulumi:"filter"`
}

// A collection of values returned by getSimpleMonitor.
type LookupSimpleMonitorResult struct {
	// The interval in seconds between checks.
	DelayLoop int `pulumi:"delayLoop"`
	// The description of the SimpleMonitor.
	Description string `pulumi:"description"`
	// The flag to enable monitoring by the simple monitor.
	Enabled bool                    `pulumi:"enabled"`
	Filter  *GetSimpleMonitorFilter `pulumi:"filter"`
	// A list of `healthCheck` blocks as defined below.
	HealthChecks []GetSimpleMonitorHealthCheck `pulumi:"healthChecks"`
	// The icon id attached to the SimpleMonitor.
	IconId string `pulumi:"iconId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The flag to enable notification by email.
	NotifyEmailEnabled bool `pulumi:"notifyEmailEnabled"`
	// The flag to enable HTML format instead of text format.
	NotifyEmailHtml bool `pulumi:"notifyEmailHtml"`
	// The interval in hours between notification.
	NotifyInterval int `pulumi:"notifyInterval"`
	// The flag to enable notification by slack/discord.
	NotifySlackEnabled bool `pulumi:"notifySlackEnabled"`
	// The webhook URL for sending notification by slack/discord.
	NotifySlackWebhook string `pulumi:"notifySlackWebhook"`
	// Any tags assigned to the SimpleMonitor.
	Tags []string `pulumi:"tags"`
	// The monitoring target of the simple monitor. This will be IP address or FQDN.
	Target string `pulumi:"target"`
}
