// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Switch+Router.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewInternet(ctx, "foobar", &sakuracloud.InternetArgs{
// 			BandWidth:   pulumi.Int(100),
// 			Description: pulumi.String("description"),
// 			EnableIpv6:  pulumi.Bool(false),
// 			Netmask:     pulumi.Int(28),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Internet struct {
	pulumi.CustomResourceState

	// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`].
	// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
	BandWidth pulumi.IntPtrOutput `pulumi:"bandWidth"`
	// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The flag to enable IPv6.
	EnableIpv6 pulumi.BoolPtrOutput `pulumi:"enableIpv6"`
	// The IP address of the gateway used by the Switch+Router.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// The icon id to attach to the Switch+Router.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// A list of assigned global address to the Switch+Router.
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// The IPv6 network address assigned to the Switch+Router.
	Ipv6NetworkAddress pulumi.StringOutput `pulumi:"ipv6NetworkAddress"`
	// The network prefix of assigned IPv6 addresses to the Switch+Router.
	Ipv6Prefix pulumi.StringOutput `pulumi:"ipv6Prefix"`
	// The bit length of IPv6 network prefix.
	Ipv6PrefixLen pulumi.IntOutput `pulumi:"ipv6PrefixLen"`
	// Maximum IP address in assigned global addresses to the Switch+Router.
	MaxIpAddress pulumi.StringOutput `pulumi:"maxIpAddress"`
	// Minimum IP address in assigned global addresses to the Switch+Router.
	MinIpAddress pulumi.StringOutput `pulumi:"minIpAddress"`
	// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
	Netmask pulumi.IntPtrOutput `pulumi:"netmask"`
	// The IPv4 network address assigned to the Switch+Router.
	NetworkAddress pulumi.StringOutput `pulumi:"networkAddress"`
	// A list of the ID of Servers connected to the Switch+Router.
	ServerIds pulumi.StringArrayOutput `pulumi:"serverIds"`
	// The id of the switch.
	SwitchId pulumi.StringOutput `pulumi:"switchId"`
	// Any tags to assign to the Switch+Router.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewInternet registers a new resource with the given unique name, arguments, and options.
func NewInternet(ctx *pulumi.Context,
	name string, args *InternetArgs, opts ...pulumi.ResourceOption) (*Internet, error) {
	if args == nil {
		args = &InternetArgs{}
	}

	var resource Internet
	err := ctx.RegisterResource("sakuracloud:index/internet:Internet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternet gets an existing Internet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternetState, opts ...pulumi.ResourceOption) (*Internet, error) {
	var resource Internet
	err := ctx.ReadResource("sakuracloud:index/internet:Internet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Internet resources.
type internetState struct {
	// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`].
	// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
	BandWidth *int `pulumi:"bandWidth"`
	// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The flag to enable IPv6.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The IP address of the gateway used by the Switch+Router.
	Gateway *string `pulumi:"gateway"`
	// The icon id to attach to the Switch+Router.
	IconId *string `pulumi:"iconId"`
	// A list of assigned global address to the Switch+Router.
	IpAddresses []string `pulumi:"ipAddresses"`
	// The IPv6 network address assigned to the Switch+Router.
	Ipv6NetworkAddress *string `pulumi:"ipv6NetworkAddress"`
	// The network prefix of assigned IPv6 addresses to the Switch+Router.
	Ipv6Prefix *string `pulumi:"ipv6Prefix"`
	// The bit length of IPv6 network prefix.
	Ipv6PrefixLen *int `pulumi:"ipv6PrefixLen"`
	// Maximum IP address in assigned global addresses to the Switch+Router.
	MaxIpAddress *string `pulumi:"maxIpAddress"`
	// Minimum IP address in assigned global addresses to the Switch+Router.
	MinIpAddress *string `pulumi:"minIpAddress"`
	// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
	Netmask *int `pulumi:"netmask"`
	// The IPv4 network address assigned to the Switch+Router.
	NetworkAddress *string `pulumi:"networkAddress"`
	// A list of the ID of Servers connected to the Switch+Router.
	ServerIds []string `pulumi:"serverIds"`
	// The id of the switch.
	SwitchId *string `pulumi:"switchId"`
	// Any tags to assign to the Switch+Router.
	Tags []string `pulumi:"tags"`
	// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type InternetState struct {
	// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`].
	// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
	BandWidth pulumi.IntPtrInput
	// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The flag to enable IPv6.
	EnableIpv6 pulumi.BoolPtrInput
	// The IP address of the gateway used by the Switch+Router.
	Gateway pulumi.StringPtrInput
	// The icon id to attach to the Switch+Router.
	IconId pulumi.StringPtrInput
	// A list of assigned global address to the Switch+Router.
	IpAddresses pulumi.StringArrayInput
	// The IPv6 network address assigned to the Switch+Router.
	Ipv6NetworkAddress pulumi.StringPtrInput
	// The network prefix of assigned IPv6 addresses to the Switch+Router.
	Ipv6Prefix pulumi.StringPtrInput
	// The bit length of IPv6 network prefix.
	Ipv6PrefixLen pulumi.IntPtrInput
	// Maximum IP address in assigned global addresses to the Switch+Router.
	MaxIpAddress pulumi.StringPtrInput
	// Minimum IP address in assigned global addresses to the Switch+Router.
	MinIpAddress pulumi.StringPtrInput
	// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
	Netmask pulumi.IntPtrInput
	// The IPv4 network address assigned to the Switch+Router.
	NetworkAddress pulumi.StringPtrInput
	// A list of the ID of Servers connected to the Switch+Router.
	ServerIds pulumi.StringArrayInput
	// The id of the switch.
	SwitchId pulumi.StringPtrInput
	// Any tags to assign to the Switch+Router.
	Tags pulumi.StringArrayInput
	// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (InternetState) ElementType() reflect.Type {
	return reflect.TypeOf((*internetState)(nil)).Elem()
}

type internetArgs struct {
	// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`].
	// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
	BandWidth *int `pulumi:"bandWidth"`
	// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The flag to enable IPv6.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The icon id to attach to the Switch+Router.
	IconId *string `pulumi:"iconId"`
	// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
	Netmask *int `pulumi:"netmask"`
	// Any tags to assign to the Switch+Router.
	Tags []string `pulumi:"tags"`
	// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Internet resource.
type InternetArgs struct {
	// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`].
	// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
	BandWidth pulumi.IntPtrInput
	// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The flag to enable IPv6.
	EnableIpv6 pulumi.BoolPtrInput
	// The icon id to attach to the Switch+Router.
	IconId pulumi.StringPtrInput
	// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
	Netmask pulumi.IntPtrInput
	// Any tags to assign to the Switch+Router.
	Tags pulumi.StringArrayInput
	// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (InternetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internetArgs)(nil)).Elem()
}

type InternetInput interface {
	pulumi.Input

	ToInternetOutput() InternetOutput
	ToInternetOutputWithContext(ctx context.Context) InternetOutput
}

func (*Internet) ElementType() reflect.Type {
	return reflect.TypeOf((*Internet)(nil))
}

func (i *Internet) ToInternetOutput() InternetOutput {
	return i.ToInternetOutputWithContext(context.Background())
}

func (i *Internet) ToInternetOutputWithContext(ctx context.Context) InternetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetOutput)
}

func (i *Internet) ToInternetPtrOutput() InternetPtrOutput {
	return i.ToInternetPtrOutputWithContext(context.Background())
}

func (i *Internet) ToInternetPtrOutputWithContext(ctx context.Context) InternetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetPtrOutput)
}

type InternetPtrInput interface {
	pulumi.Input

	ToInternetPtrOutput() InternetPtrOutput
	ToInternetPtrOutputWithContext(ctx context.Context) InternetPtrOutput
}

type internetPtrType InternetArgs

func (*internetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Internet)(nil))
}

func (i *internetPtrType) ToInternetPtrOutput() InternetPtrOutput {
	return i.ToInternetPtrOutputWithContext(context.Background())
}

func (i *internetPtrType) ToInternetPtrOutputWithContext(ctx context.Context) InternetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetPtrOutput)
}

// InternetArrayInput is an input type that accepts InternetArray and InternetArrayOutput values.
// You can construct a concrete instance of `InternetArrayInput` via:
//
//          InternetArray{ InternetArgs{...} }
type InternetArrayInput interface {
	pulumi.Input

	ToInternetArrayOutput() InternetArrayOutput
	ToInternetArrayOutputWithContext(context.Context) InternetArrayOutput
}

type InternetArray []InternetInput

func (InternetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Internet)(nil)).Elem()
}

func (i InternetArray) ToInternetArrayOutput() InternetArrayOutput {
	return i.ToInternetArrayOutputWithContext(context.Background())
}

func (i InternetArray) ToInternetArrayOutputWithContext(ctx context.Context) InternetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetArrayOutput)
}

// InternetMapInput is an input type that accepts InternetMap and InternetMapOutput values.
// You can construct a concrete instance of `InternetMapInput` via:
//
//          InternetMap{ "key": InternetArgs{...} }
type InternetMapInput interface {
	pulumi.Input

	ToInternetMapOutput() InternetMapOutput
	ToInternetMapOutputWithContext(context.Context) InternetMapOutput
}

type InternetMap map[string]InternetInput

func (InternetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Internet)(nil)).Elem()
}

func (i InternetMap) ToInternetMapOutput() InternetMapOutput {
	return i.ToInternetMapOutputWithContext(context.Background())
}

func (i InternetMap) ToInternetMapOutputWithContext(ctx context.Context) InternetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetMapOutput)
}

type InternetOutput struct{ *pulumi.OutputState }

func (InternetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Internet)(nil))
}

func (o InternetOutput) ToInternetOutput() InternetOutput {
	return o
}

func (o InternetOutput) ToInternetOutputWithContext(ctx context.Context) InternetOutput {
	return o
}

func (o InternetOutput) ToInternetPtrOutput() InternetPtrOutput {
	return o.ToInternetPtrOutputWithContext(context.Background())
}

func (o InternetOutput) ToInternetPtrOutputWithContext(ctx context.Context) InternetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Internet) *Internet {
		return &v
	}).(InternetPtrOutput)
}

type InternetPtrOutput struct{ *pulumi.OutputState }

func (InternetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Internet)(nil))
}

func (o InternetPtrOutput) ToInternetPtrOutput() InternetPtrOutput {
	return o
}

func (o InternetPtrOutput) ToInternetPtrOutputWithContext(ctx context.Context) InternetPtrOutput {
	return o
}

func (o InternetPtrOutput) Elem() InternetOutput {
	return o.ApplyT(func(v *Internet) Internet {
		if v != nil {
			return *v
		}
		var ret Internet
		return ret
	}).(InternetOutput)
}

type InternetArrayOutput struct{ *pulumi.OutputState }

func (InternetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Internet)(nil))
}

func (o InternetArrayOutput) ToInternetArrayOutput() InternetArrayOutput {
	return o
}

func (o InternetArrayOutput) ToInternetArrayOutputWithContext(ctx context.Context) InternetArrayOutput {
	return o
}

func (o InternetArrayOutput) Index(i pulumi.IntInput) InternetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Internet {
		return vs[0].([]Internet)[vs[1].(int)]
	}).(InternetOutput)
}

type InternetMapOutput struct{ *pulumi.OutputState }

func (InternetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Internet)(nil))
}

func (o InternetMapOutput) ToInternetMapOutput() InternetMapOutput {
	return o
}

func (o InternetMapOutput) ToInternetMapOutputWithContext(ctx context.Context) InternetMapOutput {
	return o
}

func (o InternetMapOutput) MapIndex(k pulumi.StringInput) InternetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Internet {
		return vs[0].(map[string]Internet)[vs[1].(string)]
	}).(InternetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternetInput)(nil)).Elem(), &Internet{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetPtrInput)(nil)).Elem(), &Internet{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetArrayInput)(nil)).Elem(), InternetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetMapInput)(nil)).Elem(), InternetMap{})
	pulumi.RegisterOutputType(InternetOutput{})
	pulumi.RegisterOutputType(InternetPtrOutput{})
	pulumi.RegisterOutputType(InternetArrayOutput{})
	pulumi.RegisterOutputType(InternetMapOutput{})
}
