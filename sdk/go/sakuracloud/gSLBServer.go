// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud GSLB Server resource. This can be used to create and delete GSLB Servers.
// 
// ## Import (not supported)
// 
// Import of GSLB Server is not supported.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/gslb_server.html.markdown.
type GSLBServer struct {
	s *pulumi.ResourceState
}

// NewGSLBServer registers a new resource with the given unique name, arguments, and options.
func NewGSLBServer(ctx *pulumi.Context,
	name string, args *GSLBServerArgs, opts ...pulumi.ResourceOpt) (*GSLBServer, error) {
	if args == nil || args.GslbId == nil {
		return nil, errors.New("missing required argument 'GslbId'")
	}
	if args == nil || args.Ipaddress == nil {
		return nil, errors.New("missing required argument 'Ipaddress'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enabled"] = nil
		inputs["gslbId"] = nil
		inputs["ipaddress"] = nil
		inputs["weight"] = nil
	} else {
		inputs["enabled"] = args.Enabled
		inputs["gslbId"] = args.GslbId
		inputs["ipaddress"] = args.Ipaddress
		inputs["weight"] = args.Weight
	}
	s, err := ctx.RegisterResource("sakuracloud:index/gSLBServer:GSLBServer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GSLBServer{s: s}, nil
}

// GetGSLBServer gets an existing GSLBServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGSLBServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GSLBServerState, opts ...pulumi.ResourceOpt) (*GSLBServer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enabled"] = state.Enabled
		inputs["gslbId"] = state.GslbId
		inputs["ipaddress"] = state.Ipaddress
		inputs["weight"] = state.Weight
	}
	s, err := ctx.ReadResource("sakuracloud:index/gSLBServer:GSLBServer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &GSLBServer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *GSLBServer) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *GSLBServer) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The flag for enable/disable the GSLB Server (default:`true`).
func (r *GSLBServer) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The ID of the GSLB to which the GSLB Server belongs.
func (r *GSLBServer) GslbId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gslbId"])
}

// The IP address of the GSLB Server.
func (r *GSLBServer) Ipaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress"])
}

// The weight of GSLB server used when weighting is enabled in the GSLB.
func (r *GSLBServer) Weight() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["weight"])
}

// Input properties used for looking up and filtering GSLBServer resources.
type GSLBServerState struct {
	// The flag for enable/disable the GSLB Server (default:`true`).
	Enabled interface{}
	// The ID of the GSLB to which the GSLB Server belongs.
	GslbId interface{}
	// The IP address of the GSLB Server.
	Ipaddress interface{}
	// The weight of GSLB server used when weighting is enabled in the GSLB.
	Weight interface{}
}

// The set of arguments for constructing a GSLBServer resource.
type GSLBServerArgs struct {
	// The flag for enable/disable the GSLB Server (default:`true`).
	Enabled interface{}
	// The ID of the GSLB to which the GSLB Server belongs.
	GslbId interface{}
	// The IP address of the GSLB Server.
	Ipaddress interface{}
	// The weight of GSLB server used when weighting is enabled in the GSLB.
	Weight interface{}
}
