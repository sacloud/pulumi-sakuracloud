// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud CD-ROM.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewCDROM(ctx, "foobar", &sakuracloud.CDROMArgs{
// 			Description:  pulumi.String("description"),
// 			IsoImageFile: pulumi.String("example.iso"),
// 			Size:         pulumi.Int(5),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type CDROM struct {
	pulumi.CustomResourceState

	// The content to upload to as the CD-ROM. This conflicts with [`isoImageFile`].
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`isoImageFile`]. Default:`config`.
	ContentFileName pulumi.StringPtrOutput `pulumi:"contentFileName"`
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The md5 checksum calculated from the base64 encoded file body.
	Hash pulumi.StringOutput `pulumi:"hash"`
	// The icon id to attach to the CD-ROM.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The file path to upload to as the CD-ROM. This conflicts with [`content`].
	IsoImageFile pulumi.StringPtrOutput `pulumi:"isoImageFile"`
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// Any tags to assign to the CD-ROM.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewCDROM registers a new resource with the given unique name, arguments, and options.
func NewCDROM(ctx *pulumi.Context,
	name string, args *CDROMArgs, opts ...pulumi.ResourceOption) (*CDROM, error) {
	if args == nil {
		args = &CDROMArgs{}
	}

	var resource CDROM
	err := ctx.RegisterResource("sakuracloud:index/cDROM:CDROM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCDROM gets an existing CDROM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCDROM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CDROMState, opts ...pulumi.ResourceOption) (*CDROM, error) {
	var resource CDROM
	err := ctx.ReadResource("sakuracloud:index/cDROM:CDROM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CDROM resources.
type cdromState struct {
	// The content to upload to as the CD-ROM. This conflicts with [`isoImageFile`].
	Content *string `pulumi:"content"`
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`isoImageFile`]. Default:`config`.
	ContentFileName *string `pulumi:"contentFileName"`
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The md5 checksum calculated from the base64 encoded file body.
	Hash *string `pulumi:"hash"`
	// The icon id to attach to the CD-ROM.
	IconId *string `pulumi:"iconId"`
	// The file path to upload to as the CD-ROM. This conflicts with [`content`].
	IsoImageFile *string `pulumi:"isoImageFile"`
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.
	Size *int `pulumi:"size"`
	// Any tags to assign to the CD-ROM.
	Tags []string `pulumi:"tags"`
	// The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type CDROMState struct {
	// The content to upload to as the CD-ROM. This conflicts with [`isoImageFile`].
	Content pulumi.StringPtrInput
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`isoImageFile`]. Default:`config`.
	ContentFileName pulumi.StringPtrInput
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The md5 checksum calculated from the base64 encoded file body.
	Hash pulumi.StringPtrInput
	// The icon id to attach to the CD-ROM.
	IconId pulumi.StringPtrInput
	// The file path to upload to as the CD-ROM. This conflicts with [`content`].
	IsoImageFile pulumi.StringPtrInput
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.
	Size pulumi.IntPtrInput
	// Any tags to assign to the CD-ROM.
	Tags pulumi.StringArrayInput
	// The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (CDROMState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdromState)(nil)).Elem()
}

type cdromArgs struct {
	// The content to upload to as the CD-ROM. This conflicts with [`isoImageFile`].
	Content *string `pulumi:"content"`
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`isoImageFile`]. Default:`config`.
	ContentFileName *string `pulumi:"contentFileName"`
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The md5 checksum calculated from the base64 encoded file body.
	Hash *string `pulumi:"hash"`
	// The icon id to attach to the CD-ROM.
	IconId *string `pulumi:"iconId"`
	// The file path to upload to as the CD-ROM. This conflicts with [`content`].
	IsoImageFile *string `pulumi:"isoImageFile"`
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.
	Size *int `pulumi:"size"`
	// Any tags to assign to the CD-ROM.
	Tags []string `pulumi:"tags"`
	// The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a CDROM resource.
type CDROMArgs struct {
	// The content to upload to as the CD-ROM. This conflicts with [`isoImageFile`].
	Content pulumi.StringPtrInput
	// The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`isoImageFile`]. Default:`config`.
	ContentFileName pulumi.StringPtrInput
	// The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The md5 checksum calculated from the base64 encoded file body.
	Hash pulumi.StringPtrInput
	// The icon id to attach to the CD-ROM.
	IconId pulumi.StringPtrInput
	// The file path to upload to as the CD-ROM. This conflicts with [`content`].
	IsoImageFile pulumi.StringPtrInput
	// The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.
	Size pulumi.IntPtrInput
	// Any tags to assign to the CD-ROM.
	Tags pulumi.StringArrayInput
	// The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (CDROMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdromArgs)(nil)).Elem()
}

type CDROMInput interface {
	pulumi.Input

	ToCDROMOutput() CDROMOutput
	ToCDROMOutputWithContext(ctx context.Context) CDROMOutput
}

func (*CDROM) ElementType() reflect.Type {
	return reflect.TypeOf((*CDROM)(nil))
}

func (i *CDROM) ToCDROMOutput() CDROMOutput {
	return i.ToCDROMOutputWithContext(context.Background())
}

func (i *CDROM) ToCDROMOutputWithContext(ctx context.Context) CDROMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CDROMOutput)
}

func (i *CDROM) ToCDROMPtrOutput() CDROMPtrOutput {
	return i.ToCDROMPtrOutputWithContext(context.Background())
}

func (i *CDROM) ToCDROMPtrOutputWithContext(ctx context.Context) CDROMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CDROMPtrOutput)
}

type CDROMPtrInput interface {
	pulumi.Input

	ToCDROMPtrOutput() CDROMPtrOutput
	ToCDROMPtrOutputWithContext(ctx context.Context) CDROMPtrOutput
}

type cdromPtrType CDROMArgs

func (*cdromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CDROM)(nil))
}

func (i *cdromPtrType) ToCDROMPtrOutput() CDROMPtrOutput {
	return i.ToCDROMPtrOutputWithContext(context.Background())
}

func (i *cdromPtrType) ToCDROMPtrOutputWithContext(ctx context.Context) CDROMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CDROMPtrOutput)
}

// CDROMArrayInput is an input type that accepts CDROMArray and CDROMArrayOutput values.
// You can construct a concrete instance of `CDROMArrayInput` via:
//
//          CDROMArray{ CDROMArgs{...} }
type CDROMArrayInput interface {
	pulumi.Input

	ToCDROMArrayOutput() CDROMArrayOutput
	ToCDROMArrayOutputWithContext(context.Context) CDROMArrayOutput
}

type CDROMArray []CDROMInput

func (CDROMArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CDROM)(nil)).Elem()
}

func (i CDROMArray) ToCDROMArrayOutput() CDROMArrayOutput {
	return i.ToCDROMArrayOutputWithContext(context.Background())
}

func (i CDROMArray) ToCDROMArrayOutputWithContext(ctx context.Context) CDROMArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CDROMArrayOutput)
}

// CDROMMapInput is an input type that accepts CDROMMap and CDROMMapOutput values.
// You can construct a concrete instance of `CDROMMapInput` via:
//
//          CDROMMap{ "key": CDROMArgs{...} }
type CDROMMapInput interface {
	pulumi.Input

	ToCDROMMapOutput() CDROMMapOutput
	ToCDROMMapOutputWithContext(context.Context) CDROMMapOutput
}

type CDROMMap map[string]CDROMInput

func (CDROMMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CDROM)(nil)).Elem()
}

func (i CDROMMap) ToCDROMMapOutput() CDROMMapOutput {
	return i.ToCDROMMapOutputWithContext(context.Background())
}

func (i CDROMMap) ToCDROMMapOutputWithContext(ctx context.Context) CDROMMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CDROMMapOutput)
}

type CDROMOutput struct{ *pulumi.OutputState }

func (CDROMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CDROM)(nil))
}

func (o CDROMOutput) ToCDROMOutput() CDROMOutput {
	return o
}

func (o CDROMOutput) ToCDROMOutputWithContext(ctx context.Context) CDROMOutput {
	return o
}

func (o CDROMOutput) ToCDROMPtrOutput() CDROMPtrOutput {
	return o.ToCDROMPtrOutputWithContext(context.Background())
}

func (o CDROMOutput) ToCDROMPtrOutputWithContext(ctx context.Context) CDROMPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CDROM) *CDROM {
		return &v
	}).(CDROMPtrOutput)
}

type CDROMPtrOutput struct{ *pulumi.OutputState }

func (CDROMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CDROM)(nil))
}

func (o CDROMPtrOutput) ToCDROMPtrOutput() CDROMPtrOutput {
	return o
}

func (o CDROMPtrOutput) ToCDROMPtrOutputWithContext(ctx context.Context) CDROMPtrOutput {
	return o
}

func (o CDROMPtrOutput) Elem() CDROMOutput {
	return o.ApplyT(func(v *CDROM) CDROM {
		if v != nil {
			return *v
		}
		var ret CDROM
		return ret
	}).(CDROMOutput)
}

type CDROMArrayOutput struct{ *pulumi.OutputState }

func (CDROMArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CDROM)(nil))
}

func (o CDROMArrayOutput) ToCDROMArrayOutput() CDROMArrayOutput {
	return o
}

func (o CDROMArrayOutput) ToCDROMArrayOutputWithContext(ctx context.Context) CDROMArrayOutput {
	return o
}

func (o CDROMArrayOutput) Index(i pulumi.IntInput) CDROMOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CDROM {
		return vs[0].([]CDROM)[vs[1].(int)]
	}).(CDROMOutput)
}

type CDROMMapOutput struct{ *pulumi.OutputState }

func (CDROMMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CDROM)(nil))
}

func (o CDROMMapOutput) ToCDROMMapOutput() CDROMMapOutput {
	return o
}

func (o CDROMMapOutput) ToCDROMMapOutputWithContext(ctx context.Context) CDROMMapOutput {
	return o
}

func (o CDROMMapOutput) MapIndex(k pulumi.StringInput) CDROMOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CDROM {
		return vs[0].(map[string]CDROM)[vs[1].(string)]
	}).(CDROMOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CDROMInput)(nil)).Elem(), &CDROM{})
	pulumi.RegisterInputType(reflect.TypeOf((*CDROMPtrInput)(nil)).Elem(), &CDROM{})
	pulumi.RegisterInputType(reflect.TypeOf((*CDROMArrayInput)(nil)).Elem(), CDROMArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CDROMMapInput)(nil)).Elem(), CDROMMap{})
	pulumi.RegisterOutputType(CDROMOutput{})
	pulumi.RegisterOutputType(CDROMPtrOutput{})
	pulumi.RegisterOutputType(CDROMArrayOutput{})
	pulumi.RegisterOutputType(CDROMMapOutput{})
}
