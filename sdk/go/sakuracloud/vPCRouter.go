// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud VPC Router resource. This can be used to create, update, and delete VPC Routers.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/vpc_router.html.markdown.
type VPCRouter struct {
	s *pulumi.ResourceState
}

// NewVPCRouter registers a new resource with the given unique name, arguments, and options.
func NewVPCRouter(ctx *pulumi.Context,
	name string, args *VPCRouterArgs, opts ...pulumi.ResourceOpt) (*VPCRouter, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["aliases"] = nil
		inputs["description"] = nil
		inputs["dhcpServers"] = nil
		inputs["dhcpStaticMappings"] = nil
		inputs["firewalls"] = nil
		inputs["gracefulShutdownTimeout"] = nil
		inputs["iconId"] = nil
		inputs["interfaces"] = nil
		inputs["internetConnection"] = nil
		inputs["ipaddress1"] = nil
		inputs["ipaddress2"] = nil
		inputs["l2tp"] = nil
		inputs["name"] = nil
		inputs["plan"] = nil
		inputs["portForwardings"] = nil
		inputs["pptp"] = nil
		inputs["siteToSiteVpns"] = nil
		inputs["staticNats"] = nil
		inputs["staticRoutes"] = nil
		inputs["switchId"] = nil
		inputs["syslogHost"] = nil
		inputs["tags"] = nil
		inputs["users"] = nil
		inputs["vip"] = nil
		inputs["vrid"] = nil
		inputs["zone"] = nil
	} else {
		inputs["aliases"] = args.Aliases
		inputs["description"] = args.Description
		inputs["dhcpServers"] = args.DhcpServers
		inputs["dhcpStaticMappings"] = args.DhcpStaticMappings
		inputs["firewalls"] = args.Firewalls
		inputs["gracefulShutdownTimeout"] = args.GracefulShutdownTimeout
		inputs["iconId"] = args.IconId
		inputs["interfaces"] = args.Interfaces
		inputs["internetConnection"] = args.InternetConnection
		inputs["ipaddress1"] = args.Ipaddress1
		inputs["ipaddress2"] = args.Ipaddress2
		inputs["l2tp"] = args.L2tp
		inputs["name"] = args.Name
		inputs["plan"] = args.Plan
		inputs["portForwardings"] = args.PortForwardings
		inputs["pptp"] = args.Pptp
		inputs["siteToSiteVpns"] = args.SiteToSiteVpns
		inputs["staticNats"] = args.StaticNats
		inputs["staticRoutes"] = args.StaticRoutes
		inputs["switchId"] = args.SwitchId
		inputs["syslogHost"] = args.SyslogHost
		inputs["tags"] = args.Tags
		inputs["users"] = args.Users
		inputs["vip"] = args.Vip
		inputs["vrid"] = args.Vrid
		inputs["zone"] = args.Zone
	}
	inputs["globalAddress"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/vPCRouter:VPCRouter", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VPCRouter{s: s}, nil
}

// GetVPCRouter gets an existing VPCRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPCRouter(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VPCRouterState, opts ...pulumi.ResourceOpt) (*VPCRouter, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["aliases"] = state.Aliases
		inputs["description"] = state.Description
		inputs["dhcpServers"] = state.DhcpServers
		inputs["dhcpStaticMappings"] = state.DhcpStaticMappings
		inputs["firewalls"] = state.Firewalls
		inputs["globalAddress"] = state.GlobalAddress
		inputs["gracefulShutdownTimeout"] = state.GracefulShutdownTimeout
		inputs["iconId"] = state.IconId
		inputs["interfaces"] = state.Interfaces
		inputs["internetConnection"] = state.InternetConnection
		inputs["ipaddress1"] = state.Ipaddress1
		inputs["ipaddress2"] = state.Ipaddress2
		inputs["l2tp"] = state.L2tp
		inputs["name"] = state.Name
		inputs["plan"] = state.Plan
		inputs["portForwardings"] = state.PortForwardings
		inputs["pptp"] = state.Pptp
		inputs["siteToSiteVpns"] = state.SiteToSiteVpns
		inputs["staticNats"] = state.StaticNats
		inputs["staticRoutes"] = state.StaticRoutes
		inputs["switchId"] = state.SwitchId
		inputs["syslogHost"] = state.SyslogHost
		inputs["tags"] = state.Tags
		inputs["users"] = state.Users
		inputs["vip"] = state.Vip
		inputs["vrid"] = state.Vrid
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/vPCRouter:VPCRouter", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VPCRouter{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VPCRouter) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VPCRouter) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The IP address aliase list. Used when plan is `premium` or `highspec`.
func (r *VPCRouter) Aliases() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["aliases"])
}

// The description of the resource.
func (r *VPCRouter) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The DHCP server settings. It contains some attributes to dhcp_server.   
func (r *VPCRouter) DhcpServers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dhcpServers"])
}

// The DHCP static mapping settings. It contains some attributes to dhcp_static_mapping.  
func (r *VPCRouter) DhcpStaticMappings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dhcpStaticMappings"])
}

// The firewall settings. It contains some attributes to firewall.  
func (r *VPCRouter) Firewalls() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["firewalls"])
}

// (Required) The global IP address of the Static NAT.
func (r *VPCRouter) GlobalAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["globalAddress"])
}

// The wait time (seconds) to do graceful shutdown the VPC Router.
func (r *VPCRouter) GracefulShutdownTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["gracefulShutdownTimeout"])
}

// The ID of the icon.
func (r *VPCRouter) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The private NICs. It contains some attributes to interface. 
func (r *VPCRouter) Interfaces() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["interfaces"])
}

// The flag of enable/disable connection from the VPC Router to the Internet.
func (r *VPCRouter) InternetConnection() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["internetConnection"])
}

// The primary IP address of the VPC Router.
func (r *VPCRouter) Ipaddress1() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress1"])
}

// The secondly IP address of the VPC Router. Used when plan is `premium` or `highspec`.
func (r *VPCRouter) Ipaddress2() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress2"])
}

func (r *VPCRouter) L2tp() *pulumi.Output {
	return r.s.State["l2tp"]
}

// The name of the resource.
func (r *VPCRouter) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The plan of the VPC Router.   
// Valid value is one of the following: [ "standard" (default) / "premium" / "highspec" ]
func (r *VPCRouter) Plan() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["plan"])
}

// The port forwarding settings. It contains some attributes to port_forwarding. 
func (r *VPCRouter) PortForwardings() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["portForwardings"])
}

// The PPTP settings. It contains some attributes to pptp.  
func (r *VPCRouter) Pptp() *pulumi.Output {
	return r.s.State["pptp"]
}

// The Site-to-Site VPN settings. It contains some attributes to site_to_site_vpn.  
func (r *VPCRouter) SiteToSiteVpns() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["siteToSiteVpns"])
}

// The static NAT settings. It contains some attributes to static_nat.  
func (r *VPCRouter) StaticNats() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["staticNats"])
}

// The static route settings. It contains some attributes to static_route.  
func (r *VPCRouter) StaticRoutes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["staticRoutes"])
}

// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
func (r *VPCRouter) SwitchId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["switchId"])
}

// The destination HostName/IP address to send log.	
func (r *VPCRouter) SyslogHost() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["syslogHost"])
}

// The tag list of the resources.
func (r *VPCRouter) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The remote access user settings. It contains some attributes to user.  
func (r *VPCRouter) Users() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["users"])
}

// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
func (r *VPCRouter) Vip() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vip"])
}

// VRID used when plan is `premium` or `highspec`.
func (r *VPCRouter) Vrid() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["vrid"])
}

// The ID of the zone to which the resource belongs.
func (r *VPCRouter) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering VPCRouter resources.
type VPCRouterState struct {
	// The IP address aliase list. Used when plan is `premium` or `highspec`.
	Aliases interface{}
	// The description of the resource.
	Description interface{}
	// The DHCP server settings. It contains some attributes to dhcp_server.   
	DhcpServers interface{}
	// The DHCP static mapping settings. It contains some attributes to dhcp_static_mapping.  
	DhcpStaticMappings interface{}
	// The firewall settings. It contains some attributes to firewall.  
	Firewalls interface{}
	// (Required) The global IP address of the Static NAT.
	GlobalAddress interface{}
	// The wait time (seconds) to do graceful shutdown the VPC Router.
	GracefulShutdownTimeout interface{}
	// The ID of the icon.
	IconId interface{}
	// The private NICs. It contains some attributes to interface. 
	Interfaces interface{}
	// The flag of enable/disable connection from the VPC Router to the Internet.
	InternetConnection interface{}
	// The primary IP address of the VPC Router.
	Ipaddress1 interface{}
	// The secondly IP address of the VPC Router. Used when plan is `premium` or `highspec`.
	Ipaddress2 interface{}
	L2tp interface{}
	// The name of the resource.
	Name interface{}
	// The plan of the VPC Router.   
	// Valid value is one of the following: [ "standard" (default) / "premium" / "highspec" ]
	Plan interface{}
	// The port forwarding settings. It contains some attributes to port_forwarding. 
	PortForwardings interface{}
	// The PPTP settings. It contains some attributes to pptp.  
	Pptp interface{}
	// The Site-to-Site VPN settings. It contains some attributes to site_to_site_vpn.  
	SiteToSiteVpns interface{}
	// The static NAT settings. It contains some attributes to static_nat.  
	StaticNats interface{}
	// The static route settings. It contains some attributes to static_route.  
	StaticRoutes interface{}
	// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
	SwitchId interface{}
	// The destination HostName/IP address to send log.	
	SyslogHost interface{}
	// The tag list of the resources.
	Tags interface{}
	// The remote access user settings. It contains some attributes to user.  
	Users interface{}
	// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
	Vip interface{}
	// VRID used when plan is `premium` or `highspec`.
	Vrid interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a VPCRouter resource.
type VPCRouterArgs struct {
	// The IP address aliase list. Used when plan is `premium` or `highspec`.
	Aliases interface{}
	// The description of the resource.
	Description interface{}
	// The DHCP server settings. It contains some attributes to dhcp_server.   
	DhcpServers interface{}
	// The DHCP static mapping settings. It contains some attributes to dhcp_static_mapping.  
	DhcpStaticMappings interface{}
	// The firewall settings. It contains some attributes to firewall.  
	Firewalls interface{}
	// The wait time (seconds) to do graceful shutdown the VPC Router.
	GracefulShutdownTimeout interface{}
	// The ID of the icon.
	IconId interface{}
	// The private NICs. It contains some attributes to interface. 
	Interfaces interface{}
	// The flag of enable/disable connection from the VPC Router to the Internet.
	InternetConnection interface{}
	// The primary IP address of the VPC Router.
	Ipaddress1 interface{}
	// The secondly IP address of the VPC Router. Used when plan is `premium` or `highspec`.
	Ipaddress2 interface{}
	L2tp interface{}
	// The name of the resource.
	Name interface{}
	// The plan of the VPC Router.   
	// Valid value is one of the following: [ "standard" (default) / "premium" / "highspec" ]
	Plan interface{}
	// The port forwarding settings. It contains some attributes to port_forwarding. 
	PortForwardings interface{}
	// The PPTP settings. It contains some attributes to pptp.  
	Pptp interface{}
	// The Site-to-Site VPN settings. It contains some attributes to site_to_site_vpn.  
	SiteToSiteVpns interface{}
	// The static NAT settings. It contains some attributes to static_nat.  
	StaticNats interface{}
	// The static route settings. It contains some attributes to static_route.  
	StaticRoutes interface{}
	// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
	SwitchId interface{}
	// The destination HostName/IP address to send log.	
	SyslogHost interface{}
	// The tag list of the resources.
	Tags interface{}
	// The remote access user settings. It contains some attributes to user.  
	Users interface{}
	// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
	Vip interface{}
	// VRID used when plan is `premium` or `highspec`.
	Vrid interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
