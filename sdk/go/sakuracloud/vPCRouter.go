// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud VPC Router.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewVPCRouter(ctx, "standard", &sakuracloud.VPCRouterArgs{
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 			InternetConnection: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		foobarInternet, err := sakuracloud.NewInternet(ctx, "foobarInternet", nil)
// 		if err != nil {
// 			return err
// 		}
// 		foobarSwitch, err := sakuracloud.NewSwitch(ctx, "foobarSwitch", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewVPCRouter(ctx, "premium", &sakuracloud.VPCRouterArgs{
// 			Description: pulumi.String("description"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 			Plan:               pulumi.String("premium"),
// 			InternetConnection: pulumi.Bool(true),
// 			PublicNetworkInterface: &sakuracloud.VPCRouterPublicNetworkInterfaceArgs{
// 				SwitchId: foobarInternet.SwitchId,
// 				Vip: foobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {
// 					return ipAddresses[0], nil
// 				}).(pulumi.StringOutput),
// 				IpAddresses: pulumi.StringArray{
// 					foobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {
// 						return ipAddresses[1], nil
// 					}).(pulumi.StringOutput),
// 					foobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {
// 						return ipAddresses[2], nil
// 					}).(pulumi.StringOutput),
// 				},
// 				Aliases: pulumi.StringArray{
// 					foobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {
// 						return ipAddresses[3], nil
// 					}).(pulumi.StringOutput),
// 				},
// 				Vrid: pulumi.Int(1),
// 			},
// 			PrivateNetworkInterfaces: sakuracloud.VPCRouterPrivateNetworkInterfaceArray{
// 				&sakuracloud.VPCRouterPrivateNetworkInterfaceArgs{
// 					Index:    pulumi.Int(1),
// 					SwitchId: foobarSwitch.ID(),
// 					Vip:      pulumi.String("192.168.11.1"),
// 					IpAddresses: pulumi.StringArray{
// 						pulumi.String("192.168.11.2"),
// 						pulumi.String("192.168.11.3"),
// 					},
// 					Netmask: pulumi.Int(24),
// 				},
// 			},
// 			DhcpServers: sakuracloud.VPCRouterDhcpServerArray{
// 				&sakuracloud.VPCRouterDhcpServerArgs{
// 					InterfaceIndex: pulumi.Int(1),
// 					RangeStart:     pulumi.String("192.168.11.11"),
// 					RangeStop:      pulumi.String("192.168.11.20"),
// 					DnsServers: pulumi.StringArray{
// 						pulumi.String("8.8.8.8"),
// 						pulumi.String("8.8.4.4"),
// 					},
// 				},
// 			},
// 			DhcpStaticMappings: sakuracloud.VPCRouterDhcpStaticMappingArray{
// 				&sakuracloud.VPCRouterDhcpStaticMappingArgs{
// 					IpAddress:  pulumi.String("192.168.11.10"),
// 					MacAddress: pulumi.String("aa:bb:cc:aa:bb:cc"),
// 				},
// 			},
// 			Firewalls: sakuracloud.VPCRouterFirewallArray{
// 				&sakuracloud.VPCRouterFirewallArgs{
// 					InterfaceIndex: pulumi.Int(1),
// 					Direction:      pulumi.String("send"),
// 					Expressions: sakuracloud.VPCRouterFirewallExpressionArray{
// 						&sakuracloud.VPCRouterFirewallExpressionArgs{
// 							Protocol:           pulumi.String("tcp"),
// 							SourceNetwork:      pulumi.String(""),
// 							SourcePort:         pulumi.String("80"),
// 							DestinationNetwork: pulumi.String(""),
// 							DestinationPort:    pulumi.String(""),
// 							Allow:              pulumi.Bool(true),
// 							Logging:            pulumi.Bool(true),
// 							Description:        pulumi.String("desc"),
// 						},
// 						&sakuracloud.VPCRouterFirewallExpressionArgs{
// 							Protocol:           pulumi.String("ip"),
// 							SourceNetwork:      pulumi.String(""),
// 							SourcePort:         pulumi.String(""),
// 							DestinationNetwork: pulumi.String(""),
// 							DestinationPort:    pulumi.String(""),
// 							Allow:              pulumi.Bool(false),
// 							Logging:            pulumi.Bool(true),
// 							Description:        pulumi.String("desc"),
// 						},
// 					},
// 				},
// 			},
// 			L2tp: &sakuracloud.VPCRouterL2tpArgs{
// 				PreSharedSecret: pulumi.String("example"),
// 				RangeStart:      pulumi.String("192.168.11.21"),
// 				RangeStop:       pulumi.String("192.168.11.30"),
// 			},
// 			PortForwardings: sakuracloud.VPCRouterPortForwardingArray{
// 				&sakuracloud.VPCRouterPortForwardingArgs{
// 					Protocol:    pulumi.String("udp"),
// 					PublicPort:  pulumi.Int(10022),
// 					PrivateIp:   pulumi.String("192.168.11.11"),
// 					PrivatePort: pulumi.Int(22),
// 					Description: pulumi.String("desc"),
// 				},
// 			},
// 			Pptp: &sakuracloud.VPCRouterPptpArgs{
// 				RangeStart: pulumi.String("192.168.11.31"),
// 				RangeStop:  pulumi.String("192.168.11.40"),
// 			},
// 			WireGuard: &sakuracloud.VPCRouterWireGuardArgs{
// 				IpAddress: pulumi.String("192.168.31.1/24"),
// 				Peers: sakuracloud.VPCRouterWireGuardPeerArray{
// 					&sakuracloud.VPCRouterWireGuardPeerArgs{
// 						Name:      pulumi.String("example"),
// 						IpAddress: pulumi.String("192.168.31.11"),
// 						PublicKey: pulumi.String("<your-public-key>"),
// 					},
// 				},
// 			},
// 			SiteToSiteVpns: sakuracloud.VPCRouterSiteToSiteVpnArray{
// 				&sakuracloud.VPCRouterSiteToSiteVpnArgs{
// 					Peer:            pulumi.String("10.0.0.1"),
// 					RemoteId:        pulumi.String("10.0.0.1"),
// 					PreSharedSecret: pulumi.String("example"),
// 					Routes: pulumi.StringArray{
// 						pulumi.String("10.0.0.0/8"),
// 					},
// 					LocalPrefixes: pulumi.StringArray{
// 						pulumi.String("192.168.21.0/24"),
// 					},
// 				},
// 			},
// 			StaticNats: sakuracloud.VPCRouterStaticNatArray{
// 				&sakuracloud.VPCRouterStaticNatArgs{
// 					PublicIp: foobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {
// 						return ipAddresses[3], nil
// 					}).(pulumi.StringOutput),
// 					PrivateIp:   pulumi.String("192.168.11.12"),
// 					Description: pulumi.String("desc"),
// 				},
// 			},
// 			StaticRoutes: sakuracloud.VPCRouterStaticRouteArray{
// 				&sakuracloud.VPCRouterStaticRouteArgs{
// 					Prefix:  pulumi.String("172.16.0.0/16"),
// 					NextHop: pulumi.String("192.168.11.99"),
// 				},
// 			},
// 			Users: sakuracloud.VPCRouterUserArray{
// 				&sakuracloud.VPCRouterUserArgs{
// 					Name:     pulumi.String("username"),
// 					Password: pulumi.String("password"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type VPCRouter struct {
	pulumi.CustomResourceState

	// The description of the expression. The length of this value must be in the range [`0`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// One or more `dhcpServer` blocks as defined below.
	DhcpServers VPCRouterDhcpServerArrayOutput `pulumi:"dhcpServers"`
	// One or more `dhcpStaticMapping` blocks as defined below.
	DhcpStaticMappings VPCRouterDhcpStaticMappingArrayOutput `pulumi:"dhcpStaticMappings"`
	// One or more `firewall` blocks as defined below.
	Firewalls VPCRouterFirewallArrayOutput `pulumi:"firewalls"`
	// The icon id to attach to the VPCRouter.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
	InternetConnection pulumi.BoolPtrOutput `pulumi:"internetConnection"`
	// A `l2tp` block as defined below.
	L2tp VPCRouterL2tpPtrOutput `pulumi:"l2tp"`
	// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// One or more `portForwarding` blocks as defined below.
	PortForwardings VPCRouterPortForwardingArrayOutput `pulumi:"portForwardings"`
	// A `pptp` block as defined below.
	Pptp VPCRouterPptpPtrOutput `pulumi:"pptp"`
	// A list of additional network interface setting. This doesn't include primary network interface setting.
	PrivateNetworkInterfaces VPCRouterPrivateNetworkInterfaceArrayOutput `pulumi:"privateNetworkInterfaces"`
	// The public IP address used for the static NAT.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The bit length of the subnet to assign to the public network interface.
	PublicNetmask pulumi.IntOutput `pulumi:"publicNetmask"`
	// An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
	PublicNetworkInterface VPCRouterPublicNetworkInterfacePtrOutput `pulumi:"publicNetworkInterface"`
	// One or more `siteToSiteVpn` blocks as defined below.
	SiteToSiteVpns VPCRouterSiteToSiteVpnArrayOutput `pulumi:"siteToSiteVpns"`
	// One or more `staticNat` blocks as defined below.
	StaticNats VPCRouterStaticNatArrayOutput `pulumi:"staticNats"`
	// One or more `staticRoute` blocks as defined below.
	StaticRoutes VPCRouterStaticRouteArrayOutput `pulumi:"staticRoutes"`
	// The ip address of the syslog host to which the VPC Router sends logs.
	SyslogHost pulumi.StringPtrOutput `pulumi:"syslogHost"`
	// Any tags to assign to the VPCRouter.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// One or more `user` blocks as defined below.
	Users VPCRouterUserArrayOutput `pulumi:"users"`
	// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
	Version pulumi.IntPtrOutput `pulumi:"version"`
	// A `wireGuard` block as defined below.
	WireGuard VPCRouterWireGuardPtrOutput `pulumi:"wireGuard"`
	// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewVPCRouter registers a new resource with the given unique name, arguments, and options.
func NewVPCRouter(ctx *pulumi.Context,
	name string, args *VPCRouterArgs, opts ...pulumi.ResourceOption) (*VPCRouter, error) {
	if args == nil {
		args = &VPCRouterArgs{}
	}

	var resource VPCRouter
	err := ctx.RegisterResource("sakuracloud:index/vPCRouter:VPCRouter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVPCRouter gets an existing VPCRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVPCRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VPCRouterState, opts ...pulumi.ResourceOption) (*VPCRouter, error) {
	var resource VPCRouter
	err := ctx.ReadResource("sakuracloud:index/vPCRouter:VPCRouter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VPCRouter resources.
type vpcrouterState struct {
	// The description of the expression. The length of this value must be in the range [`0`-`512`].
	Description *string `pulumi:"description"`
	// One or more `dhcpServer` blocks as defined below.
	DhcpServers []VPCRouterDhcpServer `pulumi:"dhcpServers"`
	// One or more `dhcpStaticMapping` blocks as defined below.
	DhcpStaticMappings []VPCRouterDhcpStaticMapping `pulumi:"dhcpStaticMappings"`
	// One or more `firewall` blocks as defined below.
	Firewalls []VPCRouterFirewall `pulumi:"firewalls"`
	// The icon id to attach to the VPCRouter.
	IconId *string `pulumi:"iconId"`
	// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
	InternetConnection *bool `pulumi:"internetConnection"`
	// A `l2tp` block as defined below.
	L2tp *VPCRouterL2tp `pulumi:"l2tp"`
	// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
	Plan *string `pulumi:"plan"`
	// One or more `portForwarding` blocks as defined below.
	PortForwardings []VPCRouterPortForwarding `pulumi:"portForwardings"`
	// A `pptp` block as defined below.
	Pptp *VPCRouterPptp `pulumi:"pptp"`
	// A list of additional network interface setting. This doesn't include primary network interface setting.
	PrivateNetworkInterfaces []VPCRouterPrivateNetworkInterface `pulumi:"privateNetworkInterfaces"`
	// The public IP address used for the static NAT.
	PublicIp *string `pulumi:"publicIp"`
	// The bit length of the subnet to assign to the public network interface.
	PublicNetmask *int `pulumi:"publicNetmask"`
	// An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
	PublicNetworkInterface *VPCRouterPublicNetworkInterface `pulumi:"publicNetworkInterface"`
	// One or more `siteToSiteVpn` blocks as defined below.
	SiteToSiteVpns []VPCRouterSiteToSiteVpn `pulumi:"siteToSiteVpns"`
	// One or more `staticNat` blocks as defined below.
	StaticNats []VPCRouterStaticNat `pulumi:"staticNats"`
	// One or more `staticRoute` blocks as defined below.
	StaticRoutes []VPCRouterStaticRoute `pulumi:"staticRoutes"`
	// The ip address of the syslog host to which the VPC Router sends logs.
	SyslogHost *string `pulumi:"syslogHost"`
	// Any tags to assign to the VPCRouter.
	Tags []string `pulumi:"tags"`
	// One or more `user` blocks as defined below.
	Users []VPCRouterUser `pulumi:"users"`
	// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
	Version *int `pulumi:"version"`
	// A `wireGuard` block as defined below.
	WireGuard *VPCRouterWireGuard `pulumi:"wireGuard"`
	// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type VPCRouterState struct {
	// The description of the expression. The length of this value must be in the range [`0`-`512`].
	Description pulumi.StringPtrInput
	// One or more `dhcpServer` blocks as defined below.
	DhcpServers VPCRouterDhcpServerArrayInput
	// One or more `dhcpStaticMapping` blocks as defined below.
	DhcpStaticMappings VPCRouterDhcpStaticMappingArrayInput
	// One or more `firewall` blocks as defined below.
	Firewalls VPCRouterFirewallArrayInput
	// The icon id to attach to the VPCRouter.
	IconId pulumi.StringPtrInput
	// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
	InternetConnection pulumi.BoolPtrInput
	// A `l2tp` block as defined below.
	L2tp VPCRouterL2tpPtrInput
	// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
	Plan pulumi.StringPtrInput
	// One or more `portForwarding` blocks as defined below.
	PortForwardings VPCRouterPortForwardingArrayInput
	// A `pptp` block as defined below.
	Pptp VPCRouterPptpPtrInput
	// A list of additional network interface setting. This doesn't include primary network interface setting.
	PrivateNetworkInterfaces VPCRouterPrivateNetworkInterfaceArrayInput
	// The public IP address used for the static NAT.
	PublicIp pulumi.StringPtrInput
	// The bit length of the subnet to assign to the public network interface.
	PublicNetmask pulumi.IntPtrInput
	// An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
	PublicNetworkInterface VPCRouterPublicNetworkInterfacePtrInput
	// One or more `siteToSiteVpn` blocks as defined below.
	SiteToSiteVpns VPCRouterSiteToSiteVpnArrayInput
	// One or more `staticNat` blocks as defined below.
	StaticNats VPCRouterStaticNatArrayInput
	// One or more `staticRoute` blocks as defined below.
	StaticRoutes VPCRouterStaticRouteArrayInput
	// The ip address of the syslog host to which the VPC Router sends logs.
	SyslogHost pulumi.StringPtrInput
	// Any tags to assign to the VPCRouter.
	Tags pulumi.StringArrayInput
	// One or more `user` blocks as defined below.
	Users VPCRouterUserArrayInput
	// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
	Version pulumi.IntPtrInput
	// A `wireGuard` block as defined below.
	WireGuard VPCRouterWireGuardPtrInput
	// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (VPCRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcrouterState)(nil)).Elem()
}

type vpcrouterArgs struct {
	// The description of the expression. The length of this value must be in the range [`0`-`512`].
	Description *string `pulumi:"description"`
	// One or more `dhcpServer` blocks as defined below.
	DhcpServers []VPCRouterDhcpServer `pulumi:"dhcpServers"`
	// One or more `dhcpStaticMapping` blocks as defined below.
	DhcpStaticMappings []VPCRouterDhcpStaticMapping `pulumi:"dhcpStaticMappings"`
	// One or more `firewall` blocks as defined below.
	Firewalls []VPCRouterFirewall `pulumi:"firewalls"`
	// The icon id to attach to the VPCRouter.
	IconId *string `pulumi:"iconId"`
	// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
	InternetConnection *bool `pulumi:"internetConnection"`
	// A `l2tp` block as defined below.
	L2tp *VPCRouterL2tp `pulumi:"l2tp"`
	// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
	Plan *string `pulumi:"plan"`
	// One or more `portForwarding` blocks as defined below.
	PortForwardings []VPCRouterPortForwarding `pulumi:"portForwardings"`
	// A `pptp` block as defined below.
	Pptp *VPCRouterPptp `pulumi:"pptp"`
	// A list of additional network interface setting. This doesn't include primary network interface setting.
	PrivateNetworkInterfaces []VPCRouterPrivateNetworkInterface `pulumi:"privateNetworkInterfaces"`
	// An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
	PublicNetworkInterface *VPCRouterPublicNetworkInterface `pulumi:"publicNetworkInterface"`
	// One or more `siteToSiteVpn` blocks as defined below.
	SiteToSiteVpns []VPCRouterSiteToSiteVpn `pulumi:"siteToSiteVpns"`
	// One or more `staticNat` blocks as defined below.
	StaticNats []VPCRouterStaticNat `pulumi:"staticNats"`
	// One or more `staticRoute` blocks as defined below.
	StaticRoutes []VPCRouterStaticRoute `pulumi:"staticRoutes"`
	// The ip address of the syslog host to which the VPC Router sends logs.
	SyslogHost *string `pulumi:"syslogHost"`
	// Any tags to assign to the VPCRouter.
	Tags []string `pulumi:"tags"`
	// One or more `user` blocks as defined below.
	Users []VPCRouterUser `pulumi:"users"`
	// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
	Version *int `pulumi:"version"`
	// A `wireGuard` block as defined below.
	WireGuard *VPCRouterWireGuard `pulumi:"wireGuard"`
	// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a VPCRouter resource.
type VPCRouterArgs struct {
	// The description of the expression. The length of this value must be in the range [`0`-`512`].
	Description pulumi.StringPtrInput
	// One or more `dhcpServer` blocks as defined below.
	DhcpServers VPCRouterDhcpServerArrayInput
	// One or more `dhcpStaticMapping` blocks as defined below.
	DhcpStaticMappings VPCRouterDhcpStaticMappingArrayInput
	// One or more `firewall` blocks as defined below.
	Firewalls VPCRouterFirewallArrayInput
	// The icon id to attach to the VPCRouter.
	IconId pulumi.StringPtrInput
	// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
	InternetConnection pulumi.BoolPtrInput
	// A `l2tp` block as defined below.
	L2tp VPCRouterL2tpPtrInput
	// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
	Plan pulumi.StringPtrInput
	// One or more `portForwarding` blocks as defined below.
	PortForwardings VPCRouterPortForwardingArrayInput
	// A `pptp` block as defined below.
	Pptp VPCRouterPptpPtrInput
	// A list of additional network interface setting. This doesn't include primary network interface setting.
	PrivateNetworkInterfaces VPCRouterPrivateNetworkInterfaceArrayInput
	// An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
	PublicNetworkInterface VPCRouterPublicNetworkInterfacePtrInput
	// One or more `siteToSiteVpn` blocks as defined below.
	SiteToSiteVpns VPCRouterSiteToSiteVpnArrayInput
	// One or more `staticNat` blocks as defined below.
	StaticNats VPCRouterStaticNatArrayInput
	// One or more `staticRoute` blocks as defined below.
	StaticRoutes VPCRouterStaticRouteArrayInput
	// The ip address of the syslog host to which the VPC Router sends logs.
	SyslogHost pulumi.StringPtrInput
	// Any tags to assign to the VPCRouter.
	Tags pulumi.StringArrayInput
	// One or more `user` blocks as defined below.
	Users VPCRouterUserArrayInput
	// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
	Version pulumi.IntPtrInput
	// A `wireGuard` block as defined below.
	WireGuard VPCRouterWireGuardPtrInput
	// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (VPCRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcrouterArgs)(nil)).Elem()
}

type VPCRouterInput interface {
	pulumi.Input

	ToVPCRouterOutput() VPCRouterOutput
	ToVPCRouterOutputWithContext(ctx context.Context) VPCRouterOutput
}

func (*VPCRouter) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCRouter)(nil))
}

func (i *VPCRouter) ToVPCRouterOutput() VPCRouterOutput {
	return i.ToVPCRouterOutputWithContext(context.Background())
}

func (i *VPCRouter) ToVPCRouterOutputWithContext(ctx context.Context) VPCRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouterOutput)
}

func (i *VPCRouter) ToVPCRouterPtrOutput() VPCRouterPtrOutput {
	return i.ToVPCRouterPtrOutputWithContext(context.Background())
}

func (i *VPCRouter) ToVPCRouterPtrOutputWithContext(ctx context.Context) VPCRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouterPtrOutput)
}

type VPCRouterPtrInput interface {
	pulumi.Input

	ToVPCRouterPtrOutput() VPCRouterPtrOutput
	ToVPCRouterPtrOutputWithContext(ctx context.Context) VPCRouterPtrOutput
}

type vpcrouterPtrType VPCRouterArgs

func (*vpcrouterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCRouter)(nil))
}

func (i *vpcrouterPtrType) ToVPCRouterPtrOutput() VPCRouterPtrOutput {
	return i.ToVPCRouterPtrOutputWithContext(context.Background())
}

func (i *vpcrouterPtrType) ToVPCRouterPtrOutputWithContext(ctx context.Context) VPCRouterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouterPtrOutput)
}

// VPCRouterArrayInput is an input type that accepts VPCRouterArray and VPCRouterArrayOutput values.
// You can construct a concrete instance of `VPCRouterArrayInput` via:
//
//          VPCRouterArray{ VPCRouterArgs{...} }
type VPCRouterArrayInput interface {
	pulumi.Input

	ToVPCRouterArrayOutput() VPCRouterArrayOutput
	ToVPCRouterArrayOutputWithContext(context.Context) VPCRouterArrayOutput
}

type VPCRouterArray []VPCRouterInput

func (VPCRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*VPCRouter)(nil))
}

func (i VPCRouterArray) ToVPCRouterArrayOutput() VPCRouterArrayOutput {
	return i.ToVPCRouterArrayOutputWithContext(context.Background())
}

func (i VPCRouterArray) ToVPCRouterArrayOutputWithContext(ctx context.Context) VPCRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouterArrayOutput)
}

// VPCRouterMapInput is an input type that accepts VPCRouterMap and VPCRouterMapOutput values.
// You can construct a concrete instance of `VPCRouterMapInput` via:
//
//          VPCRouterMap{ "key": VPCRouterArgs{...} }
type VPCRouterMapInput interface {
	pulumi.Input

	ToVPCRouterMapOutput() VPCRouterMapOutput
	ToVPCRouterMapOutputWithContext(context.Context) VPCRouterMapOutput
}

type VPCRouterMap map[string]VPCRouterInput

func (VPCRouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*VPCRouter)(nil))
}

func (i VPCRouterMap) ToVPCRouterMapOutput() VPCRouterMapOutput {
	return i.ToVPCRouterMapOutputWithContext(context.Background())
}

func (i VPCRouterMap) ToVPCRouterMapOutputWithContext(ctx context.Context) VPCRouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VPCRouterMapOutput)
}

type VPCRouterOutput struct {
	*pulumi.OutputState
}

func (VPCRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VPCRouter)(nil))
}

func (o VPCRouterOutput) ToVPCRouterOutput() VPCRouterOutput {
	return o
}

func (o VPCRouterOutput) ToVPCRouterOutputWithContext(ctx context.Context) VPCRouterOutput {
	return o
}

func (o VPCRouterOutput) ToVPCRouterPtrOutput() VPCRouterPtrOutput {
	return o.ToVPCRouterPtrOutputWithContext(context.Background())
}

func (o VPCRouterOutput) ToVPCRouterPtrOutputWithContext(ctx context.Context) VPCRouterPtrOutput {
	return o.ApplyT(func(v VPCRouter) *VPCRouter {
		return &v
	}).(VPCRouterPtrOutput)
}

type VPCRouterPtrOutput struct {
	*pulumi.OutputState
}

func (VPCRouterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VPCRouter)(nil))
}

func (o VPCRouterPtrOutput) ToVPCRouterPtrOutput() VPCRouterPtrOutput {
	return o
}

func (o VPCRouterPtrOutput) ToVPCRouterPtrOutputWithContext(ctx context.Context) VPCRouterPtrOutput {
	return o
}

type VPCRouterArrayOutput struct{ *pulumi.OutputState }

func (VPCRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VPCRouter)(nil))
}

func (o VPCRouterArrayOutput) ToVPCRouterArrayOutput() VPCRouterArrayOutput {
	return o
}

func (o VPCRouterArrayOutput) ToVPCRouterArrayOutputWithContext(ctx context.Context) VPCRouterArrayOutput {
	return o
}

func (o VPCRouterArrayOutput) Index(i pulumi.IntInput) VPCRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VPCRouter {
		return vs[0].([]VPCRouter)[vs[1].(int)]
	}).(VPCRouterOutput)
}

type VPCRouterMapOutput struct{ *pulumi.OutputState }

func (VPCRouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VPCRouter)(nil))
}

func (o VPCRouterMapOutput) ToVPCRouterMapOutput() VPCRouterMapOutput {
	return o
}

func (o VPCRouterMapOutput) ToVPCRouterMapOutputWithContext(ctx context.Context) VPCRouterMapOutput {
	return o
}

func (o VPCRouterMapOutput) MapIndex(k pulumi.StringInput) VPCRouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VPCRouter {
		return vs[0].(map[string]VPCRouter)[vs[1].(string)]
	}).(VPCRouterOutput)
}

func init() {
	pulumi.RegisterOutputType(VPCRouterOutput{})
	pulumi.RegisterOutputType(VPCRouterPtrOutput{})
	pulumi.RegisterOutputType(VPCRouterArrayOutput{})
	pulumi.RegisterOutputType(VPCRouterMapOutput{})
}
