// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about an existing Subnet.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		cfg := config.New(ctx, "")
// 		internetId := cfg.RequireObject("internetId")
// 		_, err := sakuracloud.LookupSubnet(ctx, &GetSubnetArgs{
// 			InternetId: internetId,
// 			Index:      1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	var rv LookupSubnetResult
	err := ctx.Invoke("sakuracloud:index/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	// The index of the subnet in assigned to the Switch+Router. Changing this forces a new resource to be created.
	Index int `pulumi:"index"`
	// The id of the switch+router resource that the Subnet belongs. Changing this forces a new resource to be created.
	InternetId string `pulumi:"internetId"`
	// The name of zone that the Subnet is in (e.g. `is1a`, `tk1a`).
	Zone *string `pulumi:"zone"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	Index      int    `pulumi:"index"`
	InternetId string `pulumi:"internetId"`
	// A list of assigned global address to the Subnet.
	IpAddresses []string `pulumi:"ipAddresses"`
	// Maximum IP address in assigned global addresses to the Subnet.
	MaxIpAddress string `pulumi:"maxIpAddress"`
	// Minimum IP address in assigned global addresses to the Subnet.
	MinIpAddress string `pulumi:"minIpAddress"`
	// The bit length of the subnet assigned to the Subnet.
	Netmask int `pulumi:"netmask"`
	// The IPv4 network address assigned to the Subnet.
	NetworkAddress string `pulumi:"networkAddress"`
	// The ip address of the next-hop at the Subnet.
	NextHop string `pulumi:"nextHop"`
	// The id of the switch connected from the Subnet.
	SwitchId string `pulumi:"switchId"`
	Zone     string `pulumi:"zone"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubnetResult, error) {
			args := v.(LookupSubnetArgs)
			r, err := LookupSubnet(ctx, &args, opts...)
			return *r, err
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	// The index of the subnet in assigned to the Switch+Router. Changing this forces a new resource to be created.
	Index pulumi.IntInput `pulumi:"index"`
	// The id of the switch+router resource that the Subnet belongs. Changing this forces a new resource to be created.
	InternetId pulumi.StringInput `pulumi:"internetId"`
	// The name of zone that the Subnet is in (e.g. `is1a`, `tk1a`).
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.Index }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) InternetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.InternetId }).(pulumi.StringOutput)
}

// A list of assigned global address to the Subnet.
func (o LookupSubnetResultOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Maximum IP address in assigned global addresses to the Subnet.
func (o LookupSubnetResultOutput) MaxIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.MaxIpAddress }).(pulumi.StringOutput)
}

// Minimum IP address in assigned global addresses to the Subnet.
func (o LookupSubnetResultOutput) MinIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.MinIpAddress }).(pulumi.StringOutput)
}

// The bit length of the subnet assigned to the Subnet.
func (o LookupSubnetResultOutput) Netmask() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.Netmask }).(pulumi.IntOutput)
}

// The IPv4 network address assigned to the Subnet.
func (o LookupSubnetResultOutput) NetworkAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.NetworkAddress }).(pulumi.StringOutput)
}

// The ip address of the next-hop at the Subnet.
func (o LookupSubnetResultOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.NextHop }).(pulumi.StringOutput)
}

// The id of the switch connected from the Subnet.
func (o LookupSubnetResultOutput) SwitchId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SwitchId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Zone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
