// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SIM struct {
	pulumi.CustomResourceState

	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`
	Carriers pulumi.StringArrayOutput `pulumi:"carriers"`
	// The description of the SIM. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The flag to enable the SIM
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// ICCID(Integrated Circuit Card ID) assigned to the SIM
	Iccid pulumi.StringOutput `pulumi:"iccid"`
	// The icon id to attach to the SIM
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The id of the device to restrict devices that can use the SIM
	Imei pulumi.StringPtrOutput `pulumi:"imei"`
	// The IP address assigned to the SIM
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The id of the MobileGateway which the SIM is assigned
	MobileGatewayId pulumi.StringOutput `pulumi:"mobileGatewayId"`
	// The name of the SIM. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringOutput `pulumi:"name"`
	// The passcord to authenticate the SIM
	Passcode pulumi.StringOutput `pulumi:"passcode"`
	// Any tags to assign to the SIM
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewSIM registers a new resource with the given unique name, arguments, and options.
func NewSIM(ctx *pulumi.Context,
	name string, args *SIMArgs, opts ...pulumi.ResourceOption) (*SIM, error) {
	if args == nil || args.Carriers == nil {
		return nil, errors.New("missing required argument 'Carriers'")
	}
	if args == nil || args.Iccid == nil {
		return nil, errors.New("missing required argument 'Iccid'")
	}
	if args == nil || args.Passcode == nil {
		return nil, errors.New("missing required argument 'Passcode'")
	}
	if args == nil {
		args = &SIMArgs{}
	}
	var resource SIM
	err := ctx.RegisterResource("sakuracloud:index/sIM:SIM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSIM gets an existing SIM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSIM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SIMState, opts ...pulumi.ResourceOption) (*SIM, error) {
	var resource SIM
	err := ctx.ReadResource("sakuracloud:index/sIM:SIM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SIM resources.
type simState struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`
	Carriers []string `pulumi:"carriers"`
	// The description of the SIM. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The flag to enable the SIM
	Enabled *bool `pulumi:"enabled"`
	// ICCID(Integrated Circuit Card ID) assigned to the SIM
	Iccid *string `pulumi:"iccid"`
	// The icon id to attach to the SIM
	IconId *string `pulumi:"iconId"`
	// The id of the device to restrict devices that can use the SIM
	Imei *string `pulumi:"imei"`
	// The IP address assigned to the SIM
	IpAddress *string `pulumi:"ipAddress"`
	// The id of the MobileGateway which the SIM is assigned
	MobileGatewayId *string `pulumi:"mobileGatewayId"`
	// The name of the SIM. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The passcord to authenticate the SIM
	Passcode *string `pulumi:"passcode"`
	// Any tags to assign to the SIM
	Tags []string `pulumi:"tags"`
}

type SIMState struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`
	Carriers pulumi.StringArrayInput
	// The description of the SIM. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The flag to enable the SIM
	Enabled pulumi.BoolPtrInput
	// ICCID(Integrated Circuit Card ID) assigned to the SIM
	Iccid pulumi.StringPtrInput
	// The icon id to attach to the SIM
	IconId pulumi.StringPtrInput
	// The id of the device to restrict devices that can use the SIM
	Imei pulumi.StringPtrInput
	// The IP address assigned to the SIM
	IpAddress pulumi.StringPtrInput
	// The id of the MobileGateway which the SIM is assigned
	MobileGatewayId pulumi.StringPtrInput
	// The name of the SIM. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The passcord to authenticate the SIM
	Passcode pulumi.StringPtrInput
	// Any tags to assign to the SIM
	Tags pulumi.StringArrayInput
}

func (SIMState) ElementType() reflect.Type {
	return reflect.TypeOf((*simState)(nil)).Elem()
}

type simArgs struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`
	Carriers []string `pulumi:"carriers"`
	// The description of the SIM. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The flag to enable the SIM
	Enabled *bool `pulumi:"enabled"`
	// ICCID(Integrated Circuit Card ID) assigned to the SIM
	Iccid string `pulumi:"iccid"`
	// The icon id to attach to the SIM
	IconId *string `pulumi:"iconId"`
	// The id of the device to restrict devices that can use the SIM
	Imei *string `pulumi:"imei"`
	// The name of the SIM. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The passcord to authenticate the SIM
	Passcode string `pulumi:"passcode"`
	// Any tags to assign to the SIM
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a SIM resource.
type SIMArgs struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`
	Carriers pulumi.StringArrayInput
	// The description of the SIM. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The flag to enable the SIM
	Enabled pulumi.BoolPtrInput
	// ICCID(Integrated Circuit Card ID) assigned to the SIM
	Iccid pulumi.StringInput
	// The icon id to attach to the SIM
	IconId pulumi.StringPtrInput
	// The id of the device to restrict devices that can use the SIM
	Imei pulumi.StringPtrInput
	// The name of the SIM. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The passcord to authenticate the SIM
	Passcode pulumi.StringInput
	// Any tags to assign to the SIM
	Tags pulumi.StringArrayInput
}

func (SIMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*simArgs)(nil)).Elem()
}

