// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud SIM.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewSIM(ctx, "foobar", &sakuracloud.SIMArgs{
// 			Carriers: pulumi.StringArray{
// 				pulumi.String("softbank"),
// 				pulumi.String("docomo"),
// 				pulumi.String("kddi"),
// 			},
// 			Description: pulumi.String("description"),
// 			Enabled:     pulumi.Bool(true),
// 			Iccid:       pulumi.String("your-iccid"),
// 			Passcode:    pulumi.String("your-password"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("tag1"),
// 				pulumi.String("tag2"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type SIM struct {
	pulumi.CustomResourceState

	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.
	Carriers pulumi.StringArrayOutput `pulumi:"carriers"`
	// The description of the SIM. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The flag to enable the SIM. Default:`true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.
	Iccid pulumi.StringOutput `pulumi:"iccid"`
	// The icon id to attach to the SIM.
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The id of the device to restrict devices that can use the SIM.
	Imei pulumi.StringPtrOutput `pulumi:"imei"`
	// The IP address assigned to the SIM.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The id of the MobileGateway which the SIM is assigned.
	MobileGatewayId pulumi.StringOutput `pulumi:"mobileGatewayId"`
	// The name of the SIM. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The passcord to authenticate the SIM. Changing this forces a new resource to be created.
	Passcode pulumi.StringOutput `pulumi:"passcode"`
	// Any tags to assign to the SIM.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewSIM registers a new resource with the given unique name, arguments, and options.
func NewSIM(ctx *pulumi.Context,
	name string, args *SIMArgs, opts ...pulumi.ResourceOption) (*SIM, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Carriers == nil {
		return nil, errors.New("invalid value for required argument 'Carriers'")
	}
	if args.Iccid == nil {
		return nil, errors.New("invalid value for required argument 'Iccid'")
	}
	if args.Passcode == nil {
		return nil, errors.New("invalid value for required argument 'Passcode'")
	}
	var resource SIM
	err := ctx.RegisterResource("sakuracloud:index/sIM:SIM", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSIM gets an existing SIM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSIM(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SIMState, opts ...pulumi.ResourceOption) (*SIM, error) {
	var resource SIM
	err := ctx.ReadResource("sakuracloud:index/sIM:SIM", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SIM resources.
type simState struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.
	Carriers []string `pulumi:"carriers"`
	// The description of the SIM. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The flag to enable the SIM. Default:`true`.
	Enabled *bool `pulumi:"enabled"`
	// ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.
	Iccid *string `pulumi:"iccid"`
	// The icon id to attach to the SIM.
	IconId *string `pulumi:"iconId"`
	// The id of the device to restrict devices that can use the SIM.
	Imei *string `pulumi:"imei"`
	// The IP address assigned to the SIM.
	IpAddress *string `pulumi:"ipAddress"`
	// The id of the MobileGateway which the SIM is assigned.
	MobileGatewayId *string `pulumi:"mobileGatewayId"`
	// The name of the SIM. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The passcord to authenticate the SIM. Changing this forces a new resource to be created.
	Passcode *string `pulumi:"passcode"`
	// Any tags to assign to the SIM.
	Tags []string `pulumi:"tags"`
}

type SIMState struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.
	Carriers pulumi.StringArrayInput
	// The description of the SIM. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The flag to enable the SIM. Default:`true`.
	Enabled pulumi.BoolPtrInput
	// ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.
	Iccid pulumi.StringPtrInput
	// The icon id to attach to the SIM.
	IconId pulumi.StringPtrInput
	// The id of the device to restrict devices that can use the SIM.
	Imei pulumi.StringPtrInput
	// The IP address assigned to the SIM.
	IpAddress pulumi.StringPtrInput
	// The id of the MobileGateway which the SIM is assigned.
	MobileGatewayId pulumi.StringPtrInput
	// The name of the SIM. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The passcord to authenticate the SIM. Changing this forces a new resource to be created.
	Passcode pulumi.StringPtrInput
	// Any tags to assign to the SIM.
	Tags pulumi.StringArrayInput
}

func (SIMState) ElementType() reflect.Type {
	return reflect.TypeOf((*simState)(nil)).Elem()
}

type simArgs struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.
	Carriers []string `pulumi:"carriers"`
	// The description of the SIM. The length of this value must be in the range [`1`-`512`].
	Description *string `pulumi:"description"`
	// The flag to enable the SIM. Default:`true`.
	Enabled *bool `pulumi:"enabled"`
	// ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.
	Iccid string `pulumi:"iccid"`
	// The icon id to attach to the SIM.
	IconId *string `pulumi:"iconId"`
	// The id of the device to restrict devices that can use the SIM.
	Imei *string `pulumi:"imei"`
	// The name of the SIM. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The passcord to authenticate the SIM. Changing this forces a new resource to be created.
	Passcode string `pulumi:"passcode"`
	// Any tags to assign to the SIM.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a SIM resource.
type SIMArgs struct {
	// A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.
	Carriers pulumi.StringArrayInput
	// The description of the SIM. The length of this value must be in the range [`1`-`512`].
	Description pulumi.StringPtrInput
	// The flag to enable the SIM. Default:`true`.
	Enabled pulumi.BoolPtrInput
	// ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.
	Iccid pulumi.StringInput
	// The icon id to attach to the SIM.
	IconId pulumi.StringPtrInput
	// The id of the device to restrict devices that can use the SIM.
	Imei pulumi.StringPtrInput
	// The name of the SIM. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The passcord to authenticate the SIM. Changing this forces a new resource to be created.
	Passcode pulumi.StringInput
	// Any tags to assign to the SIM.
	Tags pulumi.StringArrayInput
}

func (SIMArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*simArgs)(nil)).Elem()
}

type SIMInput interface {
	pulumi.Input

	ToSIMOutput() SIMOutput
	ToSIMOutputWithContext(ctx context.Context) SIMOutput
}

func (*SIM) ElementType() reflect.Type {
	return reflect.TypeOf((*SIM)(nil))
}

func (i *SIM) ToSIMOutput() SIMOutput {
	return i.ToSIMOutputWithContext(context.Background())
}

func (i *SIM) ToSIMOutputWithContext(ctx context.Context) SIMOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SIMOutput)
}

func (i *SIM) ToSIMPtrOutput() SIMPtrOutput {
	return i.ToSIMPtrOutputWithContext(context.Background())
}

func (i *SIM) ToSIMPtrOutputWithContext(ctx context.Context) SIMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SIMPtrOutput)
}

type SIMPtrInput interface {
	pulumi.Input

	ToSIMPtrOutput() SIMPtrOutput
	ToSIMPtrOutputWithContext(ctx context.Context) SIMPtrOutput
}

type simPtrType SIMArgs

func (*simPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SIM)(nil))
}

func (i *simPtrType) ToSIMPtrOutput() SIMPtrOutput {
	return i.ToSIMPtrOutputWithContext(context.Background())
}

func (i *simPtrType) ToSIMPtrOutputWithContext(ctx context.Context) SIMPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SIMPtrOutput)
}

// SIMArrayInput is an input type that accepts SIMArray and SIMArrayOutput values.
// You can construct a concrete instance of `SIMArrayInput` via:
//
//          SIMArray{ SIMArgs{...} }
type SIMArrayInput interface {
	pulumi.Input

	ToSIMArrayOutput() SIMArrayOutput
	ToSIMArrayOutputWithContext(context.Context) SIMArrayOutput
}

type SIMArray []SIMInput

func (SIMArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SIM)(nil))
}

func (i SIMArray) ToSIMArrayOutput() SIMArrayOutput {
	return i.ToSIMArrayOutputWithContext(context.Background())
}

func (i SIMArray) ToSIMArrayOutputWithContext(ctx context.Context) SIMArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SIMArrayOutput)
}

// SIMMapInput is an input type that accepts SIMMap and SIMMapOutput values.
// You can construct a concrete instance of `SIMMapInput` via:
//
//          SIMMap{ "key": SIMArgs{...} }
type SIMMapInput interface {
	pulumi.Input

	ToSIMMapOutput() SIMMapOutput
	ToSIMMapOutputWithContext(context.Context) SIMMapOutput
}

type SIMMap map[string]SIMInput

func (SIMMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SIM)(nil))
}

func (i SIMMap) ToSIMMapOutput() SIMMapOutput {
	return i.ToSIMMapOutputWithContext(context.Background())
}

func (i SIMMap) ToSIMMapOutputWithContext(ctx context.Context) SIMMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SIMMapOutput)
}

type SIMOutput struct {
	*pulumi.OutputState
}

func (SIMOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SIM)(nil))
}

func (o SIMOutput) ToSIMOutput() SIMOutput {
	return o
}

func (o SIMOutput) ToSIMOutputWithContext(ctx context.Context) SIMOutput {
	return o
}

func (o SIMOutput) ToSIMPtrOutput() SIMPtrOutput {
	return o.ToSIMPtrOutputWithContext(context.Background())
}

func (o SIMOutput) ToSIMPtrOutputWithContext(ctx context.Context) SIMPtrOutput {
	return o.ApplyT(func(v SIM) *SIM {
		return &v
	}).(SIMPtrOutput)
}

type SIMPtrOutput struct {
	*pulumi.OutputState
}

func (SIMPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SIM)(nil))
}

func (o SIMPtrOutput) ToSIMPtrOutput() SIMPtrOutput {
	return o
}

func (o SIMPtrOutput) ToSIMPtrOutputWithContext(ctx context.Context) SIMPtrOutput {
	return o
}

type SIMArrayOutput struct{ *pulumi.OutputState }

func (SIMArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SIM)(nil))
}

func (o SIMArrayOutput) ToSIMArrayOutput() SIMArrayOutput {
	return o
}

func (o SIMArrayOutput) ToSIMArrayOutputWithContext(ctx context.Context) SIMArrayOutput {
	return o
}

func (o SIMArrayOutput) Index(i pulumi.IntInput) SIMOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SIM {
		return vs[0].([]SIM)[vs[1].(int)]
	}).(SIMOutput)
}

type SIMMapOutput struct{ *pulumi.OutputState }

func (SIMMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SIM)(nil))
}

func (o SIMMapOutput) ToSIMMapOutput() SIMMapOutput {
	return o
}

func (o SIMMapOutput) ToSIMMapOutputWithContext(ctx context.Context) SIMMapOutput {
	return o
}

func (o SIMMapOutput) MapIndex(k pulumi.StringInput) SIMOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SIM {
		return vs[0].(map[string]SIM)[vs[1].(string)]
	}).(SIMOutput)
}

func init() {
	pulumi.RegisterOutputType(SIMOutput{})
	pulumi.RegisterOutputType(SIMPtrOutput{})
	pulumi.RegisterOutputType(SIMArrayOutput{})
	pulumi.RegisterOutputType(SIMMapOutput{})
}
