// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud SIM resource. This can be used to create, update, and delete SIMs.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/sim.html.markdown.
type SIM struct {
	s *pulumi.ResourceState
}

// NewSIM registers a new resource with the given unique name, arguments, and options.
func NewSIM(ctx *pulumi.Context,
	name string, args *SIMArgs, opts ...pulumi.ResourceOpt) (*SIM, error) {
	if args == nil || args.Carriers == nil {
		return nil, errors.New("missing required argument 'Carriers'")
	}
	if args == nil || args.Iccid == nil {
		return nil, errors.New("missing required argument 'Iccid'")
	}
	if args == nil || args.Passcode == nil {
		return nil, errors.New("missing required argument 'Passcode'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["carriers"] = nil
		inputs["description"] = nil
		inputs["enabled"] = nil
		inputs["iccid"] = nil
		inputs["iconId"] = nil
		inputs["imei"] = nil
		inputs["ipaddress"] = nil
		inputs["mobileGatewayId"] = nil
		inputs["name"] = nil
		inputs["passcode"] = nil
		inputs["tags"] = nil
	} else {
		inputs["carriers"] = args.Carriers
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["iccid"] = args.Iccid
		inputs["iconId"] = args.IconId
		inputs["imei"] = args.Imei
		inputs["ipaddress"] = args.Ipaddress
		inputs["mobileGatewayId"] = args.MobileGatewayId
		inputs["name"] = args.Name
		inputs["passcode"] = args.Passcode
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("sakuracloud:index/sIM:SIM", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SIM{s: s}, nil
}

// GetSIM gets an existing SIM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSIM(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SIMState, opts ...pulumi.ResourceOpt) (*SIM, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["carriers"] = state.Carriers
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["iccid"] = state.Iccid
		inputs["iconId"] = state.IconId
		inputs["imei"] = state.Imei
		inputs["ipaddress"] = state.Ipaddress
		inputs["mobileGatewayId"] = state.MobileGatewayId
		inputs["name"] = state.Name
		inputs["passcode"] = state.Passcode
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("sakuracloud:index/sIM:SIM", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SIM{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SIM) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SIM) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The list of Carrier name.  
// Valid values are in followings: [ "docomo" / "kddi" / "softbank"]
func (r *SIM) Carriers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["carriers"])
}

// The description of the resource.
func (r *SIM) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The flag of enable/disable the Server.
func (r *SIM) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The ICCID of the SIM.  
func (r *SIM) Iccid() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iccid"])
}

// The ID of the icon.
func (r *SIM) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The IMEI of the device that allows communication.
func (r *SIM) Imei() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imei"])
}

// The IP address of the SIM. Used when connect to mobile gateway.
func (r *SIM) Ipaddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress"])
}

// The ID of the Mobile Gateway to which the SIM belongs.
func (r *SIM) MobileGatewayId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mobileGatewayId"])
}

// The name of the resource.
func (r *SIM) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The Passcode of the SIM.  
func (r *SIM) Passcode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["passcode"])
}

// The tag list of the resources.
func (r *SIM) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering SIM resources.
type SIMState struct {
	// The list of Carrier name.  
	// Valid values are in followings: [ "docomo" / "kddi" / "softbank"]
	Carriers interface{}
	// The description of the resource.
	Description interface{}
	// The flag of enable/disable the Server.
	Enabled interface{}
	// The ICCID of the SIM.  
	Iccid interface{}
	// The ID of the icon.
	IconId interface{}
	// The IMEI of the device that allows communication.
	Imei interface{}
	// The IP address of the SIM. Used when connect to mobile gateway.
	Ipaddress interface{}
	// The ID of the Mobile Gateway to which the SIM belongs.
	MobileGatewayId interface{}
	// The name of the resource.
	Name interface{}
	// The Passcode of the SIM.  
	Passcode interface{}
	// The tag list of the resources.
	Tags interface{}
}

// The set of arguments for constructing a SIM resource.
type SIMArgs struct {
	// The list of Carrier name.  
	// Valid values are in followings: [ "docomo" / "kddi" / "softbank"]
	Carriers interface{}
	// The description of the resource.
	Description interface{}
	// The flag of enable/disable the Server.
	Enabled interface{}
	// The ICCID of the SIM.  
	Iccid interface{}
	// The ID of the icon.
	IconId interface{}
	// The IMEI of the device that allows communication.
	Imei interface{}
	// The IP address of the SIM. Used when connect to mobile gateway.
	Ipaddress interface{}
	// The ID of the Mobile Gateway to which the SIM belongs.
	MobileGatewayId interface{}
	// The name of the resource.
	Name interface{}
	// The Passcode of the SIM.  
	Passcode interface{}
	// The tag list of the resources.
	Tags interface{}
}
