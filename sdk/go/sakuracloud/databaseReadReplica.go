// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type DatabaseReadReplica struct {
	pulumi.CustomResourceState

	// The description of the read-replica database. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The icon id to attach to the read-replica database
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The id of the replication master database
	MasterId pulumi.StringOutput `pulumi:"masterId"`
	// The name of the read-replica database. The length of this value must be in the range [`1`-`64`]
	Name             pulumi.StringOutput                       `pulumi:"name"`
	NetworkInterface DatabaseReadReplicaNetworkInterfaceOutput `pulumi:"networkInterface"`
	// Any tags to assign to the read-replica database
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The name of zone that the read-replica database will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDatabaseReadReplica registers a new resource with the given unique name, arguments, and options.
func NewDatabaseReadReplica(ctx *pulumi.Context,
	name string, args *DatabaseReadReplicaArgs, opts ...pulumi.ResourceOption) (*DatabaseReadReplica, error) {
	if args == nil || args.MasterId == nil {
		return nil, errors.New("missing required argument 'MasterId'")
	}
	if args == nil || args.NetworkInterface == nil {
		return nil, errors.New("missing required argument 'NetworkInterface'")
	}
	if args == nil {
		args = &DatabaseReadReplicaArgs{}
	}
	var resource DatabaseReadReplica
	err := ctx.RegisterResource("sakuracloud:index/databaseReadReplica:DatabaseReadReplica", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseReadReplica gets an existing DatabaseReadReplica resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseReadReplica(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseReadReplicaState, opts ...pulumi.ResourceOption) (*DatabaseReadReplica, error) {
	var resource DatabaseReadReplica
	err := ctx.ReadResource("sakuracloud:index/databaseReadReplica:DatabaseReadReplica", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseReadReplica resources.
type databaseReadReplicaState struct {
	// The description of the read-replica database. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The icon id to attach to the read-replica database
	IconId *string `pulumi:"iconId"`
	// The id of the replication master database
	MasterId *string `pulumi:"masterId"`
	// The name of the read-replica database. The length of this value must be in the range [`1`-`64`]
	Name             *string                              `pulumi:"name"`
	NetworkInterface *DatabaseReadReplicaNetworkInterface `pulumi:"networkInterface"`
	// Any tags to assign to the read-replica database
	Tags []string `pulumi:"tags"`
	// The name of zone that the read-replica database will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

type DatabaseReadReplicaState struct {
	// The description of the read-replica database. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The icon id to attach to the read-replica database
	IconId pulumi.StringPtrInput
	// The id of the replication master database
	MasterId pulumi.StringPtrInput
	// The name of the read-replica database. The length of this value must be in the range [`1`-`64`]
	Name             pulumi.StringPtrInput
	NetworkInterface DatabaseReadReplicaNetworkInterfacePtrInput
	// Any tags to assign to the read-replica database
	Tags pulumi.StringArrayInput
	// The name of zone that the read-replica database will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (DatabaseReadReplicaState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseReadReplicaState)(nil)).Elem()
}

type databaseReadReplicaArgs struct {
	// The description of the read-replica database. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The icon id to attach to the read-replica database
	IconId *string `pulumi:"iconId"`
	// The id of the replication master database
	MasterId string `pulumi:"masterId"`
	// The name of the read-replica database. The length of this value must be in the range [`1`-`64`]
	Name             *string                             `pulumi:"name"`
	NetworkInterface DatabaseReadReplicaNetworkInterface `pulumi:"networkInterface"`
	// Any tags to assign to the read-replica database
	Tags []string `pulumi:"tags"`
	// The name of zone that the read-replica database will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a DatabaseReadReplica resource.
type DatabaseReadReplicaArgs struct {
	// The description of the read-replica database. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The icon id to attach to the read-replica database
	IconId pulumi.StringPtrInput
	// The id of the replication master database
	MasterId pulumi.StringInput
	// The name of the read-replica database. The length of this value must be in the range [`1`-`64`]
	Name             pulumi.StringPtrInput
	NetworkInterface DatabaseReadReplicaNetworkInterfaceInput
	// Any tags to assign to the read-replica database
	Tags pulumi.StringArrayInput
	// The name of zone that the read-replica database will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (DatabaseReadReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseReadReplicaArgs)(nil)).Elem()
}
