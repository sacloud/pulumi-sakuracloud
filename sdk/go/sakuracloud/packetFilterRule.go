// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type PacketFilterRule struct {
	pulumi.CustomResourceState

	Expressions PacketFilterRuleExpressionArrayOutput `pulumi:"expressions"`
	// The id of the packet filter that set expressions to
	PacketFilterId pulumi.StringOutput `pulumi:"packetFilterId"`
	// The name of zone that the PacketFilter Rule will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPacketFilterRule registers a new resource with the given unique name, arguments, and options.
func NewPacketFilterRule(ctx *pulumi.Context,
	name string, args *PacketFilterRuleArgs, opts ...pulumi.ResourceOption) (*PacketFilterRule, error) {
	if args == nil || args.PacketFilterId == nil {
		return nil, errors.New("missing required argument 'PacketFilterId'")
	}
	if args == nil {
		args = &PacketFilterRuleArgs{}
	}
	var resource PacketFilterRule
	err := ctx.RegisterResource("sakuracloud:index/packetFilterRule:PacketFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPacketFilterRule gets an existing PacketFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPacketFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PacketFilterRuleState, opts ...pulumi.ResourceOption) (*PacketFilterRule, error) {
	var resource PacketFilterRule
	err := ctx.ReadResource("sakuracloud:index/packetFilterRule:PacketFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PacketFilterRule resources.
type packetFilterRuleState struct {
	Expressions []PacketFilterRuleExpression `pulumi:"expressions"`
	// The id of the packet filter that set expressions to
	PacketFilterId *string `pulumi:"packetFilterId"`
	// The name of zone that the PacketFilter Rule will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

type PacketFilterRuleState struct {
	Expressions PacketFilterRuleExpressionArrayInput
	// The id of the packet filter that set expressions to
	PacketFilterId pulumi.StringPtrInput
	// The name of zone that the PacketFilter Rule will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (PacketFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*packetFilterRuleState)(nil)).Elem()
}

type packetFilterRuleArgs struct {
	Expressions []PacketFilterRuleExpression `pulumi:"expressions"`
	// The id of the packet filter that set expressions to
	PacketFilterId string `pulumi:"packetFilterId"`
	// The name of zone that the PacketFilter Rule will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PacketFilterRule resource.
type PacketFilterRuleArgs struct {
	Expressions PacketFilterRuleExpressionArrayInput
	// The id of the packet filter that set expressions to
	PacketFilterId pulumi.StringInput
	// The name of zone that the PacketFilter Rule will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (PacketFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packetFilterRuleArgs)(nil)).Elem()
}

