// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud Packet Filter Rule resource. This can be used to create, update, and delete Packet Filter Rules.
// 
// ## Import (not supported)
// 
// Import of Packet Filter Rule is not supported.
//
// > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/packet_filter_rule.html.markdown.
type PacketFilterRule struct {
	s *pulumi.ResourceState
}

// NewPacketFilterRule registers a new resource with the given unique name, arguments, and options.
func NewPacketFilterRule(ctx *pulumi.Context,
	name string, args *PacketFilterRuleArgs, opts ...pulumi.ResourceOpt) (*PacketFilterRule, error) {
	if args == nil || args.PacketFilterId == nil {
		return nil, errors.New("missing required argument 'PacketFilterId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allow"] = nil
		inputs["description"] = nil
		inputs["destPort"] = nil
		inputs["order"] = nil
		inputs["packetFilterId"] = nil
		inputs["protocol"] = nil
		inputs["sourceNw"] = nil
		inputs["sourcePort"] = nil
		inputs["zone"] = nil
	} else {
		inputs["allow"] = args.Allow
		inputs["description"] = args.Description
		inputs["destPort"] = args.DestPort
		inputs["order"] = args.Order
		inputs["packetFilterId"] = args.PacketFilterId
		inputs["protocol"] = args.Protocol
		inputs["sourceNw"] = args.SourceNw
		inputs["sourcePort"] = args.SourcePort
		inputs["zone"] = args.Zone
	}
	s, err := ctx.RegisterResource("sakuracloud:index/packetFilterRule:PacketFilterRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PacketFilterRule{s: s}, nil
}

// GetPacketFilterRule gets an existing PacketFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPacketFilterRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PacketFilterRuleState, opts ...pulumi.ResourceOpt) (*PacketFilterRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allow"] = state.Allow
		inputs["description"] = state.Description
		inputs["destPort"] = state.DestPort
		inputs["order"] = state.Order
		inputs["packetFilterId"] = state.PacketFilterId
		inputs["protocol"] = state.Protocol
		inputs["sourceNw"] = state.SourceNw
		inputs["sourcePort"] = state.SourcePort
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/packetFilterRule:PacketFilterRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PacketFilterRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PacketFilterRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PacketFilterRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The flag for allow/deny packets (default:`true`).
func (r *PacketFilterRule) Allow() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["allow"])
}

// The description of the expression.
func (r *PacketFilterRule) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Target destination port.
// Valid format is one of the following:
// * Number: `"0"` - `"65535"`
// * Range: `"xx-yy"`
// * Range (hex): `"0xPPPP/0xMMMM"`
func (r *PacketFilterRule) DestPort() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destPort"])
}

// The order of the expression (default:`1000`).
func (r *PacketFilterRule) Order() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["order"])
}

// The ID of the Packet Filter to which the resource belongs.
func (r *PacketFilterRule) PacketFilterId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["packetFilterId"])
}

// Protocol used in health check.  
// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "fragment" / "ip" ]
func (r *PacketFilterRule) Protocol() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["protocol"])
}

// Target source network IP address or CIDR or range.  
// Valid format is one of the following:
// * IP address: `"xxx.xxx.xxx.xxx"`
// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
func (r *PacketFilterRule) SourceNw() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourceNw"])
}

// Target source port.
// Valid format is one of the following:
// * Number: `"0"` - `"65535"`
// * Range: `"xx-yy"`
// * Range (hex): `"0xPPPP/0xMMMM"`
func (r *PacketFilterRule) SourcePort() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sourcePort"])
}

// target SakuraCloud zone
func (r *PacketFilterRule) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering PacketFilterRule resources.
type PacketFilterRuleState struct {
	// The flag for allow/deny packets (default:`true`).
	Allow interface{}
	// The description of the expression.
	Description interface{}
	// Target destination port.
	// Valid format is one of the following:
	// * Number: `"0"` - `"65535"`
	// * Range: `"xx-yy"`
	// * Range (hex): `"0xPPPP/0xMMMM"`
	DestPort interface{}
	// The order of the expression (default:`1000`).
	Order interface{}
	// The ID of the Packet Filter to which the resource belongs.
	PacketFilterId interface{}
	// Protocol used in health check.  
	// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "fragment" / "ip" ]
	Protocol interface{}
	// Target source network IP address or CIDR or range.  
	// Valid format is one of the following:
	// * IP address: `"xxx.xxx.xxx.xxx"`
	// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
	// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
	SourceNw interface{}
	// Target source port.
	// Valid format is one of the following:
	// * Number: `"0"` - `"65535"`
	// * Range: `"xx-yy"`
	// * Range (hex): `"0xPPPP/0xMMMM"`
	SourcePort interface{}
	// target SakuraCloud zone
	Zone interface{}
}

// The set of arguments for constructing a PacketFilterRule resource.
type PacketFilterRuleArgs struct {
	// The flag for allow/deny packets (default:`true`).
	Allow interface{}
	// The description of the expression.
	Description interface{}
	// Target destination port.
	// Valid format is one of the following:
	// * Number: `"0"` - `"65535"`
	// * Range: `"xx-yy"`
	// * Range (hex): `"0xPPPP/0xMMMM"`
	DestPort interface{}
	// The order of the expression (default:`1000`).
	Order interface{}
	// The ID of the Packet Filter to which the resource belongs.
	PacketFilterId interface{}
	// Protocol used in health check.  
	// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "fragment" / "ip" ]
	Protocol interface{}
	// Target source network IP address or CIDR or range.  
	// Valid format is one of the following:
	// * IP address: `"xxx.xxx.xxx.xxx"`
	// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
	// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
	SourceNw interface{}
	// Target source port.
	// Valid format is one of the following:
	// * Number: `"0"` - `"65535"`
	// * Range: `"xx-yy"`
	// * Range (hex): `"0xPPPP/0xMMMM"`
	SourcePort interface{}
	// target SakuraCloud zone
	Zone interface{}
}
