// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a SakuraCloud Packet Filter Rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foobar, err := sakuracloud.NewPacketFilter(ctx, "foobar", &sakuracloud.PacketFilterArgs{
// 			Description: pulumi.String("description"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = sakuracloud.NewPacketFilterRule(ctx, "rules", &sakuracloud.PacketFilterRuleArgs{
// 			PacketFilterId: foobar.ID(),
// 			Expressions: PacketFilterRuleExpressionArray{
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol:        pulumi.String("tcp"),
// 					DestinationPort: pulumi.String("22"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol:        pulumi.String("tcp"),
// 					DestinationPort: pulumi.String("80"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol:        pulumi.String("tcp"),
// 					DestinationPort: pulumi.String("443"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol: pulumi.String("icmp"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol: pulumi.String("fragment"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol:   pulumi.String("udp"),
// 					SourcePort: pulumi.String("123"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol:        pulumi.String("tcp"),
// 					DestinationPort: pulumi.String("32768-61000"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol:        pulumi.String("udp"),
// 					DestinationPort: pulumi.String("32768-61000"),
// 				},
// 				&PacketFilterRuleExpressionArgs{
// 					Protocol:    pulumi.String("ip"),
// 					Allow:       pulumi.Bool(false),
// 					Description: pulumi.String("Deny ALL"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type PacketFilterRule struct {
	pulumi.CustomResourceState

	// One or more `expression` blocks as defined below. Changing this forces a new resource to be created.
	Expressions PacketFilterRuleExpressionArrayOutput `pulumi:"expressions"`
	// The id of the packet filter that set expressions to. Changing this forces a new resource to be created.
	PacketFilterId pulumi.StringOutput `pulumi:"packetFilterId"`
	// The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPacketFilterRule registers a new resource with the given unique name, arguments, and options.
func NewPacketFilterRule(ctx *pulumi.Context,
	name string, args *PacketFilterRuleArgs, opts ...pulumi.ResourceOption) (*PacketFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PacketFilterId == nil {
		return nil, errors.New("invalid value for required argument 'PacketFilterId'")
	}
	var resource PacketFilterRule
	err := ctx.RegisterResource("sakuracloud:index/packetFilterRule:PacketFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPacketFilterRule gets an existing PacketFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPacketFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PacketFilterRuleState, opts ...pulumi.ResourceOption) (*PacketFilterRule, error) {
	var resource PacketFilterRule
	err := ctx.ReadResource("sakuracloud:index/packetFilterRule:PacketFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PacketFilterRule resources.
type packetFilterRuleState struct {
	// One or more `expression` blocks as defined below. Changing this forces a new resource to be created.
	Expressions []PacketFilterRuleExpression `pulumi:"expressions"`
	// The id of the packet filter that set expressions to. Changing this forces a new resource to be created.
	PacketFilterId *string `pulumi:"packetFilterId"`
	// The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type PacketFilterRuleState struct {
	// One or more `expression` blocks as defined below. Changing this forces a new resource to be created.
	Expressions PacketFilterRuleExpressionArrayInput
	// The id of the packet filter that set expressions to. Changing this forces a new resource to be created.
	PacketFilterId pulumi.StringPtrInput
	// The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PacketFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*packetFilterRuleState)(nil)).Elem()
}

type packetFilterRuleArgs struct {
	// One or more `expression` blocks as defined below. Changing this forces a new resource to be created.
	Expressions []PacketFilterRuleExpression `pulumi:"expressions"`
	// The id of the packet filter that set expressions to. Changing this forces a new resource to be created.
	PacketFilterId string `pulumi:"packetFilterId"`
	// The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PacketFilterRule resource.
type PacketFilterRuleArgs struct {
	// One or more `expression` blocks as defined below. Changing this forces a new resource to be created.
	Expressions PacketFilterRuleExpressionArrayInput
	// The id of the packet filter that set expressions to. Changing this forces a new resource to be created.
	PacketFilterId pulumi.StringInput
	// The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PacketFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packetFilterRuleArgs)(nil)).Elem()
}

type PacketFilterRuleInput interface {
	pulumi.Input

	ToPacketFilterRuleOutput() PacketFilterRuleOutput
	ToPacketFilterRuleOutputWithContext(ctx context.Context) PacketFilterRuleOutput
}

func (*PacketFilterRule) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketFilterRule)(nil))
}

func (i *PacketFilterRule) ToPacketFilterRuleOutput() PacketFilterRuleOutput {
	return i.ToPacketFilterRuleOutputWithContext(context.Background())
}

func (i *PacketFilterRule) ToPacketFilterRuleOutputWithContext(ctx context.Context) PacketFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterRuleOutput)
}

func (i *PacketFilterRule) ToPacketFilterRulePtrOutput() PacketFilterRulePtrOutput {
	return i.ToPacketFilterRulePtrOutputWithContext(context.Background())
}

func (i *PacketFilterRule) ToPacketFilterRulePtrOutputWithContext(ctx context.Context) PacketFilterRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterRulePtrOutput)
}

type PacketFilterRulePtrInput interface {
	pulumi.Input

	ToPacketFilterRulePtrOutput() PacketFilterRulePtrOutput
	ToPacketFilterRulePtrOutputWithContext(ctx context.Context) PacketFilterRulePtrOutput
}

type packetFilterRulePtrType PacketFilterRuleArgs

func (*packetFilterRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketFilterRule)(nil))
}

func (i *packetFilterRulePtrType) ToPacketFilterRulePtrOutput() PacketFilterRulePtrOutput {
	return i.ToPacketFilterRulePtrOutputWithContext(context.Background())
}

func (i *packetFilterRulePtrType) ToPacketFilterRulePtrOutputWithContext(ctx context.Context) PacketFilterRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterRulePtrOutput)
}

// PacketFilterRuleArrayInput is an input type that accepts PacketFilterRuleArray and PacketFilterRuleArrayOutput values.
// You can construct a concrete instance of `PacketFilterRuleArrayInput` via:
//
//          PacketFilterRuleArray{ PacketFilterRuleArgs{...} }
type PacketFilterRuleArrayInput interface {
	pulumi.Input

	ToPacketFilterRuleArrayOutput() PacketFilterRuleArrayOutput
	ToPacketFilterRuleArrayOutputWithContext(context.Context) PacketFilterRuleArrayOutput
}

type PacketFilterRuleArray []PacketFilterRuleInput

func (PacketFilterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PacketFilterRule)(nil)).Elem()
}

func (i PacketFilterRuleArray) ToPacketFilterRuleArrayOutput() PacketFilterRuleArrayOutput {
	return i.ToPacketFilterRuleArrayOutputWithContext(context.Background())
}

func (i PacketFilterRuleArray) ToPacketFilterRuleArrayOutputWithContext(ctx context.Context) PacketFilterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterRuleArrayOutput)
}

// PacketFilterRuleMapInput is an input type that accepts PacketFilterRuleMap and PacketFilterRuleMapOutput values.
// You can construct a concrete instance of `PacketFilterRuleMapInput` via:
//
//          PacketFilterRuleMap{ "key": PacketFilterRuleArgs{...} }
type PacketFilterRuleMapInput interface {
	pulumi.Input

	ToPacketFilterRuleMapOutput() PacketFilterRuleMapOutput
	ToPacketFilterRuleMapOutputWithContext(context.Context) PacketFilterRuleMapOutput
}

type PacketFilterRuleMap map[string]PacketFilterRuleInput

func (PacketFilterRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PacketFilterRule)(nil)).Elem()
}

func (i PacketFilterRuleMap) ToPacketFilterRuleMapOutput() PacketFilterRuleMapOutput {
	return i.ToPacketFilterRuleMapOutputWithContext(context.Background())
}

func (i PacketFilterRuleMap) ToPacketFilterRuleMapOutputWithContext(ctx context.Context) PacketFilterRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterRuleMapOutput)
}

type PacketFilterRuleOutput struct{ *pulumi.OutputState }

func (PacketFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketFilterRule)(nil))
}

func (o PacketFilterRuleOutput) ToPacketFilterRuleOutput() PacketFilterRuleOutput {
	return o
}

func (o PacketFilterRuleOutput) ToPacketFilterRuleOutputWithContext(ctx context.Context) PacketFilterRuleOutput {
	return o
}

func (o PacketFilterRuleOutput) ToPacketFilterRulePtrOutput() PacketFilterRulePtrOutput {
	return o.ToPacketFilterRulePtrOutputWithContext(context.Background())
}

func (o PacketFilterRuleOutput) ToPacketFilterRulePtrOutputWithContext(ctx context.Context) PacketFilterRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PacketFilterRule) *PacketFilterRule {
		return &v
	}).(PacketFilterRulePtrOutput)
}

type PacketFilterRulePtrOutput struct{ *pulumi.OutputState }

func (PacketFilterRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketFilterRule)(nil))
}

func (o PacketFilterRulePtrOutput) ToPacketFilterRulePtrOutput() PacketFilterRulePtrOutput {
	return o
}

func (o PacketFilterRulePtrOutput) ToPacketFilterRulePtrOutputWithContext(ctx context.Context) PacketFilterRulePtrOutput {
	return o
}

func (o PacketFilterRulePtrOutput) Elem() PacketFilterRuleOutput {
	return o.ApplyT(func(v *PacketFilterRule) PacketFilterRule {
		if v != nil {
			return *v
		}
		var ret PacketFilterRule
		return ret
	}).(PacketFilterRuleOutput)
}

type PacketFilterRuleArrayOutput struct{ *pulumi.OutputState }

func (PacketFilterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketFilterRule)(nil))
}

func (o PacketFilterRuleArrayOutput) ToPacketFilterRuleArrayOutput() PacketFilterRuleArrayOutput {
	return o
}

func (o PacketFilterRuleArrayOutput) ToPacketFilterRuleArrayOutputWithContext(ctx context.Context) PacketFilterRuleArrayOutput {
	return o
}

func (o PacketFilterRuleArrayOutput) Index(i pulumi.IntInput) PacketFilterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketFilterRule {
		return vs[0].([]PacketFilterRule)[vs[1].(int)]
	}).(PacketFilterRuleOutput)
}

type PacketFilterRuleMapOutput struct{ *pulumi.OutputState }

func (PacketFilterRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PacketFilterRule)(nil))
}

func (o PacketFilterRuleMapOutput) ToPacketFilterRuleMapOutput() PacketFilterRuleMapOutput {
	return o
}

func (o PacketFilterRuleMapOutput) ToPacketFilterRuleMapOutputWithContext(ctx context.Context) PacketFilterRuleMapOutput {
	return o
}

func (o PacketFilterRuleMapOutput) MapIndex(k pulumi.StringInput) PacketFilterRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PacketFilterRule {
		return vs[0].(map[string]PacketFilterRule)[vs[1].(string)]
	}).(PacketFilterRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PacketFilterRuleInput)(nil)).Elem(), &PacketFilterRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PacketFilterRulePtrInput)(nil)).Elem(), &PacketFilterRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PacketFilterRuleArrayInput)(nil)).Elem(), PacketFilterRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PacketFilterRuleMapInput)(nil)).Elem(), PacketFilterRuleMap{})
	pulumi.RegisterOutputType(PacketFilterRuleOutput{})
	pulumi.RegisterOutputType(PacketFilterRulePtrOutput{})
	pulumi.RegisterOutputType(PacketFilterRuleArrayOutput{})
	pulumi.RegisterOutputType(PacketFilterRuleMapOutput{})
}
