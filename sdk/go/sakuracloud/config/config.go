// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

// The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the
// `SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is specified
func GetAcceptLanguage(ctx *pulumi.Context) string {
	return config.Get(ctx, "sakuracloud:acceptLanguage")
}

// The maximum number of SakuraCloud API calls per second. It can also be sourced from the `SAKURACLOUD_RATE_LIMIT`
// environment variables, or via a shared credentials file if `profile` is specified. Default:`10`
func GetApiRequestRateLimit(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "sakuracloud:apiRequestRateLimit")
}

// The timeout seconds for each SakuraCloud API call. It can also be sourced from the `SAKURACLOUD_API_REQUEST_TIMEOUT`
// environment variables, or via a shared credentials file if `profile` is specified. Default:`300`
func GetApiRequestTimeout(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "sakuracloud:apiRequestTimeout")
}

// The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment variables, or
// via a shared credentials file if `profile` is specified. Default:`https://secure.sakura.ad.jp/cloud/zone`
func GetApiRootUrl(ctx *pulumi.Context) string {
	return config.Get(ctx, "sakuracloud:apiRootUrl")
}

// The name of zone to use as default for global resources. It must be provided, but it can also be sourced from the
// `SAKURACLOUD_DEFAULT_ZONE` environment variables, or via a shared credentials file if `profile` is specified
func GetDefaultZone(ctx *pulumi.Context) string {
	return config.Get(ctx, "sakuracloud:defaultZone")
}

// The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can also be sourced
// from the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is specified
func GetFakeMode(ctx *pulumi.Context) string {
	return config.Get(ctx, "sakuracloud:fakeMode")
}

// The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping the
// provider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared credentials file if
// `profile` is specified
func GetFakeStorePath(ctx *pulumi.Context) string {
	return config.Get(ctx, "sakuracloud:fakeStorePath")
}

// The profile name of your SakuraCloud account. Default:`default`
func GetProfile(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "sakuracloud:profile")
	if err == nil {
		return v
	}
	return getEnvOrDefault("default", nil, "SAKURACLOUD_PROFILE").(string)
}

// The maximum number of API call retries used when SakuraCloud API returns status code `423` or `503`. It can also be
// sourced from the `SAKURACLOUD_RETRY_MAX` environment variables, or via a shared credentials file if `profile` is
// specified. Default:`100`
func GetRetryMax(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "sakuracloud:retryMax")
}

// The maximum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or
// `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MAX` environment variables, or via a shared credentials
// file if `profile` is specified
func GetRetryWaitMax(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "sakuracloud:retryWaitMax")
}

// The minimum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or
// `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MIN` environment variables, or via a shared credentials
// file if `profile` is specified
func GetRetryWaitMin(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "sakuracloud:retryWaitMin")
}

// The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the
// `SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is specified
func GetSecret(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "sakuracloud:secret")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "SAKURACLOUD_ACCESS_TOKEN_SECRET").(string)
}

// The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the
// `SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified
func GetToken(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "sakuracloud:token")
	if err == nil {
		return v
	}
	return getEnvOrDefault("", nil, "SAKURACLOUD_ACCESS_TOKEN").(string)
}

// The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment variables, or via a
// shared credentials file if `profile` is specified
func GetTrace(ctx *pulumi.Context) string {
	return config.Get(ctx, "sakuracloud:trace")
}

// The name of zone to use as default. It must be provided, but it can also be sourced from the `SAKURACLOUD_ZONE`
// environment variables, or via a shared credentials file if `profile` is specified
func GetZone(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "sakuracloud:zone")
	if err == nil {
		return v
	}
	return getEnvOrDefault("is1b", nil, "SAKURACLOUD_ZONE").(string)
}

// A list of available SakuraCloud zone name. It can also be sourced via a shared credentials file if `profile` is
// specified. Default:[`is1a`, `is1b`, `tk1a`, `tk1v`]
func GetZones(ctx *pulumi.Context) string {
	return config.Get(ctx, "sakuracloud:zones")
}
