// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "sakuracloud:index/archive:Archive":
		r = &Archive{}
	case "sakuracloud:index/archiveShare:ArchiveShare":
		r = &ArchiveShare{}
	case "sakuracloud:index/autoBackup:AutoBackup":
		r = &AutoBackup{}
	case "sakuracloud:index/bridge:Bridge":
		r = &Bridge{}
	case "sakuracloud:index/cDROM:CDROM":
		r = &CDROM{}
	case "sakuracloud:index/certificateAuthority:CertificateAuthority":
		r = &CertificateAuthority{}
	case "sakuracloud:index/containerRegistry:ContainerRegistry":
		r = &ContainerRegistry{}
	case "sakuracloud:index/dNS:DNS":
		r = &DNS{}
	case "sakuracloud:index/dNSRecord:DNSRecord":
		r = &DNSRecord{}
	case "sakuracloud:index/database:Database":
		r = &Database{}
	case "sakuracloud:index/databaseReadReplica:DatabaseReadReplica":
		r = &DatabaseReadReplica{}
	case "sakuracloud:index/disk:Disk":
		r = &Disk{}
	case "sakuracloud:index/eSME:ESME":
		r = &ESME{}
	case "sakuracloud:index/enhancedDB:EnhancedDB":
		r = &EnhancedDB{}
	case "sakuracloud:index/gSLB:GSLB":
		r = &GSLB{}
	case "sakuracloud:index/iPv4Ptr:IPv4Ptr":
		r = &IPv4Ptr{}
	case "sakuracloud:index/icon:Icon":
		r = &Icon{}
	case "sakuracloud:index/internet:Internet":
		r = &Internet{}
	case "sakuracloud:index/loadBalancer:LoadBalancer":
		r = &LoadBalancer{}
	case "sakuracloud:index/localRouter:LocalRouter":
		r = &LocalRouter{}
	case "sakuracloud:index/mobileGateway:MobileGateway":
		r = &MobileGateway{}
	case "sakuracloud:index/nFS:NFS":
		r = &NFS{}
	case "sakuracloud:index/note:Note":
		r = &Note{}
	case "sakuracloud:index/packetFilter:PacketFilter":
		r = &PacketFilter{}
	case "sakuracloud:index/packetFilterRule:PacketFilterRule":
		r = &PacketFilterRule{}
	case "sakuracloud:index/privateHost:PrivateHost":
		r = &PrivateHost{}
	case "sakuracloud:index/proxyLB:ProxyLB":
		r = &ProxyLB{}
	case "sakuracloud:index/proxyLBACME:ProxyLBACME":
		r = &ProxyLBACME{}
	case "sakuracloud:index/sIM:SIM":
		r = &SIM{}
	case "sakuracloud:index/sSHKey:SSHKey":
		r = &SSHKey{}
	case "sakuracloud:index/sSHKeyGen:SSHKeyGen":
		r = &SSHKeyGen{}
	case "sakuracloud:index/server:Server":
		r = &Server{}
	case "sakuracloud:index/simpleMonitor:SimpleMonitor":
		r = &SimpleMonitor{}
	case "sakuracloud:index/subnet:Subnet":
		r = &Subnet{}
	case "sakuracloud:index/switch:Switch":
		r = &Switch{}
	case "sakuracloud:index/vPCRouter:VPCRouter":
		r = &VPCRouter{}
	case "sakuracloud:index/webAccelCertificate:WebAccelCertificate":
		r = &WebAccelCertificate{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:sakuracloud" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/archive",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/archiveShare",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/autoBackup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/bridge",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/cDROM",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/certificateAuthority",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/containerRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/dNS",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/dNSRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/databaseReadReplica",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/disk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/eSME",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/enhancedDB",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/gSLB",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/iPv4Ptr",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/icon",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/internet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/loadBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/localRouter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/mobileGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/nFS",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/note",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/packetFilter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/packetFilterRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/privateHost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/proxyLB",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/proxyLBACME",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/sIM",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/sSHKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/sSHKeyGen",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/server",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/simpleMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/subnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/switch",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/vPCRouter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/webAccelCertificate",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"sakuracloud",
		&pkg{version},
	)
}
