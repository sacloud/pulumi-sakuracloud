// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "sakuracloud:index/archive:Archive":
		r, err = NewArchive(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/archiveShare:ArchiveShare":
		r, err = NewArchiveShare(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/autoBackup:AutoBackup":
		r, err = NewAutoBackup(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/bridge:Bridge":
		r, err = NewBridge(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/bucketObject:BucketObject":
		r, err = NewBucketObject(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/cDROM:CDROM":
		r, err = NewCDROM(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/containerRegistry:ContainerRegistry":
		r, err = NewContainerRegistry(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/dNS:DNS":
		r, err = NewDNS(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/dNSRecord:DNSRecord":
		r, err = NewDNSRecord(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/database:Database":
		r, err = NewDatabase(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/databaseReadReplica:DatabaseReadReplica":
		r, err = NewDatabaseReadReplica(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/disk:Disk":
		r, err = NewDisk(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/eSME:ESME":
		r, err = NewESME(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/gSLB:GSLB":
		r, err = NewGSLB(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/iPv4Ptr:IPv4Ptr":
		r, err = NewIPv4Ptr(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/icon:Icon":
		r, err = NewIcon(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/internet:Internet":
		r, err = NewInternet(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/loadBalancer:LoadBalancer":
		r, err = NewLoadBalancer(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/localRouter:LocalRouter":
		r, err = NewLocalRouter(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/mobileGateway:MobileGateway":
		r, err = NewMobileGateway(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/nFS:NFS":
		r, err = NewNFS(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/note:Note":
		r, err = NewNote(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/packetFilter:PacketFilter":
		r, err = NewPacketFilter(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/packetFilterRule:PacketFilterRule":
		r, err = NewPacketFilterRule(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/privateHost:PrivateHost":
		r, err = NewPrivateHost(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/proxyLB:ProxyLB":
		r, err = NewProxyLB(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/proxyLBACME:ProxyLBACME":
		r, err = NewProxyLBACME(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/sIM:SIM":
		r, err = NewSIM(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/sSHKey:SSHKey":
		r, err = NewSSHKey(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/sSHKeyGen:SSHKeyGen":
		r, err = NewSSHKeyGen(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/server:Server":
		r, err = NewServer(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/simpleMonitor:SimpleMonitor":
		r, err = NewSimpleMonitor(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/subnet:Subnet":
		r, err = NewSubnet(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/switch:Switch":
		r, err = NewSwitch(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/vPCRouter:VPCRouter":
		r, err = NewVPCRouter(ctx, name, nil, pulumi.URN_(urn))
	case "sakuracloud:index/webAccelCertificate:WebAccelCertificate":
		r, err = NewWebAccelCertificate(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:sakuracloud" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/archive",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/archiveShare",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/autoBackup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/bridge",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/bucketObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/cDROM",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/containerRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/dNS",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/dNSRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/databaseReadReplica",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/disk",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/eSME",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/gSLB",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/iPv4Ptr",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/icon",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/internet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/loadBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/localRouter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/mobileGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/nFS",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/note",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/packetFilter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/packetFilterRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/privateHost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/proxyLB",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/proxyLBACME",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/sIM",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/sSHKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/sSHKeyGen",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/server",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/simpleMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/subnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/switch",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/vPCRouter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sakuracloud",
		"index/webAccelCertificate",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"sakuracloud",
		&pkg{version},
	)
}
