// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type LoadBalancer struct {
	pulumi.CustomResourceState

	// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The icon id to attach to the LoadBalancer
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringOutput `pulumi:"name"`
	NetworkInterface LoadBalancerNetworkInterfaceOutput `pulumi:"networkInterface"`
	// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
	Plan pulumi.StringPtrOutput `pulumi:"plan"`
	// Any tags to assign to the LoadBalancer
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	Vips LoadBalancerVipArrayOutput `pulumi:"vips"`
	// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil || args.NetworkInterface == nil {
		return nil, errors.New("missing required argument 'NetworkInterface'")
	}
	if args == nil {
		args = &LoadBalancerArgs{}
	}
	var resource LoadBalancer
	err := ctx.RegisterResource("sakuracloud:index/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("sakuracloud:index/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The icon id to attach to the LoadBalancer
	IconId *string `pulumi:"iconId"`
	// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	NetworkInterface *LoadBalancerNetworkInterface `pulumi:"networkInterface"`
	// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
	Plan *string `pulumi:"plan"`
	// Any tags to assign to the LoadBalancer
	Tags []string `pulumi:"tags"`
	Vips []LoadBalancerVip `pulumi:"vips"`
	// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

type LoadBalancerState struct {
	// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The icon id to attach to the LoadBalancer
	IconId pulumi.StringPtrInput
	// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	NetworkInterface LoadBalancerNetworkInterfacePtrInput
	// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
	Plan pulumi.StringPtrInput
	// Any tags to assign to the LoadBalancer
	Tags pulumi.StringArrayInput
	Vips LoadBalancerVipArrayInput
	// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The icon id to attach to the LoadBalancer
	IconId *string `pulumi:"iconId"`
	// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	NetworkInterface LoadBalancerNetworkInterface `pulumi:"networkInterface"`
	// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
	Plan *string `pulumi:"plan"`
	// Any tags to assign to the LoadBalancer
	Tags []string `pulumi:"tags"`
	Vips []LoadBalancerVip `pulumi:"vips"`
	// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The icon id to attach to the LoadBalancer
	IconId pulumi.StringPtrInput
	// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	NetworkInterface LoadBalancerNetworkInterfaceInput
	// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
	Plan pulumi.StringPtrInput
	// Any tags to assign to the LoadBalancer
	Tags pulumi.StringArrayInput
	Vips LoadBalancerVipArrayInput
	// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
	Zone pulumi.StringPtrInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

