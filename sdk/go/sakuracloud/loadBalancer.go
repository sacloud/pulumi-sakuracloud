// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud LoadBalancer resource. This can be used to create, update, and delete LoadBalancers.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/load_balancer.html.markdown.
type LoadBalancer struct {
	s *pulumi.ResourceState
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOpt) (*LoadBalancer, error) {
	if args == nil || args.Ipaddress1 == nil {
		return nil, errors.New("missing required argument 'Ipaddress1'")
	}
	if args == nil || args.NwMaskLen == nil {
		return nil, errors.New("missing required argument 'NwMaskLen'")
	}
	if args == nil || args.SwitchId == nil {
		return nil, errors.New("missing required argument 'SwitchId'")
	}
	if args == nil || args.Vrid == nil {
		return nil, errors.New("missing required argument 'Vrid'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["defaultRoute"] = nil
		inputs["description"] = nil
		inputs["gracefulShutdownTimeout"] = nil
		inputs["highAvailability"] = nil
		inputs["iconId"] = nil
		inputs["ipaddress1"] = nil
		inputs["ipaddress2"] = nil
		inputs["name"] = nil
		inputs["nwMaskLen"] = nil
		inputs["plan"] = nil
		inputs["switchId"] = nil
		inputs["tags"] = nil
		inputs["vips"] = nil
		inputs["vrid"] = nil
		inputs["zone"] = nil
	} else {
		inputs["defaultRoute"] = args.DefaultRoute
		inputs["description"] = args.Description
		inputs["gracefulShutdownTimeout"] = args.GracefulShutdownTimeout
		inputs["highAvailability"] = args.HighAvailability
		inputs["iconId"] = args.IconId
		inputs["ipaddress1"] = args.Ipaddress1
		inputs["ipaddress2"] = args.Ipaddress2
		inputs["name"] = args.Name
		inputs["nwMaskLen"] = args.NwMaskLen
		inputs["plan"] = args.Plan
		inputs["switchId"] = args.SwitchId
		inputs["tags"] = args.Tags
		inputs["vips"] = args.Vips
		inputs["vrid"] = args.Vrid
		inputs["zone"] = args.Zone
	}
	inputs["vipIds"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/loadBalancer:LoadBalancer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LoadBalancer{s: s}, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LoadBalancerState, opts ...pulumi.ResourceOpt) (*LoadBalancer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["defaultRoute"] = state.DefaultRoute
		inputs["description"] = state.Description
		inputs["gracefulShutdownTimeout"] = state.GracefulShutdownTimeout
		inputs["highAvailability"] = state.HighAvailability
		inputs["iconId"] = state.IconId
		inputs["ipaddress1"] = state.Ipaddress1
		inputs["ipaddress2"] = state.Ipaddress2
		inputs["name"] = state.Name
		inputs["nwMaskLen"] = state.NwMaskLen
		inputs["plan"] = state.Plan
		inputs["switchId"] = state.SwitchId
		inputs["tags"] = state.Tags
		inputs["vipIds"] = state.VipIds
		inputs["vips"] = state.Vips
		inputs["vrid"] = state.Vrid
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("sakuracloud:index/loadBalancer:LoadBalancer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LoadBalancer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LoadBalancer) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LoadBalancer) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Default gateway address of the Load Balancer.	 
func (r *LoadBalancer) DefaultRoute() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultRoute"])
}

// The description of the VIP.
func (r *LoadBalancer) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The wait time (seconds) to do graceful shutdown the server connected to the resource.
func (r *LoadBalancer) GracefulShutdownTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["gracefulShutdownTimeout"])
}

// The flag of enable/disable high-availability mode.
func (r *LoadBalancer) HighAvailability() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["highAvailability"])
}

// The ID of the icon.
func (r *LoadBalancer) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The primary IP address of the Load Balancer.
func (r *LoadBalancer) Ipaddress1() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress1"])
}

// The secondly IP address of the Load Balancer. Used when high-availability mode enabled.
func (r *LoadBalancer) Ipaddress2() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipaddress2"])
}

// The name of the resource.
func (r *LoadBalancer) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Network mask length.
func (r *LoadBalancer) NwMaskLen() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["nwMaskLen"])
}

// The name of the resource plan.  
// Valid value is one of the following: [ "standard" (default) / "highspec"]
func (r *LoadBalancer) Plan() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["plan"])
}

// The ID of the Switch connected to the Load Balancer.
func (r *LoadBalancer) SwitchId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["switchId"])
}

// The tag list of the resources.
func (r *LoadBalancer) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

func (r *LoadBalancer) VipIds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["vipIds"])
}

// VIPs. It contains some attributes to VIPs.
func (r *LoadBalancer) Vips() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["vips"])
}

// VRID used when high-availability mode enabled.
func (r *LoadBalancer) Vrid() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["vrid"])
}

// The ID of the zone to which the resource belongs.
func (r *LoadBalancer) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering LoadBalancer resources.
type LoadBalancerState struct {
	// Default gateway address of the Load Balancer.	 
	DefaultRoute interface{}
	// The description of the VIP.
	Description interface{}
	// The wait time (seconds) to do graceful shutdown the server connected to the resource.
	GracefulShutdownTimeout interface{}
	// The flag of enable/disable high-availability mode.
	HighAvailability interface{}
	// The ID of the icon.
	IconId interface{}
	// The primary IP address of the Load Balancer.
	Ipaddress1 interface{}
	// The secondly IP address of the Load Balancer. Used when high-availability mode enabled.
	Ipaddress2 interface{}
	// The name of the resource.
	Name interface{}
	// Network mask length.
	NwMaskLen interface{}
	// The name of the resource plan.  
	// Valid value is one of the following: [ "standard" (default) / "highspec"]
	Plan interface{}
	// The ID of the Switch connected to the Load Balancer.
	SwitchId interface{}
	// The tag list of the resources.
	Tags interface{}
	VipIds interface{}
	// VIPs. It contains some attributes to VIPs.
	Vips interface{}
	// VRID used when high-availability mode enabled.
	Vrid interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Default gateway address of the Load Balancer.	 
	DefaultRoute interface{}
	// The description of the VIP.
	Description interface{}
	// The wait time (seconds) to do graceful shutdown the server connected to the resource.
	GracefulShutdownTimeout interface{}
	// The flag of enable/disable high-availability mode.
	HighAvailability interface{}
	// The ID of the icon.
	IconId interface{}
	// The primary IP address of the Load Balancer.
	Ipaddress1 interface{}
	// The secondly IP address of the Load Balancer. Used when high-availability mode enabled.
	Ipaddress2 interface{}
	// The name of the resource.
	Name interface{}
	// Network mask length.
	NwMaskLen interface{}
	// The name of the resource plan.  
	// Valid value is one of the following: [ "standard" (default) / "highspec"]
	Plan interface{}
	// The ID of the Switch connected to the Load Balancer.
	SwitchId interface{}
	// The tag list of the resources.
	Tags interface{}
	// VIPs. It contains some attributes to VIPs.
	Vips interface{}
	// VRID used when high-availability mode enabled.
	Vrid interface{}
	// The ID of the zone to which the resource belongs.
	Zone interface{}
}
