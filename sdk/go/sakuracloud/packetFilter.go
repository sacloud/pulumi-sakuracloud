// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a SakuraCloud Packet Filter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sakuracloud.NewPacketFilter(ctx, "foobar", &sakuracloud.PacketFilterArgs{
// 			Description: pulumi.String("description"),
// 			Expressions: sakuracloud.PacketFilterExpressionArray{
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					DestinationPort: pulumi.String("22"),
// 					Protocol:        pulumi.String("tcp"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					DestinationPort: pulumi.String("80"),
// 					Protocol:        pulumi.String("tcp"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					DestinationPort: pulumi.String("443"),
// 					Protocol:        pulumi.String("tcp"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					Protocol: pulumi.String("icmp"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					Protocol: pulumi.String("fragment"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					Protocol:   pulumi.String("udp"),
// 					SourcePort: pulumi.String("123"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					DestinationPort: pulumi.String("32768-61000"),
// 					Protocol:        pulumi.String("tcp"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					DestinationPort: pulumi.String("32768-61000"),
// 					Protocol:        pulumi.String("udp"),
// 				},
// 				&sakuracloud.PacketFilterExpressionArgs{
// 					Allow:       pulumi.Bool(false),
// 					Description: pulumi.String("Deny ALL"),
// 					Protocol:    pulumi.String("ip"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type PacketFilter struct {
	pulumi.CustomResourceState

	// The description of the expression.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// One or more `expression` blocks as defined below.
	Expressions PacketFilterExpressionArrayOutput `pulumi:"expressions"`
	// The name of the packetFilter. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewPacketFilter registers a new resource with the given unique name, arguments, and options.
func NewPacketFilter(ctx *pulumi.Context,
	name string, args *PacketFilterArgs, opts ...pulumi.ResourceOption) (*PacketFilter, error) {
	if args == nil {
		args = &PacketFilterArgs{}
	}

	var resource PacketFilter
	err := ctx.RegisterResource("sakuracloud:index/packetFilter:PacketFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPacketFilter gets an existing PacketFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPacketFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PacketFilterState, opts ...pulumi.ResourceOption) (*PacketFilter, error) {
	var resource PacketFilter
	err := ctx.ReadResource("sakuracloud:index/packetFilter:PacketFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PacketFilter resources.
type packetFilterState struct {
	// The description of the expression.
	Description *string `pulumi:"description"`
	// One or more `expression` blocks as defined below.
	Expressions []PacketFilterExpression `pulumi:"expressions"`
	// The name of the packetFilter. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

type PacketFilterState struct {
	// The description of the expression.
	Description pulumi.StringPtrInput
	// One or more `expression` blocks as defined below.
	Expressions PacketFilterExpressionArrayInput
	// The name of the packetFilter. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PacketFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*packetFilterState)(nil)).Elem()
}

type packetFilterArgs struct {
	// The description of the expression.
	Description *string `pulumi:"description"`
	// One or more `expression` blocks as defined below.
	Expressions []PacketFilterExpression `pulumi:"expressions"`
	// The name of the packetFilter. The length of this value must be in the range [`1`-`64`].
	Name *string `pulumi:"name"`
	// The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a PacketFilter resource.
type PacketFilterArgs struct {
	// The description of the expression.
	Description pulumi.StringPtrInput
	// One or more `expression` blocks as defined below.
	Expressions PacketFilterExpressionArrayInput
	// The name of the packetFilter. The length of this value must be in the range [`1`-`64`].
	Name pulumi.StringPtrInput
	// The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
	Zone pulumi.StringPtrInput
}

func (PacketFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packetFilterArgs)(nil)).Elem()
}

type PacketFilterInput interface {
	pulumi.Input

	ToPacketFilterOutput() PacketFilterOutput
	ToPacketFilterOutputWithContext(ctx context.Context) PacketFilterOutput
}

func (*PacketFilter) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketFilter)(nil))
}

func (i *PacketFilter) ToPacketFilterOutput() PacketFilterOutput {
	return i.ToPacketFilterOutputWithContext(context.Background())
}

func (i *PacketFilter) ToPacketFilterOutputWithContext(ctx context.Context) PacketFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterOutput)
}

func (i *PacketFilter) ToPacketFilterPtrOutput() PacketFilterPtrOutput {
	return i.ToPacketFilterPtrOutputWithContext(context.Background())
}

func (i *PacketFilter) ToPacketFilterPtrOutputWithContext(ctx context.Context) PacketFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterPtrOutput)
}

type PacketFilterPtrInput interface {
	pulumi.Input

	ToPacketFilterPtrOutput() PacketFilterPtrOutput
	ToPacketFilterPtrOutputWithContext(ctx context.Context) PacketFilterPtrOutput
}

type packetFilterPtrType PacketFilterArgs

func (*packetFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketFilter)(nil))
}

func (i *packetFilterPtrType) ToPacketFilterPtrOutput() PacketFilterPtrOutput {
	return i.ToPacketFilterPtrOutputWithContext(context.Background())
}

func (i *packetFilterPtrType) ToPacketFilterPtrOutputWithContext(ctx context.Context) PacketFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterPtrOutput)
}

// PacketFilterArrayInput is an input type that accepts PacketFilterArray and PacketFilterArrayOutput values.
// You can construct a concrete instance of `PacketFilterArrayInput` via:
//
//          PacketFilterArray{ PacketFilterArgs{...} }
type PacketFilterArrayInput interface {
	pulumi.Input

	ToPacketFilterArrayOutput() PacketFilterArrayOutput
	ToPacketFilterArrayOutputWithContext(context.Context) PacketFilterArrayOutput
}

type PacketFilterArray []PacketFilterInput

func (PacketFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*PacketFilter)(nil))
}

func (i PacketFilterArray) ToPacketFilterArrayOutput() PacketFilterArrayOutput {
	return i.ToPacketFilterArrayOutputWithContext(context.Background())
}

func (i PacketFilterArray) ToPacketFilterArrayOutputWithContext(ctx context.Context) PacketFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterArrayOutput)
}

// PacketFilterMapInput is an input type that accepts PacketFilterMap and PacketFilterMapOutput values.
// You can construct a concrete instance of `PacketFilterMapInput` via:
//
//          PacketFilterMap{ "key": PacketFilterArgs{...} }
type PacketFilterMapInput interface {
	pulumi.Input

	ToPacketFilterMapOutput() PacketFilterMapOutput
	ToPacketFilterMapOutputWithContext(context.Context) PacketFilterMapOutput
}

type PacketFilterMap map[string]PacketFilterInput

func (PacketFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*PacketFilter)(nil))
}

func (i PacketFilterMap) ToPacketFilterMapOutput() PacketFilterMapOutput {
	return i.ToPacketFilterMapOutputWithContext(context.Background())
}

func (i PacketFilterMap) ToPacketFilterMapOutputWithContext(ctx context.Context) PacketFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketFilterMapOutput)
}

type PacketFilterOutput struct {
	*pulumi.OutputState
}

func (PacketFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PacketFilter)(nil))
}

func (o PacketFilterOutput) ToPacketFilterOutput() PacketFilterOutput {
	return o
}

func (o PacketFilterOutput) ToPacketFilterOutputWithContext(ctx context.Context) PacketFilterOutput {
	return o
}

func (o PacketFilterOutput) ToPacketFilterPtrOutput() PacketFilterPtrOutput {
	return o.ToPacketFilterPtrOutputWithContext(context.Background())
}

func (o PacketFilterOutput) ToPacketFilterPtrOutputWithContext(ctx context.Context) PacketFilterPtrOutput {
	return o.ApplyT(func(v PacketFilter) *PacketFilter {
		return &v
	}).(PacketFilterPtrOutput)
}

type PacketFilterPtrOutput struct {
	*pulumi.OutputState
}

func (PacketFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketFilter)(nil))
}

func (o PacketFilterPtrOutput) ToPacketFilterPtrOutput() PacketFilterPtrOutput {
	return o
}

func (o PacketFilterPtrOutput) ToPacketFilterPtrOutputWithContext(ctx context.Context) PacketFilterPtrOutput {
	return o
}

type PacketFilterArrayOutput struct{ *pulumi.OutputState }

func (PacketFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PacketFilter)(nil))
}

func (o PacketFilterArrayOutput) ToPacketFilterArrayOutput() PacketFilterArrayOutput {
	return o
}

func (o PacketFilterArrayOutput) ToPacketFilterArrayOutputWithContext(ctx context.Context) PacketFilterArrayOutput {
	return o
}

func (o PacketFilterArrayOutput) Index(i pulumi.IntInput) PacketFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PacketFilter {
		return vs[0].([]PacketFilter)[vs[1].(int)]
	}).(PacketFilterOutput)
}

type PacketFilterMapOutput struct{ *pulumi.OutputState }

func (PacketFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PacketFilter)(nil))
}

func (o PacketFilterMapOutput) ToPacketFilterMapOutput() PacketFilterMapOutput {
	return o
}

func (o PacketFilterMapOutput) ToPacketFilterMapOutputWithContext(ctx context.Context) PacketFilterMapOutput {
	return o
}

func (o PacketFilterMapOutput) MapIndex(k pulumi.StringInput) PacketFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PacketFilter {
		return vs[0].(map[string]PacketFilter)[vs[1].(string)]
	}).(PacketFilterOutput)
}

func init() {
	pulumi.RegisterOutputType(PacketFilterOutput{})
	pulumi.RegisterOutputType(PacketFilterPtrOutput{})
	pulumi.RegisterOutputType(PacketFilterArrayOutput{})
	pulumi.RegisterOutputType(PacketFilterMapOutput{})
}
