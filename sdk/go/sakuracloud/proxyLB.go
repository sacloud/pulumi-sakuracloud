// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sakuracloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SakuraCloud ProxyLB(Enhanced-LoadBalancer) resource. This can be used to create, update, and delete ProxyLBs.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/proxylb.html.markdown.
type ProxyLB struct {
	s *pulumi.ResourceState
}

// NewProxyLB registers a new resource with the given unique name, arguments, and options.
func NewProxyLB(ctx *pulumi.Context,
	name string, args *ProxyLBArgs, opts ...pulumi.ResourceOpt) (*ProxyLB, error) {
	if args == nil || args.BindPorts == nil {
		return nil, errors.New("missing required argument 'BindPorts'")
	}
	if args == nil || args.HealthCheck == nil {
		return nil, errors.New("missing required argument 'HealthCheck'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bindPorts"] = nil
		inputs["certificate"] = nil
		inputs["description"] = nil
		inputs["healthCheck"] = nil
		inputs["iconId"] = nil
		inputs["name"] = nil
		inputs["plan"] = nil
		inputs["servers"] = nil
		inputs["sorryServer"] = nil
		inputs["stickySession"] = nil
		inputs["tags"] = nil
		inputs["timeout"] = nil
		inputs["vipFailover"] = nil
	} else {
		inputs["bindPorts"] = args.BindPorts
		inputs["certificate"] = args.Certificate
		inputs["description"] = args.Description
		inputs["healthCheck"] = args.HealthCheck
		inputs["iconId"] = args.IconId
		inputs["name"] = args.Name
		inputs["plan"] = args.Plan
		inputs["servers"] = args.Servers
		inputs["sorryServer"] = args.SorryServer
		inputs["stickySession"] = args.StickySession
		inputs["tags"] = args.Tags
		inputs["timeout"] = args.Timeout
		inputs["vipFailover"] = args.VipFailover
	}
	inputs["fqdn"] = nil
	inputs["proxyNetworks"] = nil
	inputs["vip"] = nil
	s, err := ctx.RegisterResource("sakuracloud:index/proxyLB:ProxyLB", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProxyLB{s: s}, nil
}

// GetProxyLB gets an existing ProxyLB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyLB(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProxyLBState, opts ...pulumi.ResourceOpt) (*ProxyLB, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bindPorts"] = state.BindPorts
		inputs["certificate"] = state.Certificate
		inputs["description"] = state.Description
		inputs["fqdn"] = state.Fqdn
		inputs["healthCheck"] = state.HealthCheck
		inputs["iconId"] = state.IconId
		inputs["name"] = state.Name
		inputs["plan"] = state.Plan
		inputs["proxyNetworks"] = state.ProxyNetworks
		inputs["servers"] = state.Servers
		inputs["sorryServer"] = state.SorryServer
		inputs["stickySession"] = state.StickySession
		inputs["tags"] = state.Tags
		inputs["timeout"] = state.Timeout
		inputs["vip"] = state.Vip
		inputs["vipFailover"] = state.VipFailover
	}
	s, err := ctx.ReadResource("sakuracloud:index/proxyLB:ProxyLB", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProxyLB{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProxyLB) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProxyLB) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The external listen ports. It contains some attributes to Bind Ports.
func (r *ProxyLB) BindPorts() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["bindPorts"])
}

// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
func (r *ProxyLB) Certificate() *pulumi.Output {
	return r.s.State["certificate"]
}

// The description of the resource.
func (r *ProxyLB) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The FQDN that was assigned. This attribute only valid when `vipFailover` is set to `true`.  
func (r *ProxyLB) Fqdn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fqdn"])
}

// The health check rules. It contains some attributes to Health Check.
func (r *ProxyLB) HealthCheck() *pulumi.Output {
	return r.s.State["healthCheck"]
}

// The ID of the icon.
func (r *ProxyLB) IconId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iconId"])
}

// The name of the resource.  
func (r *ProxyLB) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The plan of the resource.
// Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
func (r *ProxyLB) Plan() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["plan"])
}

// ProxyLB network address.   
func (r *ProxyLB) ProxyNetworks() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["proxyNetworks"])
}

// Real servers. It contains some attributes to Servers.
func (r *ProxyLB) Servers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["servers"])
}

// The pair of IPAddress and port number of sorry-server.
func (r *ProxyLB) SorryServer() *pulumi.Output {
	return r.s.State["sorryServer"]
}

// The flag of enable Sticky-Session.  
func (r *ProxyLB) StickySession() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["stickySession"])
}

// The tag list of the resources.
func (r *ProxyLB) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// Timeout seconds.  
func (r *ProxyLB) Timeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeout"])
}

// The VirtualIPAddress that was assigned. This attribute only valid when `vipFailover` is set to `false`.  
func (r *ProxyLB) Vip() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["vip"])
}

// The flag of enable VIP Fail-Over.  
func (r *ProxyLB) VipFailover() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["vipFailover"])
}

// Input properties used for looking up and filtering ProxyLB resources.
type ProxyLBState struct {
	// The external listen ports. It contains some attributes to Bind Ports.
	BindPorts interface{}
	// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
	Certificate interface{}
	// The description of the resource.
	Description interface{}
	// The FQDN that was assigned. This attribute only valid when `vipFailover` is set to `true`.  
	Fqdn interface{}
	// The health check rules. It contains some attributes to Health Check.
	HealthCheck interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.  
	Name interface{}
	// The plan of the resource.
	// Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
	Plan interface{}
	// ProxyLB network address.   
	ProxyNetworks interface{}
	// Real servers. It contains some attributes to Servers.
	Servers interface{}
	// The pair of IPAddress and port number of sorry-server.
	SorryServer interface{}
	// The flag of enable Sticky-Session.  
	StickySession interface{}
	// The tag list of the resources.
	Tags interface{}
	// Timeout seconds.  
	Timeout interface{}
	// The VirtualIPAddress that was assigned. This attribute only valid when `vipFailover` is set to `false`.  
	Vip interface{}
	// The flag of enable VIP Fail-Over.  
	VipFailover interface{}
}

// The set of arguments for constructing a ProxyLB resource.
type ProxyLBArgs struct {
	// The external listen ports. It contains some attributes to Bind Ports.
	BindPorts interface{}
	// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
	Certificate interface{}
	// The description of the resource.
	Description interface{}
	// The health check rules. It contains some attributes to Health Check.
	HealthCheck interface{}
	// The ID of the icon.
	IconId interface{}
	// The name of the resource.  
	Name interface{}
	// The plan of the resource.
	// Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
	Plan interface{}
	// Real servers. It contains some attributes to Servers.
	Servers interface{}
	// The pair of IPAddress and port number of sorry-server.
	SorryServer interface{}
	// The flag of enable Sticky-Session.  
	StickySession interface{}
	// The tag list of the resources.
	Tags interface{}
	// Timeout seconds.  
	Timeout interface{}
	// The flag of enable VIP Fail-Over.  
	VipFailover interface{}
}
