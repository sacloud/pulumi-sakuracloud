// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sakuracloud

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProxyLB struct {
	pulumi.CustomResourceState

	BindPorts ProxyLBBindPortArrayOutput `pulumi:"bindPorts"`
	Certificate ProxyLBCertificateOutput `pulumi:"certificate"`
	// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	HealthCheck ProxyLBHealthCheckOutput `pulumi:"healthCheck"`
	// The icon id to attach to the ProxyLB
	IconId pulumi.StringPtrOutput `pulumi:"iconId"`
	// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]
	Plan pulumi.IntPtrOutput `pulumi:"plan"`
	// A list of CIDR block used by the ProxyLB to access the server
	ProxyNetworks pulumi.StringArrayOutput `pulumi:"proxyNetworks"`
	// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`]
	Region pulumi.StringPtrOutput `pulumi:"region"`
	Rules ProxyLBRuleArrayOutput `pulumi:"rules"`
	Servers ProxyLBServerArrayOutput `pulumi:"servers"`
	SorryServer ProxyLBSorryServerPtrOutput `pulumi:"sorryServer"`
	// The flag to enable sticky session
	StickySession pulumi.BoolPtrOutput `pulumi:"stickySession"`
	// Any tags to assign to the ProxyLB
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The timeout duration in seconds
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
	// The virtual IP address assigned to the ProxyLB
	Vip pulumi.StringOutput `pulumi:"vip"`
	// The flag to enable VIP fail-over
	VipFailover pulumi.BoolPtrOutput `pulumi:"vipFailover"`
}

// NewProxyLB registers a new resource with the given unique name, arguments, and options.
func NewProxyLB(ctx *pulumi.Context,
	name string, args *ProxyLBArgs, opts ...pulumi.ResourceOption) (*ProxyLB, error) {
	if args == nil || args.BindPorts == nil {
		return nil, errors.New("missing required argument 'BindPorts'")
	}
	if args == nil || args.HealthCheck == nil {
		return nil, errors.New("missing required argument 'HealthCheck'")
	}
	if args == nil {
		args = &ProxyLBArgs{}
	}
	var resource ProxyLB
	err := ctx.RegisterResource("sakuracloud:index/proxyLB:ProxyLB", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxyLB gets an existing ProxyLB resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyLB(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyLBState, opts ...pulumi.ResourceOption) (*ProxyLB, error) {
	var resource ProxyLB
	err := ctx.ReadResource("sakuracloud:index/proxyLB:ProxyLB", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProxyLB resources.
type proxyLBState struct {
	BindPorts []ProxyLBBindPort `pulumi:"bindPorts"`
	Certificate *ProxyLBCertificate `pulumi:"certificate"`
	// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	// The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record
	Fqdn *string `pulumi:"fqdn"`
	HealthCheck *ProxyLBHealthCheck `pulumi:"healthCheck"`
	// The icon id to attach to the ProxyLB
	IconId *string `pulumi:"iconId"`
	// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]
	Plan *int `pulumi:"plan"`
	// A list of CIDR block used by the ProxyLB to access the server
	ProxyNetworks []string `pulumi:"proxyNetworks"`
	// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`]
	Region *string `pulumi:"region"`
	Rules []ProxyLBRule `pulumi:"rules"`
	Servers []ProxyLBServer `pulumi:"servers"`
	SorryServer *ProxyLBSorryServer `pulumi:"sorryServer"`
	// The flag to enable sticky session
	StickySession *bool `pulumi:"stickySession"`
	// Any tags to assign to the ProxyLB
	Tags []string `pulumi:"tags"`
	// The timeout duration in seconds
	Timeout *int `pulumi:"timeout"`
	// The virtual IP address assigned to the ProxyLB
	Vip *string `pulumi:"vip"`
	// The flag to enable VIP fail-over
	VipFailover *bool `pulumi:"vipFailover"`
}

type ProxyLBState struct {
	BindPorts ProxyLBBindPortArrayInput
	Certificate ProxyLBCertificatePtrInput
	// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	// The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record
	Fqdn pulumi.StringPtrInput
	HealthCheck ProxyLBHealthCheckPtrInput
	// The icon id to attach to the ProxyLB
	IconId pulumi.StringPtrInput
	// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]
	Plan pulumi.IntPtrInput
	// A list of CIDR block used by the ProxyLB to access the server
	ProxyNetworks pulumi.StringArrayInput
	// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`]
	Region pulumi.StringPtrInput
	Rules ProxyLBRuleArrayInput
	Servers ProxyLBServerArrayInput
	SorryServer ProxyLBSorryServerPtrInput
	// The flag to enable sticky session
	StickySession pulumi.BoolPtrInput
	// Any tags to assign to the ProxyLB
	Tags pulumi.StringArrayInput
	// The timeout duration in seconds
	Timeout pulumi.IntPtrInput
	// The virtual IP address assigned to the ProxyLB
	Vip pulumi.StringPtrInput
	// The flag to enable VIP fail-over
	VipFailover pulumi.BoolPtrInput
}

func (ProxyLBState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyLBState)(nil)).Elem()
}

type proxyLBArgs struct {
	BindPorts []ProxyLBBindPort `pulumi:"bindPorts"`
	Certificate *ProxyLBCertificate `pulumi:"certificate"`
	// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
	Description *string `pulumi:"description"`
	HealthCheck ProxyLBHealthCheck `pulumi:"healthCheck"`
	// The icon id to attach to the ProxyLB
	IconId *string `pulumi:"iconId"`
	// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
	Name *string `pulumi:"name"`
	// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]
	Plan *int `pulumi:"plan"`
	// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`]
	Region *string `pulumi:"region"`
	Rules []ProxyLBRule `pulumi:"rules"`
	Servers []ProxyLBServer `pulumi:"servers"`
	SorryServer *ProxyLBSorryServer `pulumi:"sorryServer"`
	// The flag to enable sticky session
	StickySession *bool `pulumi:"stickySession"`
	// Any tags to assign to the ProxyLB
	Tags []string `pulumi:"tags"`
	// The timeout duration in seconds
	Timeout *int `pulumi:"timeout"`
	// The flag to enable VIP fail-over
	VipFailover *bool `pulumi:"vipFailover"`
}

// The set of arguments for constructing a ProxyLB resource.
type ProxyLBArgs struct {
	BindPorts ProxyLBBindPortArrayInput
	Certificate ProxyLBCertificatePtrInput
	// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`]
	Description pulumi.StringPtrInput
	HealthCheck ProxyLBHealthCheckInput
	// The icon id to attach to the ProxyLB
	IconId pulumi.StringPtrInput
	// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`]
	Name pulumi.StringPtrInput
	// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]
	Plan pulumi.IntPtrInput
	// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`]
	Region pulumi.StringPtrInput
	Rules ProxyLBRuleArrayInput
	Servers ProxyLBServerArrayInput
	SorryServer ProxyLBSorryServerPtrInput
	// The flag to enable sticky session
	StickySession pulumi.BoolPtrInput
	// Any tags to assign to the ProxyLB
	Tags pulumi.StringArrayInput
	// The timeout duration in seconds
	Timeout pulumi.IntPtrInput
	// The flag to enable VIP fail-over
	VipFailover pulumi.BoolPtrInput
}

func (ProxyLBArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyLBArgs)(nil)).Elem()
}

