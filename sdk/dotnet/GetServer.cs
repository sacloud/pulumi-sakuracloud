// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public static partial class Invokes
    {
        public static Task<GetServerResult> GetServer(GetServerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("sakuracloud:index/getServer:getServer", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetServerArgs : Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetServerFilterArgs? Filter { get; set; }

        [Input("zone")]
        public string? Zone { get; set; }

        public GetServerArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetServerResult
    {
        public readonly string CdromId;
        public readonly string Commitment;
        public readonly int Core;
        public readonly string Description;
        public readonly ImmutableArray<string> Disks;
        public readonly ImmutableArray<string> DnsServers;
        public readonly Outputs.GetServerFilterResult? Filter;
        public readonly string Gateway;
        public readonly string Hostname;
        public readonly string IconId;
        public readonly string InterfaceDriver;
        public readonly string IpAddress;
        public readonly int Memory;
        public readonly string Name;
        public readonly int Netmask;
        public readonly string NetworkAddress;
        public readonly ImmutableArray<Outputs.GetServerNetworkInterfacesResult> NetworkInterfaces;
        public readonly string PrivateHostId;
        public readonly string PrivateHostName;
        public readonly ImmutableArray<string> Tags;
        public readonly string Zone;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetServerResult(
            string cdromId,
            string commitment,
            int core,
            string description,
            ImmutableArray<string> disks,
            ImmutableArray<string> dnsServers,
            Outputs.GetServerFilterResult? filter,
            string gateway,
            string hostname,
            string iconId,
            string interfaceDriver,
            string ipAddress,
            int memory,
            string name,
            int netmask,
            string networkAddress,
            ImmutableArray<Outputs.GetServerNetworkInterfacesResult> networkInterfaces,
            string privateHostId,
            string privateHostName,
            ImmutableArray<string> tags,
            string zone,
            string id)
        {
            CdromId = cdromId;
            Commitment = commitment;
            Core = core;
            Description = description;
            Disks = disks;
            DnsServers = dnsServers;
            Filter = filter;
            Gateway = gateway;
            Hostname = hostname;
            IconId = iconId;
            InterfaceDriver = interfaceDriver;
            IpAddress = ipAddress;
            Memory = memory;
            Name = name;
            Netmask = netmask;
            NetworkAddress = networkAddress;
            NetworkInterfaces = networkInterfaces;
            PrivateHostId = privateHostId;
            PrivateHostName = privateHostName;
            Tags = tags;
            Zone = zone;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetServerFilterArgs : Pulumi.InvokeArgs
    {
        [Input("conditions")]
        private List<GetServerFilterConditionsArgs>? _conditions;
        public List<GetServerFilterConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new List<GetServerFilterConditionsArgs>());
            set => _conditions = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("names")]
        private List<string>? _names;
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("tags")]
        private List<string>? _tags;
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetServerFilterArgs()
        {
        }
    }

    public sealed class GetServerFilterConditionsArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("values", required: true)]
        private List<string>? _values;
        public List<string> Values
        {
            get => _values ?? (_values = new List<string>());
            set => _values = value;
        }

        public GetServerFilterConditionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetServerFilterConditionsResult
    {
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetServerFilterConditionsResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }

    [OutputType]
    public sealed class GetServerFilterResult
    {
        public readonly ImmutableArray<GetServerFilterConditionsResult> Conditions;
        public readonly string? Id;
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetServerFilterResult(
            ImmutableArray<GetServerFilterConditionsResult> conditions,
            string? id,
            ImmutableArray<string> names,
            ImmutableArray<string> tags)
        {
            Conditions = conditions;
            Id = id;
            Names = names;
            Tags = tags;
        }
    }

    [OutputType]
    public sealed class GetServerNetworkInterfacesResult
    {
        public readonly string MacAddress;
        public readonly string PacketFilterId;
        public readonly string Upstream;
        public readonly string UserIpAddress;

        [OutputConstructor]
        private GetServerNetworkInterfacesResult(
            string macAddress,
            string packetFilterId,
            string upstream,
            string userIpAddress)
        {
            MacAddress = macAddress;
            PacketFilterId = packetFilterId;
            Upstream = upstream;
            UserIpAddress = userIpAddress;
        }
    }
    }
}
