// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetServer
    {
        /// <summary>
        /// Get information about an existing Server.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetServer.InvokeAsync(new Sakuracloud.GetServerArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetServerFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("sakuracloud:index/getServer:getServer", args ?? new GetServerArgs(), options.WithVersion());
    }


    public sealed class GetServerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetServerFilterArgs? Filter { get; set; }

        /// <summary>
        /// The name of zone that the Server is in (e.g. `is1a`, `tk1a`).
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetServerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// The id of the CD-ROM attached to the server.
        /// </summary>
        public readonly string CdromId;
        /// <summary>
        /// The policy of how to allocate virtual CPUs to the server. This will be one of [`standard`/`dedicatedcpu`].
        /// </summary>
        public readonly string Commitment;
        /// <summary>
        /// The number of virtual CPUs.
        /// </summary>
        public readonly int Core;
        /// <summary>
        /// The description of the Server.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A list of disk id connected to the server.
        /// </summary>
        public readonly ImmutableArray<string> Disks;
        /// <summary>
        /// A list of IP address of DNS server in the zone.
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        public readonly Outputs.GetServerFilterResult? Filter;
        /// <summary>
        /// The IP address of the gateway used by Server.
        /// </summary>
        public readonly string Gateway;
        /// <summary>
        /// The hostname of the Server.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The icon id attached to the Server.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The driver name of network interface. This will be one of [`virtio`/`e1000`].
        /// </summary>
        public readonly string InterfaceDriver;
        /// <summary>
        /// The IP address assigned to the Server.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// The size of memory in GiB.
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// The name of the Server.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The bit length of the subnet assigned to the Server.
        /// </summary>
        public readonly int Netmask;
        /// <summary>
        /// The network address which the `ip_address` belongs.
        /// </summary>
        public readonly string NetworkAddress;
        /// <summary>
        /// A list of `network_interface` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerNetworkInterfaceResult> NetworkInterfaces;
        /// <summary>
        /// The id of the private host which the server is assigned.
        /// </summary>
        public readonly string PrivateHostId;
        /// <summary>
        /// The name of the private host which the server is assigned.
        /// </summary>
        public readonly string PrivateHostName;
        /// <summary>
        /// Any tags assigned to the Server.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string Zone;

        [OutputConstructor]
        private GetServerResult(
            string cdromId,

            string commitment,

            int core,

            string description,

            ImmutableArray<string> disks,

            ImmutableArray<string> dnsServers,

            Outputs.GetServerFilterResult? filter,

            string gateway,

            string hostname,

            string iconId,

            string id,

            string interfaceDriver,

            string ipAddress,

            int memory,

            string name,

            int netmask,

            string networkAddress,

            ImmutableArray<Outputs.GetServerNetworkInterfaceResult> networkInterfaces,

            string privateHostId,

            string privateHostName,

            ImmutableArray<string> tags,

            string zone)
        {
            CdromId = cdromId;
            Commitment = commitment;
            Core = core;
            Description = description;
            Disks = disks;
            DnsServers = dnsServers;
            Filter = filter;
            Gateway = gateway;
            Hostname = hostname;
            IconId = iconId;
            Id = id;
            InterfaceDriver = interfaceDriver;
            IpAddress = ipAddress;
            Memory = memory;
            Name = name;
            Netmask = netmask;
            NetworkAddress = networkAddress;
            NetworkInterfaces = networkInterfaces;
            PrivateHostId = privateHostId;
            PrivateHostName = privateHostName;
            Tags = tags;
            Zone = zone;
        }
    }
}
