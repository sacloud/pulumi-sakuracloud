// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud ProxyLB(Enhanced-LoadBalancer) resource. This can be used to create, update, and delete ProxyLBs.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/proxylb_acme.html.markdown.
    /// </summary>
    public partial class ProxyLBACME : Pulumi.CustomResource
    {
        /// <summary>
        /// The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
        /// </summary>
        [Output("acceptTos")]
        public Output<bool> AcceptTos { get; private set; } = null!;

        /// <summary>
        /// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.ProxyLBACMECertificates>> Certificates { get; private set; } = null!;

        /// <summary>
        /// The FQDN of target domain.  
        /// </summary>
        [Output("commonName")]
        public Output<string> CommonName { get; private set; } = null!;

        /// <summary>
        /// The ID of target ProxyLB resource.  
        /// </summary>
        [Output("proxylbId")]
        public Output<string> ProxylbId { get; private set; } = null!;

        /// <summary>
        /// The wait time for update settings.
        /// </summary>
        [Output("updateDelaySec")]
        public Output<int?> UpdateDelaySec { get; private set; } = null!;


        /// <summary>
        /// Create a ProxyLBACME resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProxyLBACME(string name, ProxyLBACMEArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLBACME:ProxyLBACME", name, args, MakeResourceOptions(options, ""))
        {
        }

        private ProxyLBACME(string name, Input<string> id, ProxyLBACMEState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLBACME:ProxyLBACME", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProxyLBACME resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProxyLBACME Get(string name, Input<string> id, ProxyLBACMEState? state = null, CustomResourceOptions? options = null)
        {
            return new ProxyLBACME(name, id, state, options);
        }
    }

    public sealed class ProxyLBACMEArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
        /// </summary>
        [Input("acceptTos", required: true)]
        public Input<bool> AcceptTos { get; set; } = null!;

        /// <summary>
        /// The FQDN of target domain.  
        /// </summary>
        [Input("commonName", required: true)]
        public Input<string> CommonName { get; set; } = null!;

        /// <summary>
        /// The ID of target ProxyLB resource.  
        /// </summary>
        [Input("proxylbId", required: true)]
        public Input<string> ProxylbId { get; set; } = null!;

        /// <summary>
        /// The wait time for update settings.
        /// </summary>
        [Input("updateDelaySec")]
        public Input<int>? UpdateDelaySec { get; set; }

        public ProxyLBACMEArgs()
        {
        }
    }

    public sealed class ProxyLBACMEState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
        /// </summary>
        [Input("acceptTos")]
        public Input<bool>? AcceptTos { get; set; }

        [Input("certificates")]
        private InputList<Inputs.ProxyLBACMECertificatesGetArgs>? _certificates;

        /// <summary>
        /// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
        /// </summary>
        public InputList<Inputs.ProxyLBACMECertificatesGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.ProxyLBACMECertificatesGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The FQDN of target domain.  
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// The ID of target ProxyLB resource.  
        /// </summary>
        [Input("proxylbId")]
        public Input<string>? ProxylbId { get; set; }

        /// <summary>
        /// The wait time for update settings.
        /// </summary>
        [Input("updateDelaySec")]
        public Input<int>? UpdateDelaySec { get; set; }

        public ProxyLBACMEState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ProxyLBACMECertificatesAdditionalCertificatesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        [Input("intermediateCert")]
        public Input<string>? IntermediateCert { get; set; }

        /// <summary>
        /// The private key.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The server certificate.
        /// </summary>
        [Input("serverCert")]
        public Input<string>? ServerCert { get; set; }

        public ProxyLBACMECertificatesAdditionalCertificatesGetArgs()
        {
        }
    }

    public sealed class ProxyLBACMECertificatesGetArgs : Pulumi.ResourceArgs
    {
        [Input("additionalCertificates")]
        private InputList<ProxyLBACMECertificatesAdditionalCertificatesGetArgs>? _additionalCertificates;

        /// <summary>
        /// Additional certificates.
        /// </summary>
        public InputList<ProxyLBACMECertificatesAdditionalCertificatesGetArgs> AdditionalCertificates
        {
            get => _additionalCertificates ?? (_additionalCertificates = new InputList<ProxyLBACMECertificatesAdditionalCertificatesGetArgs>());
            set => _additionalCertificates = value;
        }

        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        [Input("intermediateCert")]
        public Input<string>? IntermediateCert { get; set; }

        /// <summary>
        /// The private key.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The server certificate.
        /// </summary>
        [Input("serverCert")]
        public Input<string>? ServerCert { get; set; }

        public ProxyLBACMECertificatesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ProxyLBACMECertificates
    {
        /// <summary>
        /// Additional certificates.
        /// </summary>
        public readonly ImmutableArray<ProxyLBACMECertificatesAdditionalCertificates> AdditionalCertificates;
        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        public readonly string IntermediateCert;
        /// <summary>
        /// The private key.
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// The server certificate.
        /// </summary>
        public readonly string ServerCert;

        [OutputConstructor]
        private ProxyLBACMECertificates(
            ImmutableArray<ProxyLBACMECertificatesAdditionalCertificates> additionalCertificates,
            string intermediateCert,
            string privateKey,
            string serverCert)
        {
            AdditionalCertificates = additionalCertificates;
            IntermediateCert = intermediateCert;
            PrivateKey = privateKey;
            ServerCert = serverCert;
        }
    }

    [OutputType]
    public sealed class ProxyLBACMECertificatesAdditionalCertificates
    {
        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        public readonly string IntermediateCert;
        /// <summary>
        /// The private key.
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// The server certificate.
        /// </summary>
        public readonly string ServerCert;

        [OutputConstructor]
        private ProxyLBACMECertificatesAdditionalCertificates(
            string intermediateCert,
            string privateKey,
            string serverCert)
        {
            IntermediateCert = intermediateCert;
            PrivateKey = privateKey;
            ServerCert = serverCert;
        }
    }
    }
}
