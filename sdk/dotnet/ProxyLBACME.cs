// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud ProxyLB ACME Setting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Sakuracloud = Pulumi.Sakuracloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobarProxyLBACME = new Sakuracloud.ProxyLBACME("foobarProxyLBACME", new Sakuracloud.ProxyLBACMEArgs
    ///         {
    ///             ProxylbId = sakuracloud_proxylb.Foobar.Id,
    ///             AcceptTos = true,
    ///             CommonName = "www.example.com",
    ///             UpdateDelaySec = 120,
    ///         });
    ///         var foobarProxyLB = Output.Create(Sakuracloud.GetProxyLB.InvokeAsync(new Sakuracloud.GetProxyLBArgs
    ///         {
    ///             Filter = new Sakuracloud.Inputs.GetProxyLBFilterArgs
    ///             {
    ///                 Names = 
    ///                 {
    ///                     "foobar",
    ///                 },
    ///             },
    ///         }));
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/proxyLBACME:ProxyLBACME")]
    public partial class ProxyLBACME : Pulumi.CustomResource
    {
        /// <summary>
        /// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
        /// </summary>
        [Output("acceptTos")]
        public Output<bool> AcceptTos { get; private set; } = null!;

        /// <summary>
        /// A list of `certificate` blocks as defined below.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.ProxyLBACMECertificate>> Certificates { get; private set; } = null!;

        /// <summary>
        /// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
        /// </summary>
        [Output("commonName")]
        public Output<string> CommonName { get; private set; } = null!;

        /// <summary>
        /// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
        /// </summary>
        [Output("proxylbId")]
        public Output<string> ProxylbId { get; private set; } = null!;

        /// <summary>
        /// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
        /// </summary>
        [Output("updateDelaySec")]
        public Output<int?> UpdateDelaySec { get; private set; } = null!;


        /// <summary>
        /// Create a ProxyLBACME resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProxyLBACME(string name, ProxyLBACMEArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLBACME:ProxyLBACME", name, args ?? new ProxyLBACMEArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProxyLBACME(string name, Input<string> id, ProxyLBACMEState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLBACME:ProxyLBACME", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProxyLBACME resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProxyLBACME Get(string name, Input<string> id, ProxyLBACMEState? state = null, CustomResourceOptions? options = null)
        {
            return new ProxyLBACME(name, id, state, options);
        }
    }

    public sealed class ProxyLBACMEArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
        /// </summary>
        [Input("acceptTos", required: true)]
        public Input<bool> AcceptTos { get; set; } = null!;

        /// <summary>
        /// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
        /// </summary>
        [Input("commonName", required: true)]
        public Input<string> CommonName { get; set; } = null!;

        /// <summary>
        /// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proxylbId", required: true)]
        public Input<string> ProxylbId { get; set; } = null!;

        /// <summary>
        /// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("updateDelaySec")]
        public Input<int>? UpdateDelaySec { get; set; }

        public ProxyLBACMEArgs()
        {
        }
    }

    public sealed class ProxyLBACMEState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.
        /// </summary>
        [Input("acceptTos")]
        public Input<bool>? AcceptTos { get; set; }

        [Input("certificates")]
        private InputList<Inputs.ProxyLBACMECertificateGetArgs>? _certificates;

        /// <summary>
        /// A list of `certificate` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ProxyLBACMECertificateGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.ProxyLBACMECertificateGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.
        /// </summary>
        [Input("proxylbId")]
        public Input<string>? ProxylbId { get; set; }

        /// <summary>
        /// The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.
        /// </summary>
        [Input("updateDelaySec")]
        public Input<int>? UpdateDelaySec { get; set; }

        public ProxyLBACMEState()
        {
        }
    }
}
