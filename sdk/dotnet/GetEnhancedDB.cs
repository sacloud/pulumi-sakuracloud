// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetEnhancedDB
    {
        /// <summary>
        /// Get information about an existing Enhanced Database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetEnhancedDB.InvokeAsync(new Sakuracloud.GetEnhancedDBArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetEnhancedDBFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEnhancedDBResult> InvokeAsync(GetEnhancedDBArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEnhancedDBResult>("sakuracloud:index/getEnhancedDB:getEnhancedDB", args ?? new GetEnhancedDBArgs(), options.WithVersion());
    }


    public sealed class GetEnhancedDBArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetEnhancedDBFilterArgs? Filter { get; set; }

        public GetEnhancedDBArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEnhancedDBResult
    {
        /// <summary>
        /// The name of database.
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// The type of database.
        /// </summary>
        public readonly string DatabaseType;
        /// <summary>
        /// The description of the EnhancedDB.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetEnhancedDBFilterResult? Filter;
        /// <summary>
        /// The name of database host. This will be built from `database_name` + `tidb-is1.db.sakurausercontent.com`.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The icon id attached to the EnhancedDB.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The value of max connections setting.
        /// </summary>
        public readonly int MaxConnections;
        /// <summary>
        /// The name of the EnhancedDB.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The region name.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Any tags assigned to the EnhancedDB.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetEnhancedDBResult(
            string databaseName,

            string databaseType,

            string description,

            Outputs.GetEnhancedDBFilterResult? filter,

            string hostname,

            string iconId,

            string id,

            int maxConnections,

            string name,

            string region,

            ImmutableArray<string> tags)
        {
            DatabaseName = databaseName;
            DatabaseType = databaseType;
            Description = description;
            Filter = filter;
            Hostname = hostname;
            IconId = iconId;
            Id = id;
            MaxConnections = maxConnections;
            Name = name;
            Region = region;
            Tags = tags;
        }
    }
}
