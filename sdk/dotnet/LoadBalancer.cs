// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public partial class LoadBalancer : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the LoadBalancer
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkInterface")]
        public Output<Outputs.LoadBalancerNetworkInterface> NetworkInterface { get; private set; } = null!;

        /// <summary>
        /// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the LoadBalancer
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("vips")]
        public Output<ImmutableArray<Outputs.LoadBalancerVips>> Vips { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/loadBalancer:LoadBalancer", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the LoadBalancer
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterface", required: true)]
        public Input<Inputs.LoadBalancerNetworkInterfaceArgs> NetworkInterface { get; set; } = null!;

        /// <summary>
        /// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the LoadBalancer
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("vips")]
        private InputList<Inputs.LoadBalancerVipsArgs>? _vips;
        public InputList<Inputs.LoadBalancerVipsArgs> Vips
        {
            get => _vips ?? (_vips = new InputList<Inputs.LoadBalancerVipsArgs>());
            set => _vips = value;
        }

        /// <summary>
        /// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public LoadBalancerArgs()
        {
        }
    }

    public sealed class LoadBalancerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the LoadBalancer. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the LoadBalancer
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterface")]
        public Input<Inputs.LoadBalancerNetworkInterfaceGetArgs>? NetworkInterface { get; set; }

        /// <summary>
        /// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the LoadBalancer
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("vips")]
        private InputList<Inputs.LoadBalancerVipsGetArgs>? _vips;
        public InputList<Inputs.LoadBalancerVipsGetArgs> Vips
        {
            get => _vips ?? (_vips = new InputList<Inputs.LoadBalancerVipsGetArgs>());
            set => _vips = value;
        }

        /// <summary>
        /// The name of zone that the LoadBalancer will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public LoadBalancerState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class LoadBalancerNetworkInterfaceArgs : Pulumi.ResourceArgs
    {
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("ipAddresses", required: true)]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        [Input("vrid", required: true)]
        public Input<int> Vrid { get; set; } = null!;

        public LoadBalancerNetworkInterfaceArgs()
        {
        }
    }

    public sealed class LoadBalancerNetworkInterfaceGetArgs : Pulumi.ResourceArgs
    {
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("ipAddresses", required: true)]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        [Input("vrid", required: true)]
        public Input<int> Vrid { get; set; } = null!;

        public LoadBalancerNetworkInterfaceGetArgs()
        {
        }
    }

    public sealed class LoadBalancerVipsArgs : Pulumi.ResourceArgs
    {
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("servers")]
        private InputList<LoadBalancerVipsServersArgs>? _servers;
        public InputList<LoadBalancerVipsServersArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<LoadBalancerVipsServersArgs>());
            set => _servers = value;
        }

        [Input("sorryServer")]
        public Input<string>? SorryServer { get; set; }

        [Input("vip", required: true)]
        public Input<string> Vip { get; set; } = null!;

        public LoadBalancerVipsArgs()
        {
        }
    }

    public sealed class LoadBalancerVipsGetArgs : Pulumi.ResourceArgs
    {
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("servers")]
        private InputList<LoadBalancerVipsServersGetArgs>? _servers;
        public InputList<LoadBalancerVipsServersGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<LoadBalancerVipsServersGetArgs>());
            set => _servers = value;
        }

        [Input("sorryServer")]
        public Input<string>? SorryServer { get; set; }

        [Input("vip", required: true)]
        public Input<string> Vip { get; set; } = null!;

        public LoadBalancerVipsGetArgs()
        {
        }
    }

    public sealed class LoadBalancerVipsServersArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("status")]
        public Input<string>? Status { get; set; }

        public LoadBalancerVipsServersArgs()
        {
        }
    }

    public sealed class LoadBalancerVipsServersGetArgs : Pulumi.ResourceArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("status")]
        public Input<string>? Status { get; set; }

        public LoadBalancerVipsServersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LoadBalancerNetworkInterface
    {
        public readonly string? Gateway;
        public readonly ImmutableArray<string> IpAddresses;
        public readonly int Netmask;
        public readonly string SwitchId;
        public readonly int Vrid;

        [OutputConstructor]
        private LoadBalancerNetworkInterface(
            string? gateway,
            ImmutableArray<string> ipAddresses,
            int netmask,
            string switchId,
            int vrid)
        {
            Gateway = gateway;
            IpAddresses = ipAddresses;
            Netmask = netmask;
            SwitchId = switchId;
            Vrid = vrid;
        }
    }

    [OutputType]
    public sealed class LoadBalancerVips
    {
        public readonly int? DelayLoop;
        public readonly string? Description;
        public readonly int Port;
        public readonly ImmutableArray<LoadBalancerVipsServers> Servers;
        public readonly string? SorryServer;
        public readonly string Vip;

        [OutputConstructor]
        private LoadBalancerVips(
            int? delayLoop,
            string? description,
            int port,
            ImmutableArray<LoadBalancerVipsServers> servers,
            string? sorryServer,
            string vip)
        {
            DelayLoop = delayLoop;
            Description = description;
            Port = port;
            Servers = servers;
            SorryServer = sorryServer;
            Vip = vip;
        }
    }

    [OutputType]
    public sealed class LoadBalancerVipsServers
    {
        public readonly bool? Enabled;
        public readonly string IpAddress;
        public readonly string? Path;
        public readonly string Protocol;
        public readonly string? Status;

        [OutputConstructor]
        private LoadBalancerVipsServers(
            bool? enabled,
            string ipAddress,
            string? path,
            string protocol,
            string? status)
        {
            Enabled = enabled;
            IpAddress = ipAddress;
            Path = path;
            Protocol = protocol;
            Status = status;
        }
    }
    }
}
