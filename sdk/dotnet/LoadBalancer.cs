// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud LoadBalancer resource. This can be used to create, update, and delete LoadBalancers.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/load_balancer.html.markdown.
    /// </summary>
    public partial class LoadBalancer : Pulumi.CustomResource
    {
        /// <summary>
        /// Default gateway address of the Load Balancer.	 
        /// </summary>
        [Output("defaultRoute")]
        public Output<string?> DefaultRoute { get; private set; } = null!;

        /// <summary>
        /// The description of the VIP.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the server connected to the resource.
        /// </summary>
        [Output("gracefulShutdownTimeout")]
        public Output<int?> GracefulShutdownTimeout { get; private set; } = null!;

        /// <summary>
        /// The flag of enable/disable high-availability mode.
        /// </summary>
        [Output("highAvailability")]
        public Output<bool?> HighAvailability { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The primary IP address of the Load Balancer.
        /// </summary>
        [Output("ipaddress1")]
        public Output<string> Ipaddress1 { get; private set; } = null!;

        /// <summary>
        /// The secondly IP address of the Load Balancer. Used when high-availability mode enabled.
        /// </summary>
        [Output("ipaddress2")]
        public Output<string?> Ipaddress2 { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network mask length.
        /// </summary>
        [Output("nwMaskLen")]
        public Output<int> NwMaskLen { get; private set; } = null!;

        /// <summary>
        /// The name of the resource plan.  
        /// Valid value is one of the following: [ "standard" (default) / "highspec"]
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// The ID of the Switch connected to the Load Balancer.
        /// </summary>
        [Output("switchId")]
        public Output<string> SwitchId { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("vipIds")]
        public Output<ImmutableArray<string>> VipIds { get; private set; } = null!;

        /// <summary>
        /// VIPs. It contains some attributes to VIPs.
        /// </summary>
        [Output("vips")]
        public Output<ImmutableArray<Outputs.LoadBalancerVips>> Vips { get; private set; } = null!;

        /// <summary>
        /// VRID used when high-availability mode enabled.
        /// </summary>
        [Output("vrid")]
        public Output<int> Vrid { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/loadBalancer:LoadBalancer", name, args, MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default gateway address of the Load Balancer.	 
        /// </summary>
        [Input("defaultRoute")]
        public Input<string>? DefaultRoute { get; set; }

        /// <summary>
        /// The description of the VIP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the server connected to the resource.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The flag of enable/disable high-availability mode.
        /// </summary>
        [Input("highAvailability")]
        public Input<bool>? HighAvailability { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The primary IP address of the Load Balancer.
        /// </summary>
        [Input("ipaddress1", required: true)]
        public Input<string> Ipaddress1 { get; set; } = null!;

        /// <summary>
        /// The secondly IP address of the Load Balancer. Used when high-availability mode enabled.
        /// </summary>
        [Input("ipaddress2")]
        public Input<string>? Ipaddress2 { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network mask length.
        /// </summary>
        [Input("nwMaskLen", required: true)]
        public Input<int> NwMaskLen { get; set; } = null!;

        /// <summary>
        /// The name of the resource plan.  
        /// Valid value is one of the following: [ "standard" (default) / "highspec"]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The ID of the Switch connected to the Load Balancer.
        /// </summary>
        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("vips")]
        private InputList<Inputs.LoadBalancerVipsArgs>? _vips;

        /// <summary>
        /// VIPs. It contains some attributes to VIPs.
        /// </summary>
        public InputList<Inputs.LoadBalancerVipsArgs> Vips
        {
            get => _vips ?? (_vips = new InputList<Inputs.LoadBalancerVipsArgs>());
            set => _vips = value;
        }

        /// <summary>
        /// VRID used when high-availability mode enabled.
        /// </summary>
        [Input("vrid", required: true)]
        public Input<int> Vrid { get; set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public LoadBalancerArgs()
        {
        }
    }

    public sealed class LoadBalancerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default gateway address of the Load Balancer.	 
        /// </summary>
        [Input("defaultRoute")]
        public Input<string>? DefaultRoute { get; set; }

        /// <summary>
        /// The description of the VIP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the server connected to the resource.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The flag of enable/disable high-availability mode.
        /// </summary>
        [Input("highAvailability")]
        public Input<bool>? HighAvailability { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The primary IP address of the Load Balancer.
        /// </summary>
        [Input("ipaddress1")]
        public Input<string>? Ipaddress1 { get; set; }

        /// <summary>
        /// The secondly IP address of the Load Balancer. Used when high-availability mode enabled.
        /// </summary>
        [Input("ipaddress2")]
        public Input<string>? Ipaddress2 { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network mask length.
        /// </summary>
        [Input("nwMaskLen")]
        public Input<int>? NwMaskLen { get; set; }

        /// <summary>
        /// The name of the resource plan.  
        /// Valid value is one of the following: [ "standard" (default) / "highspec"]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The ID of the Switch connected to the Load Balancer.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("vipIds")]
        private InputList<string>? _vipIds;
        public InputList<string> VipIds
        {
            get => _vipIds ?? (_vipIds = new InputList<string>());
            set => _vipIds = value;
        }

        [Input("vips")]
        private InputList<Inputs.LoadBalancerVipsGetArgs>? _vips;

        /// <summary>
        /// VIPs. It contains some attributes to VIPs.
        /// </summary>
        public InputList<Inputs.LoadBalancerVipsGetArgs> Vips
        {
            get => _vips ?? (_vips = new InputList<Inputs.LoadBalancerVipsGetArgs>());
            set => _vips = value;
        }

        /// <summary>
        /// VRID used when high-availability mode enabled.
        /// </summary>
        [Input("vrid")]
        public Input<int>? Vrid { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public LoadBalancerState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class LoadBalancerVipsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The interval seconds for health check access.
        /// </summary>
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        /// <summary>
        /// The description of the VIP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The port number on which Load Balancer listens.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("servers")]
        private InputList<LoadBalancerVipsServersArgs>? _servers;

        /// <summary>
        /// Real servers. It contains some attributes to Servers.
        /// </summary>
        public InputList<LoadBalancerVipsServersArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<LoadBalancerVipsServersArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// The hostname or IP address of sorry server.
        /// </summary>
        [Input("sorryServer")]
        public Input<string>? SorryServer { get; set; }

        /// <summary>
        /// The virtual IP address.
        /// </summary>
        [Input("vip", required: true)]
        public Input<string> Vip { get; set; } = null!;

        public LoadBalancerVipsArgs()
        {
        }
    }

    public sealed class LoadBalancerVipsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The interval seconds for health check access.
        /// </summary>
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        /// <summary>
        /// The description of the VIP.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The port number on which Load Balancer listens.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("servers")]
        private InputList<LoadBalancerVipsServersGetArgs>? _servers;

        /// <summary>
        /// Real servers. It contains some attributes to Servers.
        /// </summary>
        public InputList<LoadBalancerVipsServersGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<LoadBalancerVipsServersGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// The hostname or IP address of sorry server.
        /// </summary>
        [Input("sorryServer")]
        public Input<string>? SorryServer { get; set; }

        /// <summary>
        /// The virtual IP address.
        /// </summary>
        [Input("vip", required: true)]
        public Input<string> Vip { get; set; } = null!;

        public LoadBalancerVipsGetArgs()
        {
        }
    }

    public sealed class LoadBalancerVipsServersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        [Input("checkPath")]
        public Input<string>? CheckPath { get; set; }

        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "https" / "ping" / "tcp" ]
        /// </summary>
        [Input("checkProtocol", required: true)]
        public Input<string> CheckProtocol { get; set; } = null!;

        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        [Input("checkStatus")]
        public Input<string>? CheckStatus { get; set; }

        /// <summary>
        /// The flag of enable/disable the Server.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IP address of the Server.
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        public LoadBalancerVipsServersArgs()
        {
        }
    }

    public sealed class LoadBalancerVipsServersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        [Input("checkPath")]
        public Input<string>? CheckPath { get; set; }

        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "https" / "ping" / "tcp" ]
        /// </summary>
        [Input("checkProtocol", required: true)]
        public Input<string> CheckProtocol { get; set; } = null!;

        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        [Input("checkStatus")]
        public Input<string>? CheckStatus { get; set; }

        /// <summary>
        /// The flag of enable/disable the Server.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IP address of the Server.
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        public LoadBalancerVipsServersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class LoadBalancerVips
    {
        /// <summary>
        /// The interval seconds for health check access.
        /// </summary>
        public readonly int? DelayLoop;
        /// <summary>
        /// The description of the VIP.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The port number on which Load Balancer listens.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Real servers. It contains some attributes to Servers.
        /// </summary>
        public readonly ImmutableArray<LoadBalancerVipsServers> Servers;
        /// <summary>
        /// The hostname or IP address of sorry server.
        /// </summary>
        public readonly string? SorryServer;
        /// <summary>
        /// The virtual IP address.
        /// </summary>
        public readonly string Vip;

        [OutputConstructor]
        private LoadBalancerVips(
            int? delayLoop,
            string? description,
            int port,
            ImmutableArray<LoadBalancerVipsServers> servers,
            string? sorryServer,
            string vip)
        {
            DelayLoop = delayLoop;
            Description = description;
            Port = port;
            Servers = servers;
            SorryServer = sorryServer;
            Vip = vip;
        }
    }

    [OutputType]
    public sealed class LoadBalancerVipsServers
    {
        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        public readonly string? CheckPath;
        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "https" / "ping" / "tcp" ]
        /// </summary>
        public readonly string CheckProtocol;
        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        public readonly string? CheckStatus;
        /// <summary>
        /// The flag of enable/disable the Server.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The IP address of the Server.
        /// </summary>
        public readonly string Ipaddress;

        [OutputConstructor]
        private LoadBalancerVipsServers(
            string? checkPath,
            string checkProtocol,
            string? checkStatus,
            bool? enabled,
            string ipaddress)
        {
            CheckPath = checkPath;
            CheckProtocol = checkProtocol;
            CheckStatus = checkStatus;
            Enabled = enabled;
            Ipaddress = ipaddress;
        }
    }
    }
}
