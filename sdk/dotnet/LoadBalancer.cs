// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud Load Balancer.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Sakuracloud = Pulumi.Sakuracloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobarSwitch = new Sakuracloud.Switch("foobarSwitch", new Sakuracloud.SwitchArgs
    ///         {
    ///         });
    ///         var foobarLoadBalancer = new Sakuracloud.LoadBalancer("foobarLoadBalancer", new Sakuracloud.LoadBalancerArgs
    ///         {
    ///             Plan = "standard",
    ///             NetworkInterface = new Sakuracloud.Inputs.LoadBalancerNetworkInterfaceArgs
    ///             {
    ///                 SwitchId = foobarSwitch.Id,
    ///                 Vrid = 1,
    ///                 IpAddresses = 
    ///                 {
    ///                     "192.168.11.101",
    ///                 },
    ///                 Netmask = 24,
    ///                 Gateway = "192.168.11.1",
    ///             },
    ///             Description = "description",
    ///             Tags = 
    ///             {
    ///                 "tag1",
    ///                 "tag2",
    ///             },
    ///             Vips = 
    ///             {
    ///                 new Sakuracloud.Inputs.LoadBalancerVipArgs
    ///                 {
    ///                     Vip = "192.168.11.201",
    ///                     Port = 80,
    ///                     DelayLoop = 10,
    ///                     SorryServer = "192.168.11.21",
    ///                     Servers = 
    ///                     {
    ///                         new Sakuracloud.Inputs.LoadBalancerVipServerArgs
    ///                         {
    ///                             IpAddress = "192.168.11.51",
    ///                             Protocol = "http",
    ///                             Path = "/health",
    ///                             Status = "200",
    ///                         },
    ///                         new Sakuracloud.Inputs.LoadBalancerVipServerArgs
    ///                         {
    ///                             IpAddress = "192.168.11.52",
    ///                             Protocol = "http",
    ///                             Path = "/health",
    ///                             Status = "200",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/loadBalancer:LoadBalancer")]
    public partial class LoadBalancer : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the VIP. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the LoadBalancer.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An `network_interface` block as defined below.
        /// </summary>
        [Output("networkInterface")]
        public Output<Outputs.LoadBalancerNetworkInterface> NetworkInterface { get; private set; } = null!;

        /// <summary>
        /// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]. Changing this forces a new resource to be created. Default:`standard`.
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the LoadBalancer.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// One or more `vip` blocks as defined below.
        /// </summary>
        [Output("vips")]
        public Output<ImmutableArray<Outputs.LoadBalancerVip>> Vips { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the LoadBalancer will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/loadBalancer:LoadBalancer", name, args ?? new LoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the VIP. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the LoadBalancer.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An `network_interface` block as defined below.
        /// </summary>
        [Input("networkInterface", required: true)]
        public Input<Inputs.LoadBalancerNetworkInterfaceArgs> NetworkInterface { get; set; } = null!;

        /// <summary>
        /// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]. Changing this forces a new resource to be created. Default:`standard`.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the LoadBalancer.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("vips")]
        private InputList<Inputs.LoadBalancerVipArgs>? _vips;

        /// <summary>
        /// One or more `vip` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LoadBalancerVipArgs> Vips
        {
            get => _vips ?? (_vips = new InputList<Inputs.LoadBalancerVipArgs>());
            set => _vips = value;
        }

        /// <summary>
        /// The name of zone that the LoadBalancer will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public LoadBalancerArgs()
        {
        }
    }

    public sealed class LoadBalancerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the VIP. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the LoadBalancer.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An `network_interface` block as defined below.
        /// </summary>
        [Input("networkInterface")]
        public Input<Inputs.LoadBalancerNetworkInterfaceGetArgs>? NetworkInterface { get; set; }

        /// <summary>
        /// The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]. Changing this forces a new resource to be created. Default:`standard`.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the LoadBalancer.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("vips")]
        private InputList<Inputs.LoadBalancerVipGetArgs>? _vips;

        /// <summary>
        /// One or more `vip` blocks as defined below.
        /// </summary>
        public InputList<Inputs.LoadBalancerVipGetArgs> Vips
        {
            get => _vips ?? (_vips = new InputList<Inputs.LoadBalancerVipGetArgs>());
            set => _vips = value;
        }

        /// <summary>
        /// The name of zone that the LoadBalancer will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public LoadBalancerState()
        {
        }
    }
}
