// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public static partial class Invokes
    {
        public static Task<GetDiskResult> GetDisk(GetDiskArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("sakuracloud:index/getDisk:getDisk", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetDiskArgs : Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetDiskFilterArgs? Filter { get; set; }

        [Input("zone")]
        public string? Zone { get; set; }

        public GetDiskArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetDiskResult
    {
        public readonly string Connector;
        public readonly string Description;
        public readonly Outputs.GetDiskFilterResult? Filter;
        public readonly string IconId;
        public readonly string Name;
        public readonly string Plan;
        public readonly string ServerId;
        public readonly int Size;
        public readonly string SourceArchiveId;
        public readonly string SourceDiskId;
        public readonly ImmutableArray<string> Tags;
        public readonly string Zone;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDiskResult(
            string connector,
            string description,
            Outputs.GetDiskFilterResult? filter,
            string iconId,
            string name,
            string plan,
            string serverId,
            int size,
            string sourceArchiveId,
            string sourceDiskId,
            ImmutableArray<string> tags,
            string zone,
            string id)
        {
            Connector = connector;
            Description = description;
            Filter = filter;
            IconId = iconId;
            Name = name;
            Plan = plan;
            ServerId = serverId;
            Size = size;
            SourceArchiveId = sourceArchiveId;
            SourceDiskId = sourceDiskId;
            Tags = tags;
            Zone = zone;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetDiskFilterArgs : Pulumi.InvokeArgs
    {
        [Input("conditions")]
        private List<GetDiskFilterConditionsArgs>? _conditions;
        public List<GetDiskFilterConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new List<GetDiskFilterConditionsArgs>());
            set => _conditions = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("names")]
        private List<string>? _names;
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("tags")]
        private List<string>? _tags;
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetDiskFilterArgs()
        {
        }
    }

    public sealed class GetDiskFilterConditionsArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("values", required: true)]
        private List<string>? _values;
        public List<string> Values
        {
            get => _values ?? (_values = new List<string>());
            set => _values = value;
        }

        public GetDiskFilterConditionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetDiskFilterConditionsResult
    {
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetDiskFilterConditionsResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }

    [OutputType]
    public sealed class GetDiskFilterResult
    {
        public readonly ImmutableArray<GetDiskFilterConditionsResult> Conditions;
        public readonly string? Id;
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetDiskFilterResult(
            ImmutableArray<GetDiskFilterConditionsResult> conditions,
            string? id,
            ImmutableArray<string> names,
            ImmutableArray<string> tags)
        {
            Conditions = conditions;
            Id = id;
            Names = names;
            Tags = tags;
        }
    }
    }
}
