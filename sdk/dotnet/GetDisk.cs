// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a SakuraCloud Disk.
        /// 
        /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/disk.html.markdown.
        /// </summary>
        public static Task<GetDiskResult> GetDisk(GetDiskArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDiskResult>("sakuracloud:index/getDisk:getDisk", args, options.WithVersion());
    }

    public sealed class GetDiskArgs : Pulumi.ResourceArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetDiskFiltersArgs>? _filters;

        /// <summary>
        /// The map of filter key and value.
        /// </summary>
        public InputList<Inputs.GetDiskFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDiskFiltersArgs>());
            set => _filters = value;
        }

        [Input("nameSelectors")]
        private InputList<string>? _nameSelectors;

        /// <summary>
        /// The list of names to filtering.
        /// </summary>
        public InputList<string> NameSelectors
        {
            get => _nameSelectors ?? (_nameSelectors = new InputList<string>());
            set => _nameSelectors = value;
        }

        [Input("tagSelectors")]
        private InputList<string>? _tagSelectors;

        /// <summary>
        /// The list of tags to filtering.
        /// </summary>
        public InputList<string> TagSelectors
        {
            get => _tagSelectors ?? (_tagSelectors = new InputList<string>());
            set => _tagSelectors = value;
        }

        /// <summary>
        /// The ID of the zone.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetDiskArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetDiskResult
    {
        public readonly string Connector;
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetDiskFiltersResult> Filters;
        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> NameSelectors;
        /// <summary>
        /// The plan of the resource (`ssd`/`hdd`).
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// The ID of the server connected to the disk.
        /// </summary>
        public readonly string ServerId;
        /// <summary>
        /// Size of the resource (unit:`GB`).
        /// </summary>
        public readonly int Size;
        public readonly ImmutableArray<string> TagSelectors;
        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        public readonly string Zone;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDiskResult(
            string connector,
            string description,
            ImmutableArray<Outputs.GetDiskFiltersResult> filters,
            string iconId,
            string name,
            ImmutableArray<string> nameSelectors,
            string plan,
            string serverId,
            int size,
            ImmutableArray<string> tagSelectors,
            ImmutableArray<string> tags,
            string zone,
            string id)
        {
            Connector = connector;
            Description = description;
            Filters = filters;
            IconId = iconId;
            Name = name;
            NameSelectors = nameSelectors;
            Plan = plan;
            ServerId = serverId;
            Size = size;
            TagSelectors = tagSelectors;
            Tags = tags;
            Zone = zone;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetDiskFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GetDiskFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetDiskFiltersResult
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetDiskFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }
    }
}
