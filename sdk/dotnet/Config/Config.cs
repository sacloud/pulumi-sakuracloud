// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;

namespace Pulumi.SakuraCloud
{
    public static class Config
    {
        private static readonly Pulumi.Config __config = new Pulumi.Config("sakuracloud");

        /// <summary>
        /// The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the
        /// `SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is
        /// specified
        /// </summary>
        public static string? AcceptLanguage { get; set; } = __config.Get("acceptLanguage");

        /// <summary>
        /// The maximum number of SakuraCloud API calls per second. It can also be sourced from the
        /// `SAKURACLOUD_RATE_LIMIT` environment variables, or via a shared credentials file if `profile` is specified.
        /// Default:`10`
        /// </summary>
        public static int? ApiRequestRateLimit { get; set; } = __config.GetInt32("apiRequestRateLimit");

        /// <summary>
        /// The timeout seconds for each SakuraCloud API call. It can also be sourced from the
        /// `SAKURACLOUD_API_REQUEST_TIMEOUT` environment variables, or via a shared credentials file if `profile` is
        /// specified. Default:`300`
        /// </summary>
        public static int? ApiRequestTimeout { get; set; } = __config.GetInt32("apiRequestTimeout");

        /// <summary>
        /// The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment
        /// variables, or via a shared credentials file if `profile` is specified.
        /// Default:`https://secure.sakura.ad.jp/cloud/zone`
        /// </summary>
        public static string? ApiRootUrl { get; set; } = __config.Get("apiRootUrl");

        /// <summary>
        /// The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can
        /// also be sourced from the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is
        /// specified
        /// </summary>
        public static string? FakeMode { get; set; } = __config.Get("fakeMode");

        /// <summary>
        /// The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping
        /// the provider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared
        /// credentials file if `profile` is specified
        /// </summary>
        public static string? FakeStorePath { get; set; } = __config.Get("fakeStorePath");

        /// <summary>
        /// The profile name of your SakuraCloud account. Default:`default`
        /// </summary>
        public static string? Profile { get; set; } = __config.Get("profile") ?? Utilities.GetEnv("SAKURACLOUD_PROFILE") ?? "default";

        /// <summary>
        /// The maximum number of API call retries used when SakuraCloud API returns status code `423` or `503`. It can
        /// also be sourced from the `SAKURACLOUD_RETRY_MAX` environment variables, or via a shared credentials file if
        /// `profile` is specified. Default:`100`
        /// </summary>
        public static int? RetryMax { get; set; } = __config.GetInt32("retryMax");

        /// <summary>
        /// The maximum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code
        /// `423` or `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MAX` environment variables, or via a
        /// shared credentials file if `profile` is specified
        /// </summary>
        public static int? RetryWaitMax { get; set; } = __config.GetInt32("retryWaitMax");

        /// <summary>
        /// The minimum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code
        /// `423` or `503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MIN` environment variables, or via a
        /// shared credentials file if `profile` is specified
        /// </summary>
        public static int? RetryWaitMin { get; set; } = __config.GetInt32("retryWaitMin");

        /// <summary>
        /// The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the
        /// `SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is
        /// specified
        /// </summary>
        public static string? Secret { get; set; } = __config.Get("secret") ?? Utilities.GetEnv("SAKURACLOUD_ACCESS_TOKEN_SECRET") ?? "";

        /// <summary>
        /// The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the
        /// `SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified
        /// </summary>
        public static string? Token { get; set; } = __config.Get("token") ?? Utilities.GetEnv("SAKURACLOUD_ACCESS_TOKEN") ?? "";

        /// <summary>
        /// The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment
        /// variables, or via a shared credentials file if `profile` is specified
        /// </summary>
        public static string? Trace { get; set; } = __config.Get("trace");

        /// <summary>
        /// The name of zone to use as default. It must be provided, but it can also be sourced from the
        /// `SAKURACLOUD_ZONE` environment variables, or via a shared credentials file if `profile` is specified
        /// </summary>
        public static string? Zone { get; set; } = __config.Get("zone") ?? Utilities.GetEnv("SAKURACLOUD_ZONE") ?? "is1b";

        /// <summary>
        /// A list of available SakuraCloud zone name. It can also be sourced via a shared credentials file if `profile`
        /// is specified. Default:[`is1a`, `is1b`, `tk1a`, `tk1v`]
        /// </summary>
        public static ImmutableArray<string> Zones { get; set; } = __config.GetObject<ImmutableArray<string>>("zones");

    }
    namespace ConfigTypes
    {
    }
}
