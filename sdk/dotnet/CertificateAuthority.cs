// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud sakuracloud_certificate_authority.
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/certificateAuthority:CertificateAuthority")]
    public partial class CertificateAuthority : Pulumi.CustomResource
    {
        /// <summary>
        /// The body of the CA's certificate in PEM format.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// One or more `client` blocks as defined below.
        /// </summary>
        [Output("clients")]
        public Output<ImmutableArray<Outputs.CertificateAuthorityClient>> Clients { get; private set; } = null!;

        /// <summary>
        /// The URL of the CRL.
        /// </summary>
        [Output("crlUrl")]
        public Output<string> CrlUrl { get; private set; } = null!;

        /// <summary>
        /// The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the Certificate Authority.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The date on which the certificate validity period ends, in RFC3339 format.
        /// </summary>
        [Output("notAfter")]
        public Output<string> NotAfter { get; private set; } = null!;

        /// <summary>
        /// The date on which the certificate validity period begins, in RFC3339 format.
        /// </summary>
        [Output("notBefore")]
        public Output<string> NotBefore { get; private set; } = null!;

        /// <summary>
        /// The body of the CA's certificate in PEM format.
        /// </summary>
        [Output("serialNumber")]
        public Output<string> SerialNumber { get; private set; } = null!;

        /// <summary>
        /// One or more `server` blocks as defined below.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.CertificateAuthorityServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// A `subject` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Output("subject")]
        public Output<Outputs.CertificateAuthoritySubject> Subject { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the Certificate Authority.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.
        /// </summary>
        [Output("validityPeriodHours")]
        public Output<int> ValidityPeriodHours { get; private set; } = null!;


        /// <summary>
        /// Create a CertificateAuthority resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificateAuthority(string name, CertificateAuthorityArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/certificateAuthority:CertificateAuthority", name, args ?? new CertificateAuthorityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificateAuthority(string name, Input<string> id, CertificateAuthorityState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/certificateAuthority:CertificateAuthority", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificateAuthority resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificateAuthority Get(string name, Input<string> id, CertificateAuthorityState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificateAuthority(name, id, state, options);
        }
    }

    public sealed class CertificateAuthorityArgs : Pulumi.ResourceArgs
    {
        [Input("clients")]
        private InputList<Inputs.CertificateAuthorityClientArgs>? _clients;

        /// <summary>
        /// One or more `client` blocks as defined below.
        /// </summary>
        public InputList<Inputs.CertificateAuthorityClientArgs> Clients
        {
            get => _clients ?? (_clients = new InputList<Inputs.CertificateAuthorityClientArgs>());
            set => _clients = value;
        }

        /// <summary>
        /// The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the Certificate Authority.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("servers")]
        private InputList<Inputs.CertificateAuthorityServerArgs>? _servers;

        /// <summary>
        /// One or more `server` blocks as defined below.
        /// </summary>
        public InputList<Inputs.CertificateAuthorityServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.CertificateAuthorityServerArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// A `subject` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subject", required: true)]
        public Input<Inputs.CertificateAuthoritySubjectArgs> Subject { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Certificate Authority.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.
        /// </summary>
        [Input("validityPeriodHours", required: true)]
        public Input<int> ValidityPeriodHours { get; set; } = null!;

        public CertificateAuthorityArgs()
        {
        }
    }

    public sealed class CertificateAuthorityState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The body of the CA's certificate in PEM format.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("clients")]
        private InputList<Inputs.CertificateAuthorityClientGetArgs>? _clients;

        /// <summary>
        /// One or more `client` blocks as defined below.
        /// </summary>
        public InputList<Inputs.CertificateAuthorityClientGetArgs> Clients
        {
            get => _clients ?? (_clients = new InputList<Inputs.CertificateAuthorityClientGetArgs>());
            set => _clients = value;
        }

        /// <summary>
        /// The URL of the CRL.
        /// </summary>
        [Input("crlUrl")]
        public Input<string>? CrlUrl { get; set; }

        /// <summary>
        /// The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the Certificate Authority.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The date on which the certificate validity period ends, in RFC3339 format.
        /// </summary>
        [Input("notAfter")]
        public Input<string>? NotAfter { get; set; }

        /// <summary>
        /// The date on which the certificate validity period begins, in RFC3339 format.
        /// </summary>
        [Input("notBefore")]
        public Input<string>? NotBefore { get; set; }

        /// <summary>
        /// The body of the CA's certificate in PEM format.
        /// </summary>
        [Input("serialNumber")]
        public Input<string>? SerialNumber { get; set; }

        [Input("servers")]
        private InputList<Inputs.CertificateAuthorityServerGetArgs>? _servers;

        /// <summary>
        /// One or more `server` blocks as defined below.
        /// </summary>
        public InputList<Inputs.CertificateAuthorityServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.CertificateAuthorityServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// A `subject` block as defined below. Changing this forces a new resource to be created.
        /// </summary>
        [Input("subject")]
        public Input<Inputs.CertificateAuthoritySubjectGetArgs>? Subject { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Certificate Authority.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.
        /// </summary>
        [Input("validityPeriodHours")]
        public Input<int>? ValidityPeriodHours { get; set; }

        public CertificateAuthorityState()
        {
        }
    }
}
