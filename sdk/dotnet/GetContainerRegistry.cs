// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetContainerRegistry
    {
        /// <summary>
        /// Get information about an existing Container Registry.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetContainerRegistry.InvokeAsync(new Sakuracloud.GetContainerRegistryArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetContainerRegistryFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetContainerRegistryResult> InvokeAsync(GetContainerRegistryArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetContainerRegistryResult>("sakuracloud:index/getContainerRegistry:getContainerRegistry", args ?? new GetContainerRegistryArgs(), options.WithVersion());
    }


    public sealed class GetContainerRegistryArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetContainerRegistryFilterArgs? Filter { get; set; }

        public GetContainerRegistryArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetContainerRegistryResult
    {
        /// <summary>
        /// The level of access that allow to users. This will be one of [`readwrite`/`readonly`/`none`].
        /// </summary>
        public readonly string AccessLevel;
        /// <summary>
        /// The description of the ContainerRegistry.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetContainerRegistryFilterResult? Filter;
        /// <summary>
        /// The FQDN for accessing the container registry. FQDN is built from `subdomain_label` + `.sakuracr.jp`.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The icon id attached to the ContainerRegistry.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The user name used to authenticate remote access.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The label at the lowest of the FQDN used when be accessed from users.
        /// </summary>
        public readonly string SubdomainLabel;
        /// <summary>
        /// Any tags assigned to the ContainerRegistry.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// A list of `user` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetContainerRegistryUserResult> Users;
        /// <summary>
        /// The alias for accessing the container registry.
        /// </summary>
        public readonly string VirtualDomain;

        [OutputConstructor]
        private GetContainerRegistryResult(
            string accessLevel,

            string description,

            Outputs.GetContainerRegistryFilterResult? filter,

            string fqdn,

            string iconId,

            string id,

            string name,

            string subdomainLabel,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetContainerRegistryUserResult> users,

            string virtualDomain)
        {
            AccessLevel = accessLevel;
            Description = description;
            Filter = filter;
            Fqdn = fqdn;
            IconId = iconId;
            Id = id;
            Name = name;
            SubdomainLabel = subdomainLabel;
            Tags = tags;
            Users = users;
            VirtualDomain = virtualDomain;
        }
    }
}
