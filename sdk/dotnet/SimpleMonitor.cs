// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud Simple Monitor resource. This can be used to create, update, and delete Simple Monitors.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/simple_monitor.html.markdown.
    /// </summary>
    public partial class SimpleMonitor : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The flag of enable/disable monitoring.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Health check rules. It contains some attributes to Health Check.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.SimpleMonitorHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The flag of enable/disable notification by E-mail.
        /// </summary>
        [Output("notifyEmailEnabled")]
        public Output<bool?> NotifyEmailEnabled { get; private set; } = null!;

        /// <summary>
        /// The flag of enable/disable HTML format for E-mail.
        /// </summary>
        [Output("notifyEmailHtml")]
        public Output<bool?> NotifyEmailHtml { get; private set; } = null!;

        /// <summary>
        /// The intervals of notify (unit:`second`).  
        /// </summary>
        [Output("notifyInterval")]
        public Output<int?> NotifyInterval { get; private set; } = null!;

        /// <summary>
        /// The flag of enable/disable notification by slack.
        /// </summary>
        [Output("notifySlackEnabled")]
        public Output<bool?> NotifySlackEnabled { get; private set; } = null!;

        /// <summary>
        /// The webhook URL of destination of slack notification.
        /// </summary>
        [Output("notifySlackWebhook")]
        public Output<string?> NotifySlackWebhook { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The HostName or IP address of monitoring target.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;


        /// <summary>
        /// Create a SimpleMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SimpleMonitor(string name, SimpleMonitorArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/simpleMonitor:SimpleMonitor", name, args, MakeResourceOptions(options, ""))
        {
        }

        private SimpleMonitor(string name, Input<string> id, SimpleMonitorState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/simpleMonitor:SimpleMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SimpleMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SimpleMonitor Get(string name, Input<string> id, SimpleMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new SimpleMonitor(name, id, state, options);
        }
    }

    public sealed class SimpleMonitorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag of enable/disable monitoring.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Health check rules. It contains some attributes to Health Check.
        /// </summary>
        [Input("healthCheck", required: true)]
        public Input<Inputs.SimpleMonitorHealthCheckArgs> HealthCheck { get; set; } = null!;

        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag of enable/disable notification by E-mail.
        /// </summary>
        [Input("notifyEmailEnabled")]
        public Input<bool>? NotifyEmailEnabled { get; set; }

        /// <summary>
        /// The flag of enable/disable HTML format for E-mail.
        /// </summary>
        [Input("notifyEmailHtml")]
        public Input<bool>? NotifyEmailHtml { get; set; }

        /// <summary>
        /// The intervals of notify (unit:`second`).  
        /// </summary>
        [Input("notifyInterval")]
        public Input<int>? NotifyInterval { get; set; }

        /// <summary>
        /// The flag of enable/disable notification by slack.
        /// </summary>
        [Input("notifySlackEnabled")]
        public Input<bool>? NotifySlackEnabled { get; set; }

        /// <summary>
        /// The webhook URL of destination of slack notification.
        /// </summary>
        [Input("notifySlackWebhook")]
        public Input<string>? NotifySlackWebhook { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The HostName or IP address of monitoring target.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        public SimpleMonitorArgs()
        {
        }
    }

    public sealed class SimpleMonitorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag of enable/disable monitoring.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Health check rules. It contains some attributes to Health Check.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.SimpleMonitorHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag of enable/disable notification by E-mail.
        /// </summary>
        [Input("notifyEmailEnabled")]
        public Input<bool>? NotifyEmailEnabled { get; set; }

        /// <summary>
        /// The flag of enable/disable HTML format for E-mail.
        /// </summary>
        [Input("notifyEmailHtml")]
        public Input<bool>? NotifyEmailHtml { get; set; }

        /// <summary>
        /// The intervals of notify (unit:`second`).  
        /// </summary>
        [Input("notifyInterval")]
        public Input<int>? NotifyInterval { get; set; }

        /// <summary>
        /// The flag of enable/disable notification by slack.
        /// </summary>
        [Input("notifySlackEnabled")]
        public Input<bool>? NotifySlackEnabled { get; set; }

        /// <summary>
        /// The webhook URL of destination of slack notification.
        /// </summary>
        [Input("notifySlackWebhook")]
        public Input<string>? NotifySlackWebhook { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The HostName or IP address of monitoring target.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        public SimpleMonitorState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SimpleMonitorHealthCheckArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The community name used in snmp health check.
        /// </summary>
        [Input("community")]
        public Input<string>? Community { get; set; }

        /// <summary>
        /// Health check access interval (unit:`second`). 
        /// </summary>
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        /// <summary>
        /// The expect value used in dns/snmp health check.
        /// </summary>
        [Input("excepctedData")]
        public Input<string>? ExcepctedData { get; set; }

        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// The OID used in snmp health check.
        /// </summary>
        [Input("oid")]
        public Input<string>? Oid { get; set; }

        /// <summary>
        /// The Basic Auth Password request path used in http/https health check access.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Port number used in health check access.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "https" / "ping" / "tcp" / "dns" / "ssh" / "smtp" / "pop3" / "snmp" / "sslcertificate" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The QName value used in dns health check access.
        /// </summary>
        [Input("qname")]
        public Input<string>? Qname { get; set; }

        /// <summary>
        /// The number of remaining days used in ssh-certificate check.
        /// </summary>
        [Input("remainingDays")]
        public Input<int>? RemainingDays { get; set; }

        /// <summary>
        /// The flag of enable/disable SNI.
        /// </summary>
        [Input("sni")]
        public Input<bool>? Sni { get; set; }

        /// <summary>
        /// SNMP cersion used in snmp health check.
        /// </summary>
        [Input("snmpVersion")]
        public Input<string>? SnmpVersion { get; set; }

        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The Basic Auth Username used in http/https health check access.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public SimpleMonitorHealthCheckArgs()
        {
        }
    }

    public sealed class SimpleMonitorHealthCheckGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The community name used in snmp health check.
        /// </summary>
        [Input("community")]
        public Input<string>? Community { get; set; }

        /// <summary>
        /// Health check access interval (unit:`second`). 
        /// </summary>
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        /// <summary>
        /// The expect value used in dns/snmp health check.
        /// </summary>
        [Input("excepctedData")]
        public Input<string>? ExcepctedData { get; set; }

        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// The OID used in snmp health check.
        /// </summary>
        [Input("oid")]
        public Input<string>? Oid { get; set; }

        /// <summary>
        /// The Basic Auth Password request path used in http/https health check access.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Port number used in health check access.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "https" / "ping" / "tcp" / "dns" / "ssh" / "smtp" / "pop3" / "snmp" / "sslcertificate" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The QName value used in dns health check access.
        /// </summary>
        [Input("qname")]
        public Input<string>? Qname { get; set; }

        /// <summary>
        /// The number of remaining days used in ssh-certificate check.
        /// </summary>
        [Input("remainingDays")]
        public Input<int>? RemainingDays { get; set; }

        /// <summary>
        /// The flag of enable/disable SNI.
        /// </summary>
        [Input("sni")]
        public Input<bool>? Sni { get; set; }

        /// <summary>
        /// SNMP cersion used in snmp health check.
        /// </summary>
        [Input("snmpVersion")]
        public Input<string>? SnmpVersion { get; set; }

        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The Basic Auth Username used in http/https health check access.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public SimpleMonitorHealthCheckGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SimpleMonitorHealthCheck
    {
        /// <summary>
        /// The community name used in snmp health check.
        /// </summary>
        public readonly string? Community;
        /// <summary>
        /// Health check access interval (unit:`second`). 
        /// </summary>
        public readonly int? DelayLoop;
        /// <summary>
        /// The expect value used in dns/snmp health check.
        /// </summary>
        public readonly string? ExcepctedData;
        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        public readonly string? HostHeader;
        /// <summary>
        /// The OID used in snmp health check.
        /// </summary>
        public readonly string? Oid;
        /// <summary>
        /// The Basic Auth Password request path used in http/https health check access.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Port number used in health check access.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "https" / "ping" / "tcp" / "dns" / "ssh" / "smtp" / "pop3" / "snmp" / "sslcertificate" ]
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The QName value used in dns health check access.
        /// </summary>
        public readonly string? Qname;
        /// <summary>
        /// The number of remaining days used in ssh-certificate check.
        /// </summary>
        public readonly int? RemainingDays;
        /// <summary>
        /// The flag of enable/disable SNI.
        /// </summary>
        public readonly bool? Sni;
        /// <summary>
        /// SNMP cersion used in snmp health check.
        /// </summary>
        public readonly string? SnmpVersion;
        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The Basic Auth Username used in http/https health check access.
        /// </summary>
        public readonly string? Username;

        [OutputConstructor]
        private SimpleMonitorHealthCheck(
            string? community,
            int? delayLoop,
            string? excepctedData,
            string? hostHeader,
            string? oid,
            string? password,
            string? path,
            int port,
            string protocol,
            string? qname,
            int? remainingDays,
            bool? sni,
            string? snmpVersion,
            string? status,
            string? username)
        {
            Community = community;
            DelayLoop = delayLoop;
            ExcepctedData = excepctedData;
            HostHeader = hostHeader;
            Oid = oid;
            Password = password;
            Path = path;
            Port = port;
            Protocol = protocol;
            Qname = qname;
            RemainingDays = remainingDays;
            Sni = sni;
            SnmpVersion = snmpVersion;
            Status = status;
            Username = username;
        }
    }
    }
}
