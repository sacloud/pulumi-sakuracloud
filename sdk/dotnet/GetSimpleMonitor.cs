// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a SakuraCloud Simple Monitor.
        /// 
        /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/simple_monitor.html.markdown.
        /// </summary>
        public static Task<GetSimpleMonitorResult> GetSimpleMonitor(GetSimpleMonitorArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSimpleMonitorResult>("sakuracloud:index/getSimpleMonitor:getSimpleMonitor", args, options.WithVersion());
    }

    public sealed class GetSimpleMonitorArgs : Pulumi.ResourceArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSimpleMonitorFiltersArgs>? _filters;

        /// <summary>
        /// The map of filter key and value.
        /// </summary>
        public InputList<Inputs.GetSimpleMonitorFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSimpleMonitorFiltersArgs>());
            set => _filters = value;
        }

        [Input("nameSelectors")]
        private InputList<string>? _nameSelectors;

        /// <summary>
        /// The list of names to filtering.
        /// </summary>
        public InputList<string> NameSelectors
        {
            get => _nameSelectors ?? (_nameSelectors = new InputList<string>());
            set => _nameSelectors = value;
        }

        [Input("tagSelectors")]
        private InputList<string>? _tagSelectors;

        /// <summary>
        /// The list of tags to filtering.
        /// </summary>
        public InputList<string> TagSelectors
        {
            get => _tagSelectors ?? (_tagSelectors = new InputList<string>());
            set => _tagSelectors = value;
        }

        public GetSimpleMonitorArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetSimpleMonitorResult
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The flag of enable/disable monitoring.
        /// </summary>
        public readonly bool Enabled;
        public readonly ImmutableArray<Outputs.GetSimpleMonitorFiltersResult> Filters;
        /// <summary>
        /// Health check rules. It contains some attributes to Health Check.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSimpleMonitorHealthChecksResult> HealthChecks;
        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        public readonly string IconId;
        public readonly ImmutableArray<string> NameSelectors;
        /// <summary>
        /// The flag of enable/disable notification by E-mail.
        /// </summary>
        public readonly bool NotifyEmailEnabled;
        /// <summary>
        /// The flag of enable/disable HTML format for E-mail.
        /// </summary>
        public readonly bool NotifyEmailHtml;
        /// <summary>
        /// The intervals of notify (unit:`second`).  
        /// </summary>
        public readonly int NotifyInterval;
        /// <summary>
        /// The flag of enable/disable notification by slack.
        /// </summary>
        public readonly bool NotifySlackEnabled;
        /// <summary>
        /// The webhook URL of destination of slack notification.
        /// </summary>
        public readonly string NotifySlackWebhook;
        public readonly ImmutableArray<string> TagSelectors;
        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The HostName or IP address of monitoring target.
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetSimpleMonitorResult(
            string description,
            bool enabled,
            ImmutableArray<Outputs.GetSimpleMonitorFiltersResult> filters,
            ImmutableArray<Outputs.GetSimpleMonitorHealthChecksResult> healthChecks,
            string iconId,
            ImmutableArray<string> nameSelectors,
            bool notifyEmailEnabled,
            bool notifyEmailHtml,
            int notifyInterval,
            bool notifySlackEnabled,
            string notifySlackWebhook,
            ImmutableArray<string> tagSelectors,
            ImmutableArray<string> tags,
            string target,
            string id)
        {
            Description = description;
            Enabled = enabled;
            Filters = filters;
            HealthChecks = healthChecks;
            IconId = iconId;
            NameSelectors = nameSelectors;
            NotifyEmailEnabled = notifyEmailEnabled;
            NotifyEmailHtml = notifyEmailHtml;
            NotifyInterval = notifyInterval;
            NotifySlackEnabled = notifySlackEnabled;
            NotifySlackWebhook = notifySlackWebhook;
            TagSelectors = tagSelectors;
            Tags = tags;
            Target = target;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetSimpleMonitorFiltersArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GetSimpleMonitorFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetSimpleMonitorFiltersResult
    {
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetSimpleMonitorFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }

    [OutputType]
    public sealed class GetSimpleMonitorHealthChecksResult
    {
        /// <summary>
        /// The community name used in snmp health check.
        /// </summary>
        public readonly string Community;
        /// <summary>
        /// Health check access interval (unit:`second`). 
        /// </summary>
        public readonly int DelayLoop;
        /// <summary>
        /// The expect value used in dns/snmp health check.
        /// </summary>
        public readonly string ExcepctedData;
        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        public readonly string HostHeader;
        /// <summary>
        /// The OID used in snmp health check.
        /// </summary>
        public readonly string Oid;
        /// <summary>
        /// The Basic Auth Password request path used in http/https health check access.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Port number used in health check access.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Protocol used in health check.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The QName value used in dns health check access.
        /// </summary>
        public readonly string Qname;
        /// <summary>
        /// The number of remaining days used in ssh-certificate check.
        /// </summary>
        public readonly int RemainingDays;
        /// <summary>
        /// The flag of enable/disable SNI.
        /// </summary>
        public readonly bool Sni;
        /// <summary>
        /// SNMP cersion used in snmp health check.
        /// </summary>
        public readonly string SnmpVersion;
        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The Basic Auth Username used in http/https health check access.
        /// </summary>
        public readonly string? Username;

        [OutputConstructor]
        private GetSimpleMonitorHealthChecksResult(
            string community,
            int delayLoop,
            string excepctedData,
            string hostHeader,
            string oid,
            string? password,
            string path,
            int port,
            string protocol,
            string qname,
            int remainingDays,
            bool sni,
            string snmpVersion,
            string status,
            string? username)
        {
            Community = community;
            DelayLoop = delayLoop;
            ExcepctedData = excepctedData;
            HostHeader = hostHeader;
            Oid = oid;
            Password = password;
            Path = path;
            Port = port;
            Protocol = protocol;
            Qname = qname;
            RemainingDays = remainingDays;
            Sni = sni;
            SnmpVersion = snmpVersion;
            Status = status;
            Username = username;
        }
    }
    }
}
