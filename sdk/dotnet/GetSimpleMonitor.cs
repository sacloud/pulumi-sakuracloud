// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public static partial class Invokes
    {
        public static Task<GetSimpleMonitorResult> GetSimpleMonitor(GetSimpleMonitorArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSimpleMonitorResult>("sakuracloud:index/getSimpleMonitor:getSimpleMonitor", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetSimpleMonitorArgs : Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetSimpleMonitorFilterArgs? Filter { get; set; }

        public GetSimpleMonitorArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetSimpleMonitorResult
    {
        public readonly int DelayLoop;
        public readonly string Description;
        public readonly bool Enabled;
        public readonly Outputs.GetSimpleMonitorFilterResult? Filter;
        public readonly ImmutableArray<Outputs.GetSimpleMonitorHealthChecksResult> HealthChecks;
        public readonly string IconId;
        public readonly bool NotifyEmailEnabled;
        public readonly bool NotifyEmailHtml;
        public readonly int NotifyInterval;
        public readonly bool NotifySlackEnabled;
        public readonly string NotifySlackWebhook;
        public readonly ImmutableArray<string> Tags;
        public readonly string Target;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetSimpleMonitorResult(
            int delayLoop,
            string description,
            bool enabled,
            Outputs.GetSimpleMonitorFilterResult? filter,
            ImmutableArray<Outputs.GetSimpleMonitorHealthChecksResult> healthChecks,
            string iconId,
            bool notifyEmailEnabled,
            bool notifyEmailHtml,
            int notifyInterval,
            bool notifySlackEnabled,
            string notifySlackWebhook,
            ImmutableArray<string> tags,
            string target,
            string id)
        {
            DelayLoop = delayLoop;
            Description = description;
            Enabled = enabled;
            Filter = filter;
            HealthChecks = healthChecks;
            IconId = iconId;
            NotifyEmailEnabled = notifyEmailEnabled;
            NotifyEmailHtml = notifyEmailHtml;
            NotifyInterval = notifyInterval;
            NotifySlackEnabled = notifySlackEnabled;
            NotifySlackWebhook = notifySlackWebhook;
            Tags = tags;
            Target = target;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetSimpleMonitorFilterArgs : Pulumi.InvokeArgs
    {
        [Input("conditions")]
        private List<GetSimpleMonitorFilterConditionsArgs>? _conditions;
        public List<GetSimpleMonitorFilterConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new List<GetSimpleMonitorFilterConditionsArgs>());
            set => _conditions = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("names")]
        private List<string>? _names;
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("tags")]
        private List<string>? _tags;
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetSimpleMonitorFilterArgs()
        {
        }
    }

    public sealed class GetSimpleMonitorFilterConditionsArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("values", required: true)]
        private List<string>? _values;
        public List<string> Values
        {
            get => _values ?? (_values = new List<string>());
            set => _values = value;
        }

        public GetSimpleMonitorFilterConditionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetSimpleMonitorFilterConditionsResult
    {
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetSimpleMonitorFilterConditionsResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }

    [OutputType]
    public sealed class GetSimpleMonitorFilterResult
    {
        public readonly ImmutableArray<GetSimpleMonitorFilterConditionsResult> Conditions;
        public readonly string? Id;
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetSimpleMonitorFilterResult(
            ImmutableArray<GetSimpleMonitorFilterConditionsResult> conditions,
            string? id,
            ImmutableArray<string> names,
            ImmutableArray<string> tags)
        {
            Conditions = conditions;
            Id = id;
            Names = names;
            Tags = tags;
        }
    }

    [OutputType]
    public sealed class GetSimpleMonitorHealthChecksResult
    {
        public readonly string Community;
        public readonly string ExcepctedData;
        public readonly string HostHeader;
        public readonly string Oid;
        public readonly string Password;
        public readonly string Path;
        public readonly int Port;
        public readonly string Protocol;
        public readonly string Qname;
        public readonly int RemainingDays;
        public readonly bool Sni;
        public readonly string SnmpVersion;
        public readonly int Status;
        public readonly string Username;

        [OutputConstructor]
        private GetSimpleMonitorHealthChecksResult(
            string community,
            string excepctedData,
            string hostHeader,
            string oid,
            string password,
            string path,
            int port,
            string protocol,
            string qname,
            int remainingDays,
            bool sni,
            string snmpVersion,
            int status,
            string username)
        {
            Community = community;
            ExcepctedData = excepctedData;
            HostHeader = hostHeader;
            Oid = oid;
            Password = password;
            Path = path;
            Port = port;
            Protocol = protocol;
            Qname = qname;
            RemainingDays = remainingDays;
            Sni = sni;
            SnmpVersion = snmpVersion;
            Status = status;
            Username = username;
        }
    }
    }
}
