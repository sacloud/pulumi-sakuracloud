// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public partial class Database : Pulumi.CustomResource
    {
        [Output("backup")]
        public Output<Outputs.DatabaseBackup?> Backup { get; private set; } = null!;

        /// <summary>
        /// The type of the database. This must be one of [`mariadb`/`postgres`]
        /// </summary>
        [Output("databaseType")]
        public Output<string?> DatabaseType { get; private set; } = null!;

        /// <summary>
        /// The description of the Database. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the Database
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the Database. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkInterface")]
        public Output<Outputs.DatabaseNetworkInterface> NetworkInterface { get; private set; } = null!;

        /// <summary>
        /// The password of default user on the database
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// The password of user that processing a replication
        /// </summary>
        [Output("replicaPassword")]
        public Output<string?> ReplicaPassword { get; private set; } = null!;

        /// <summary>
        /// The name of user that processing a replication
        /// </summary>
        [Output("replicaUser")]
        public Output<string?> ReplicaUser { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the Database
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of default user on the database. The length of this value must be in the range [`3`-`20`]
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the Database will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/database:Database", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : Pulumi.ResourceArgs
    {
        [Input("backup")]
        public Input<Inputs.DatabaseBackupArgs>? Backup { get; set; }

        /// <summary>
        /// The type of the database. This must be one of [`mariadb`/`postgres`]
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// The description of the Database. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the Database
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the Database. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterface", required: true)]
        public Input<Inputs.DatabaseNetworkInterfaceArgs> NetworkInterface { get; set; } = null!;

        /// <summary>
        /// The password of default user on the database
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The password of user that processing a replication
        /// </summary>
        [Input("replicaPassword")]
        public Input<string>? ReplicaPassword { get; set; }

        /// <summary>
        /// The name of user that processing a replication
        /// </summary>
        [Input("replicaUser")]
        public Input<string>? ReplicaUser { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Database
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of default user on the database. The length of this value must be in the range [`3`-`20`]
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        /// <summary>
        /// The name of zone that the Database will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DatabaseArgs()
        {
        }
    }

    public sealed class DatabaseState : Pulumi.ResourceArgs
    {
        [Input("backup")]
        public Input<Inputs.DatabaseBackupGetArgs>? Backup { get; set; }

        /// <summary>
        /// The type of the database. This must be one of [`mariadb`/`postgres`]
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// The description of the Database. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the Database
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the Database. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterface")]
        public Input<Inputs.DatabaseNetworkInterfaceGetArgs>? NetworkInterface { get; set; }

        /// <summary>
        /// The password of default user on the database
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The password of user that processing a replication
        /// </summary>
        [Input("replicaPassword")]
        public Input<string>? ReplicaPassword { get; set; }

        /// <summary>
        /// The name of user that processing a replication
        /// </summary>
        [Input("replicaUser")]
        public Input<string>? ReplicaUser { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Database
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of default user on the database. The length of this value must be in the range [`3`-`20`]
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The name of zone that the Database will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DatabaseState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DatabaseBackupArgs : Pulumi.ResourceArgs
    {
        [Input("time")]
        public Input<string>? Time { get; set; }

        [Input("weekdays")]
        private InputList<string>? _weekdays;
        public InputList<string> Weekdays
        {
            get => _weekdays ?? (_weekdays = new InputList<string>());
            set => _weekdays = value;
        }

        public DatabaseBackupArgs()
        {
        }
    }

    public sealed class DatabaseBackupGetArgs : Pulumi.ResourceArgs
    {
        [Input("time")]
        public Input<string>? Time { get; set; }

        [Input("weekdays")]
        private InputList<string>? _weekdays;
        public InputList<string> Weekdays
        {
            get => _weekdays ?? (_weekdays = new InputList<string>());
            set => _weekdays = value;
        }

        public DatabaseBackupGetArgs()
        {
        }
    }

    public sealed class DatabaseNetworkInterfaceArgs : Pulumi.ResourceArgs
    {
        [Input("gateway", required: true)]
        public Input<string> Gateway { get; set; } = null!;

        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("sourceRanges")]
        private InputList<string>? _sourceRanges;
        public InputList<string> SourceRanges
        {
            get => _sourceRanges ?? (_sourceRanges = new InputList<string>());
            set => _sourceRanges = value;
        }

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        public DatabaseNetworkInterfaceArgs()
        {
        }
    }

    public sealed class DatabaseNetworkInterfaceGetArgs : Pulumi.ResourceArgs
    {
        [Input("gateway", required: true)]
        public Input<string> Gateway { get; set; } = null!;

        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("sourceRanges")]
        private InputList<string>? _sourceRanges;
        public InputList<string> SourceRanges
        {
            get => _sourceRanges ?? (_sourceRanges = new InputList<string>());
            set => _sourceRanges = value;
        }

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        public DatabaseNetworkInterfaceGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DatabaseBackup
    {
        public readonly string? Time;
        public readonly ImmutableArray<string> Weekdays;

        [OutputConstructor]
        private DatabaseBackup(
            string? time,
            ImmutableArray<string> weekdays)
        {
            Time = time;
            Weekdays = weekdays;
        }
    }

    [OutputType]
    public sealed class DatabaseNetworkInterface
    {
        public readonly string Gateway;
        public readonly string IpAddress;
        public readonly int Netmask;
        public readonly int? Port;
        public readonly ImmutableArray<string> SourceRanges;
        public readonly string SwitchId;

        [OutputConstructor]
        private DatabaseNetworkInterface(
            string gateway,
            string ipAddress,
            int netmask,
            int? port,
            ImmutableArray<string> sourceRanges,
            string switchId)
        {
            Gateway = gateway;
            IpAddress = ipAddress;
            Netmask = netmask;
            Port = port;
            SourceRanges = sourceRanges;
            SwitchId = switchId;
        }
    }
    }
}
