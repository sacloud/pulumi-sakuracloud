// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud Database resource. This can be used to create, update, and delete Databases.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/database.html.markdown.
    /// </summary>
    public partial class Database : Pulumi.CustomResource
    {
        /// <summary>
        /// The network address list that allowed connections to the database.
        /// </summary>
        [Output("allowNetworks")]
        public Output<ImmutableArray<string>> AllowNetworks { get; private set; } = null!;

        /// <summary>
        /// The time to perform backup (format:`HH:mm`).
        /// </summary>
        [Output("backupTime")]
        public Output<string?> BackupTime { get; private set; } = null!;

        /// <summary>
        /// Day of the week to get backup.  
        /// Valid values are the following: ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
        /// </summary>
        [Output("backupWeekdays")]
        public Output<ImmutableArray<string>> BackupWeekdays { get; private set; } = null!;

        /// <summary>
        /// The Database type.  
        /// Valid value is one of the following: [ "postgresql" (default) / "mariadb"]
        /// </summary>
        [Output("databaseType")]
        public Output<string?> DatabaseType { get; private set; } = null!;

        /// <summary>
        /// The default route IP address of the database.
        /// </summary>
        [Output("defaultRoute")]
        public Output<string> DefaultRoute { get; private set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Database.
        /// </summary>
        [Output("gracefulShutdownTimeout")]
        public Output<int?> GracefulShutdownTimeout { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The IP address of the database.
        /// </summary>
        [Output("ipaddress1")]
        public Output<string> Ipaddress1 { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network mask length of the database.
        /// </summary>
        [Output("nwMaskLen")]
        public Output<int> NwMaskLen { get; private set; } = null!;

        /// <summary>
        /// The plan (size) of the Database.   
        /// Valid value is one of the following: [ "10g" (default) / "30g" / "90g" / "240g" / "500g" / "1t" ]
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// The number of the port on which the database is listening (default:`5432`).
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        [Output("replicaPassword")]
        public Output<string?> ReplicaPassword { get; private set; } = null!;

        [Output("replicaUser")]
        public Output<string> ReplicaUser { get; private set; } = null!;

        /// <summary>
        /// The ID of the switch connected to the database.
        /// </summary>
        [Output("switchId")]
        public Output<string> SwitchId { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The username to access database.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// The password to access database.
        /// </summary>
        [Output("userPassword")]
        public Output<string> UserPassword { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/database:Database", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : Pulumi.ResourceArgs
    {
        [Input("allowNetworks")]
        private InputList<string>? _allowNetworks;

        /// <summary>
        /// The network address list that allowed connections to the database.
        /// </summary>
        public InputList<string> AllowNetworks
        {
            get => _allowNetworks ?? (_allowNetworks = new InputList<string>());
            set => _allowNetworks = value;
        }

        /// <summary>
        /// The time to perform backup (format:`HH:mm`).
        /// </summary>
        [Input("backupTime")]
        public Input<string>? BackupTime { get; set; }

        [Input("backupWeekdays")]
        private InputList<string>? _backupWeekdays;

        /// <summary>
        /// Day of the week to get backup.  
        /// Valid values are the following: ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
        /// </summary>
        public InputList<string> BackupWeekdays
        {
            get => _backupWeekdays ?? (_backupWeekdays = new InputList<string>());
            set => _backupWeekdays = value;
        }

        /// <summary>
        /// The Database type.  
        /// Valid value is one of the following: [ "postgresql" (default) / "mariadb"]
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// The default route IP address of the database.
        /// </summary>
        [Input("defaultRoute", required: true)]
        public Input<string> DefaultRoute { get; set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Database.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The IP address of the database.
        /// </summary>
        [Input("ipaddress1", required: true)]
        public Input<string> Ipaddress1 { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network mask length of the database.
        /// </summary>
        [Input("nwMaskLen", required: true)]
        public Input<int> NwMaskLen { get; set; } = null!;

        /// <summary>
        /// The plan (size) of the Database.   
        /// Valid value is one of the following: [ "10g" (default) / "30g" / "90g" / "240g" / "500g" / "1t" ]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The number of the port on which the database is listening (default:`5432`).
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("replicaPassword")]
        public Input<string>? ReplicaPassword { get; set; }

        /// <summary>
        /// The ID of the switch connected to the database.
        /// </summary>
        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The username to access database.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        /// <summary>
        /// The password to access database.
        /// </summary>
        [Input("userPassword", required: true)]
        public Input<string> UserPassword { get; set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DatabaseArgs()
        {
        }
    }

    public sealed class DatabaseState : Pulumi.ResourceArgs
    {
        [Input("allowNetworks")]
        private InputList<string>? _allowNetworks;

        /// <summary>
        /// The network address list that allowed connections to the database.
        /// </summary>
        public InputList<string> AllowNetworks
        {
            get => _allowNetworks ?? (_allowNetworks = new InputList<string>());
            set => _allowNetworks = value;
        }

        /// <summary>
        /// The time to perform backup (format:`HH:mm`).
        /// </summary>
        [Input("backupTime")]
        public Input<string>? BackupTime { get; set; }

        [Input("backupWeekdays")]
        private InputList<string>? _backupWeekdays;

        /// <summary>
        /// Day of the week to get backup.  
        /// Valid values are the following: ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
        /// </summary>
        public InputList<string> BackupWeekdays
        {
            get => _backupWeekdays ?? (_backupWeekdays = new InputList<string>());
            set => _backupWeekdays = value;
        }

        /// <summary>
        /// The Database type.  
        /// Valid value is one of the following: [ "postgresql" (default) / "mariadb"]
        /// </summary>
        [Input("databaseType")]
        public Input<string>? DatabaseType { get; set; }

        /// <summary>
        /// The default route IP address of the database.
        /// </summary>
        [Input("defaultRoute")]
        public Input<string>? DefaultRoute { get; set; }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Database.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The IP address of the database.
        /// </summary>
        [Input("ipaddress1")]
        public Input<string>? Ipaddress1 { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network mask length of the database.
        /// </summary>
        [Input("nwMaskLen")]
        public Input<int>? NwMaskLen { get; set; }

        /// <summary>
        /// The plan (size) of the Database.   
        /// Valid value is one of the following: [ "10g" (default) / "30g" / "90g" / "240g" / "500g" / "1t" ]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The number of the port on which the database is listening (default:`5432`).
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("replicaPassword")]
        public Input<string>? ReplicaPassword { get; set; }

        [Input("replicaUser")]
        public Input<string>? ReplicaUser { get; set; }

        /// <summary>
        /// The ID of the switch connected to the database.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The username to access database.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// The password to access database.
        /// </summary>
        [Input("userPassword")]
        public Input<string>? UserPassword { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DatabaseState()
        {
        }
    }
}
