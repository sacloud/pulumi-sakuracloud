// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud Mobile Gateway resource. This can be used to create, update, and delete Mobile Gateways.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/mobile_gateway.html.markdown.
    /// </summary>
    public partial class MobileGateway : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The primary DNS server IP address.
        /// </summary>
        [Output("dnsServer1")]
        public Output<string> DnsServer1 { get; private set; } = null!;

        /// <summary>
        /// The secondly DNS server IP address.
        /// </summary>
        [Output("dnsServer2")]
        public Output<string> DnsServer2 { get; private set; } = null!;

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the server connected to the resource.
        /// </summary>
        [Output("gracefulShutdownTimeout")]
        public Output<int?> GracefulShutdownTimeout { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The flag of enable/disable connecting from MobileGateway to the Internet.
        /// </summary>
        [Output("internetConnection")]
        public Output<bool?> InternetConnection { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The IP address on private NIC of the Mobile Gateway.
        /// </summary>
        [Output("privateIpaddress")]
        public Output<string?> PrivateIpaddress { get; private set; } = null!;

        /// <summary>
        /// The network mask length on private NIC of the Mobile Gateway.
        /// </summary>
        [Output("privateNwMaskLen")]
        public Output<int?> PrivateNwMaskLen { get; private set; } = null!;

        /// <summary>
        /// The IP address on public NIC of the Mobile Gateway.
        /// </summary>
        [Output("publicIpaddress")]
        public Output<string> PublicIpaddress { get; private set; } = null!;

        /// <summary>
        /// The network mask length on public NIC of the Mobile Gateway.
        /// </summary>
        [Output("publicNwMaskLen")]
        public Output<int> PublicNwMaskLen { get; private set; } = null!;

        /// <summary>
        /// The ID list of the SIMs connected to the Mobile Gateway.
        /// </summary>
        [Output("simIds")]
        public Output<ImmutableArray<string>> SimIds { get; private set; } = null!;

        [Output("staticRoutes")]
        public Output<ImmutableArray<Outputs.MobileGatewayStaticRoutes>> StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The ID of the switch connected to the Mobile Gateway.
        /// </summary>
        [Output("switchId")]
        public Output<string?> SwitchId { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Traffic control rules. It contains some attributes to Traffic Control.
        /// </summary>
        [Output("trafficControl")]
        public Output<Outputs.MobileGatewayTrafficControl?> TrafficControl { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a MobileGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MobileGateway(string name, MobileGatewayArgs? args = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/mobileGateway:MobileGateway", name, args, MakeResourceOptions(options, ""))
        {
        }

        private MobileGateway(string name, Input<string> id, MobileGatewayState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/mobileGateway:MobileGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MobileGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MobileGateway Get(string name, Input<string> id, MobileGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new MobileGateway(name, id, state, options);
        }
    }

    public sealed class MobileGatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The primary DNS server IP address.
        /// </summary>
        [Input("dnsServer1")]
        public Input<string>? DnsServer1 { get; set; }

        /// <summary>
        /// The secondly DNS server IP address.
        /// </summary>
        [Input("dnsServer2")]
        public Input<string>? DnsServer2 { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the server connected to the resource.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag of enable/disable connecting from MobileGateway to the Internet.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IP address on private NIC of the Mobile Gateway.
        /// </summary>
        [Input("privateIpaddress")]
        public Input<string>? PrivateIpaddress { get; set; }

        /// <summary>
        /// The network mask length on private NIC of the Mobile Gateway.
        /// </summary>
        [Input("privateNwMaskLen")]
        public Input<int>? PrivateNwMaskLen { get; set; }

        [Input("staticRoutes")]
        private InputList<Inputs.MobileGatewayStaticRoutesArgs>? _staticRoutes;
        public InputList<Inputs.MobileGatewayStaticRoutesArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.MobileGatewayStaticRoutesArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ID of the switch connected to the Mobile Gateway.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Traffic control rules. It contains some attributes to Traffic Control.
        /// </summary>
        [Input("trafficControl")]
        public Input<Inputs.MobileGatewayTrafficControlArgs>? TrafficControl { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public MobileGatewayArgs()
        {
        }
    }

    public sealed class MobileGatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The primary DNS server IP address.
        /// </summary>
        [Input("dnsServer1")]
        public Input<string>? DnsServer1 { get; set; }

        /// <summary>
        /// The secondly DNS server IP address.
        /// </summary>
        [Input("dnsServer2")]
        public Input<string>? DnsServer2 { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the server connected to the resource.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag of enable/disable connecting from MobileGateway to the Internet.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The IP address on private NIC of the Mobile Gateway.
        /// </summary>
        [Input("privateIpaddress")]
        public Input<string>? PrivateIpaddress { get; set; }

        /// <summary>
        /// The network mask length on private NIC of the Mobile Gateway.
        /// </summary>
        [Input("privateNwMaskLen")]
        public Input<int>? PrivateNwMaskLen { get; set; }

        /// <summary>
        /// The IP address on public NIC of the Mobile Gateway.
        /// </summary>
        [Input("publicIpaddress")]
        public Input<string>? PublicIpaddress { get; set; }

        /// <summary>
        /// The network mask length on public NIC of the Mobile Gateway.
        /// </summary>
        [Input("publicNwMaskLen")]
        public Input<int>? PublicNwMaskLen { get; set; }

        [Input("simIds")]
        private InputList<string>? _simIds;

        /// <summary>
        /// The ID list of the SIMs connected to the Mobile Gateway.
        /// </summary>
        public InputList<string> SimIds
        {
            get => _simIds ?? (_simIds = new InputList<string>());
            set => _simIds = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.MobileGatewayStaticRoutesGetArgs>? _staticRoutes;
        public InputList<Inputs.MobileGatewayStaticRoutesGetArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.MobileGatewayStaticRoutesGetArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ID of the switch connected to the Mobile Gateway.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Traffic control rules. It contains some attributes to Traffic Control.
        /// </summary>
        [Input("trafficControl")]
        public Input<Inputs.MobileGatewayTrafficControlGetArgs>? TrafficControl { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public MobileGatewayState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class MobileGatewayStaticRoutesArgs : Pulumi.ResourceArgs
    {
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public MobileGatewayStaticRoutesArgs()
        {
        }
    }

    public sealed class MobileGatewayStaticRoutesGetArgs : Pulumi.ResourceArgs
    {
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public MobileGatewayStaticRoutesGetArgs()
        {
        }
    }

    public sealed class MobileGatewayTrafficControlArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of enable/disable Auto Traffic Shaping.
        /// </summary>
        [Input("autoTrafficShaping")]
        public Input<bool>? AutoTrafficShaping { get; set; }

        /// <summary>
        /// Traffic bandwidth limit(unit:`Kbps`). 
        /// </summary>
        [Input("bandWidthLimit")]
        public Input<int>? BandWidthLimit { get; set; }

        /// <summary>
        /// The flag of enable/disable e-mail notification.
        /// </summary>
        [Input("enableEmail")]
        public Input<bool>? EnableEmail { get; set; }

        /// <summary>
        /// The flag of enable/disable slack notification.
        /// </summary>
        [Input("enableSlack")]
        public Input<bool>? EnableSlack { get; set; }

        /// <summary>
        /// Traffic quota size (unit:`MB`).  
        /// </summary>
        [Input("quota", required: true)]
        public Input<int> Quota { get; set; } = null!;

        /// <summary>
        /// The webhook URL of destination of slack notification.
        /// </summary>
        [Input("slackWebhook")]
        public Input<string>? SlackWebhook { get; set; }

        public MobileGatewayTrafficControlArgs()
        {
        }
    }

    public sealed class MobileGatewayTrafficControlGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of enable/disable Auto Traffic Shaping.
        /// </summary>
        [Input("autoTrafficShaping")]
        public Input<bool>? AutoTrafficShaping { get; set; }

        /// <summary>
        /// Traffic bandwidth limit(unit:`Kbps`). 
        /// </summary>
        [Input("bandWidthLimit")]
        public Input<int>? BandWidthLimit { get; set; }

        /// <summary>
        /// The flag of enable/disable e-mail notification.
        /// </summary>
        [Input("enableEmail")]
        public Input<bool>? EnableEmail { get; set; }

        /// <summary>
        /// The flag of enable/disable slack notification.
        /// </summary>
        [Input("enableSlack")]
        public Input<bool>? EnableSlack { get; set; }

        /// <summary>
        /// Traffic quota size (unit:`MB`).  
        /// </summary>
        [Input("quota", required: true)]
        public Input<int> Quota { get; set; } = null!;

        /// <summary>
        /// The webhook URL of destination of slack notification.
        /// </summary>
        [Input("slackWebhook")]
        public Input<string>? SlackWebhook { get; set; }

        public MobileGatewayTrafficControlGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class MobileGatewayStaticRoutes
    {
        public readonly string NextHop;
        public readonly string Prefix;

        [OutputConstructor]
        private MobileGatewayStaticRoutes(
            string nextHop,
            string prefix)
        {
            NextHop = nextHop;
            Prefix = prefix;
        }
    }

    [OutputType]
    public sealed class MobileGatewayTrafficControl
    {
        /// <summary>
        /// The flag of enable/disable Auto Traffic Shaping.
        /// </summary>
        public readonly bool? AutoTrafficShaping;
        /// <summary>
        /// Traffic bandwidth limit(unit:`Kbps`). 
        /// </summary>
        public readonly int? BandWidthLimit;
        /// <summary>
        /// The flag of enable/disable e-mail notification.
        /// </summary>
        public readonly bool? EnableEmail;
        /// <summary>
        /// The flag of enable/disable slack notification.
        /// </summary>
        public readonly bool? EnableSlack;
        /// <summary>
        /// Traffic quota size (unit:`MB`).  
        /// </summary>
        public readonly int Quota;
        /// <summary>
        /// The webhook URL of destination of slack notification.
        /// </summary>
        public readonly string? SlackWebhook;

        [OutputConstructor]
        private MobileGatewayTrafficControl(
            bool? autoTrafficShaping,
            int? bandWidthLimit,
            bool? enableEmail,
            bool? enableSlack,
            int quota,
            string? slackWebhook)
        {
            AutoTrafficShaping = autoTrafficShaping;
            BandWidthLimit = bandWidthLimit;
            EnableEmail = enableEmail;
            EnableSlack = enableSlack;
            Quota = quota;
            SlackWebhook = slackWebhook;
        }
    }
    }
}
