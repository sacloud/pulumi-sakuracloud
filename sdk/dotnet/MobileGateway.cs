// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public partial class MobileGateway : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the MobileGateway. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of IP address used by each connected devices
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the MobileGateway
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The flag to allow communication between each connected devices
        /// </summary>
        [Output("interDeviceCommunication")]
        public Output<bool?> InterDeviceCommunication { get; private set; } = null!;

        /// <summary>
        /// The flag to enable connect to the Internet
        /// </summary>
        [Output("internetConnection")]
        public Output<bool?> InternetConnection { get; private set; } = null!;

        /// <summary>
        /// The name of the MobileGateway. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("privateNetworkInterface")]
        public Output<Outputs.MobileGatewayPrivateNetworkInterface?> PrivateNetworkInterface { get; private set; } = null!;

        /// <summary>
        /// The public IP address assigned to the MobileGateway
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// The bit length of the subnet assigned to the MobileGateway
        /// </summary>
        [Output("publicNetmask")]
        public Output<int> PublicNetmask { get; private set; } = null!;

        [Output("sims")]
        public Output<ImmutableArray<Outputs.MobileGatewaySims>> Sims { get; private set; } = null!;

        [Output("simRoutes")]
        public Output<ImmutableArray<Outputs.MobileGatewaySimRoutes>> SimRoutes { get; private set; } = null!;

        [Output("staticRoutes")]
        public Output<ImmutableArray<Outputs.MobileGatewayStaticRoutes>> StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the MobileGateway
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("trafficControl")]
        public Output<Outputs.MobileGatewayTrafficControl?> TrafficControl { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the MobileGateway will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a MobileGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MobileGateway(string name, MobileGatewayArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/mobileGateway:MobileGateway", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private MobileGateway(string name, Input<string> id, MobileGatewayState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/mobileGateway:MobileGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MobileGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MobileGateway Get(string name, Input<string> id, MobileGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new MobileGateway(name, id, state, options);
        }
    }

    public sealed class MobileGatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the MobileGateway. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers", required: true)]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of IP address used by each connected devices
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// The icon id to attach to the MobileGateway
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to allow communication between each connected devices
        /// </summary>
        [Input("interDeviceCommunication")]
        public Input<bool>? InterDeviceCommunication { get; set; }

        /// <summary>
        /// The flag to enable connect to the Internet
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The name of the MobileGateway. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateNetworkInterface")]
        public Input<Inputs.MobileGatewayPrivateNetworkInterfaceArgs>? PrivateNetworkInterface { get; set; }

        [Input("sims")]
        private InputList<Inputs.MobileGatewaySimsArgs>? _sims;
        public InputList<Inputs.MobileGatewaySimsArgs> Sims
        {
            get => _sims ?? (_sims = new InputList<Inputs.MobileGatewaySimsArgs>());
            set => _sims = value;
        }

        [Input("simRoutes")]
        private InputList<Inputs.MobileGatewaySimRoutesArgs>? _simRoutes;
        public InputList<Inputs.MobileGatewaySimRoutesArgs> SimRoutes
        {
            get => _simRoutes ?? (_simRoutes = new InputList<Inputs.MobileGatewaySimRoutesArgs>());
            set => _simRoutes = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.MobileGatewayStaticRoutesArgs>? _staticRoutes;
        public InputList<Inputs.MobileGatewayStaticRoutesArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.MobileGatewayStaticRoutesArgs>());
            set => _staticRoutes = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the MobileGateway
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("trafficControl")]
        public Input<Inputs.MobileGatewayTrafficControlArgs>? TrafficControl { get; set; }

        /// <summary>
        /// The name of zone that the MobileGateway will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public MobileGatewayArgs()
        {
        }
    }

    public sealed class MobileGatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the MobileGateway. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of IP address used by each connected devices
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// The icon id to attach to the MobileGateway
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to allow communication between each connected devices
        /// </summary>
        [Input("interDeviceCommunication")]
        public Input<bool>? InterDeviceCommunication { get; set; }

        /// <summary>
        /// The flag to enable connect to the Internet
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The name of the MobileGateway. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateNetworkInterface")]
        public Input<Inputs.MobileGatewayPrivateNetworkInterfaceGetArgs>? PrivateNetworkInterface { get; set; }

        /// <summary>
        /// The public IP address assigned to the MobileGateway
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// The bit length of the subnet assigned to the MobileGateway
        /// </summary>
        [Input("publicNetmask")]
        public Input<int>? PublicNetmask { get; set; }

        [Input("sims")]
        private InputList<Inputs.MobileGatewaySimsGetArgs>? _sims;
        public InputList<Inputs.MobileGatewaySimsGetArgs> Sims
        {
            get => _sims ?? (_sims = new InputList<Inputs.MobileGatewaySimsGetArgs>());
            set => _sims = value;
        }

        [Input("simRoutes")]
        private InputList<Inputs.MobileGatewaySimRoutesGetArgs>? _simRoutes;
        public InputList<Inputs.MobileGatewaySimRoutesGetArgs> SimRoutes
        {
            get => _simRoutes ?? (_simRoutes = new InputList<Inputs.MobileGatewaySimRoutesGetArgs>());
            set => _simRoutes = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.MobileGatewayStaticRoutesGetArgs>? _staticRoutes;
        public InputList<Inputs.MobileGatewayStaticRoutesGetArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.MobileGatewayStaticRoutesGetArgs>());
            set => _staticRoutes = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the MobileGateway
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("trafficControl")]
        public Input<Inputs.MobileGatewayTrafficControlGetArgs>? TrafficControl { get; set; }

        /// <summary>
        /// The name of zone that the MobileGateway will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public MobileGatewayState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class MobileGatewayPrivateNetworkInterfaceArgs : Pulumi.ResourceArgs
    {
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        public MobileGatewayPrivateNetworkInterfaceArgs()
        {
        }
    }

    public sealed class MobileGatewayPrivateNetworkInterfaceGetArgs : Pulumi.ResourceArgs
    {
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        public MobileGatewayPrivateNetworkInterfaceGetArgs()
        {
        }
    }

    public sealed class MobileGatewaySimRoutesArgs : Pulumi.ResourceArgs
    {
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        [Input("simId", required: true)]
        public Input<string> SimId { get; set; } = null!;

        public MobileGatewaySimRoutesArgs()
        {
        }
    }

    public sealed class MobileGatewaySimRoutesGetArgs : Pulumi.ResourceArgs
    {
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        [Input("simId", required: true)]
        public Input<string> SimId { get; set; } = null!;

        public MobileGatewaySimRoutesGetArgs()
        {
        }
    }

    public sealed class MobileGatewaySimsArgs : Pulumi.ResourceArgs
    {
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("simId", required: true)]
        public Input<string> SimId { get; set; } = null!;

        public MobileGatewaySimsArgs()
        {
        }
    }

    public sealed class MobileGatewaySimsGetArgs : Pulumi.ResourceArgs
    {
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("simId", required: true)]
        public Input<string> SimId { get; set; } = null!;

        public MobileGatewaySimsGetArgs()
        {
        }
    }

    public sealed class MobileGatewayStaticRoutesArgs : Pulumi.ResourceArgs
    {
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public MobileGatewayStaticRoutesArgs()
        {
        }
    }

    public sealed class MobileGatewayStaticRoutesGetArgs : Pulumi.ResourceArgs
    {
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public MobileGatewayStaticRoutesGetArgs()
        {
        }
    }

    public sealed class MobileGatewayTrafficControlArgs : Pulumi.ResourceArgs
    {
        [Input("autoTrafficShaping")]
        public Input<bool>? AutoTrafficShaping { get; set; }

        [Input("bandWidthLimit")]
        public Input<int>? BandWidthLimit { get; set; }

        [Input("enableEmail")]
        public Input<bool>? EnableEmail { get; set; }

        [Input("enableSlack")]
        public Input<bool>? EnableSlack { get; set; }

        [Input("quota", required: true)]
        public Input<int> Quota { get; set; } = null!;

        [Input("slackWebhook")]
        public Input<string>? SlackWebhook { get; set; }

        public MobileGatewayTrafficControlArgs()
        {
        }
    }

    public sealed class MobileGatewayTrafficControlGetArgs : Pulumi.ResourceArgs
    {
        [Input("autoTrafficShaping")]
        public Input<bool>? AutoTrafficShaping { get; set; }

        [Input("bandWidthLimit")]
        public Input<int>? BandWidthLimit { get; set; }

        [Input("enableEmail")]
        public Input<bool>? EnableEmail { get; set; }

        [Input("enableSlack")]
        public Input<bool>? EnableSlack { get; set; }

        [Input("quota", required: true)]
        public Input<int> Quota { get; set; } = null!;

        [Input("slackWebhook")]
        public Input<string>? SlackWebhook { get; set; }

        public MobileGatewayTrafficControlGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class MobileGatewayPrivateNetworkInterface
    {
        public readonly string IpAddress;
        public readonly int Netmask;
        public readonly string SwitchId;

        [OutputConstructor]
        private MobileGatewayPrivateNetworkInterface(
            string ipAddress,
            int netmask,
            string switchId)
        {
            IpAddress = ipAddress;
            Netmask = netmask;
            SwitchId = switchId;
        }
    }

    [OutputType]
    public sealed class MobileGatewaySimRoutes
    {
        public readonly string Prefix;
        public readonly string SimId;

        [OutputConstructor]
        private MobileGatewaySimRoutes(
            string prefix,
            string simId)
        {
            Prefix = prefix;
            SimId = simId;
        }
    }

    [OutputType]
    public sealed class MobileGatewaySims
    {
        public readonly string IpAddress;
        public readonly string SimId;

        [OutputConstructor]
        private MobileGatewaySims(
            string ipAddress,
            string simId)
        {
            IpAddress = ipAddress;
            SimId = simId;
        }
    }

    [OutputType]
    public sealed class MobileGatewayStaticRoutes
    {
        public readonly string NextHop;
        public readonly string Prefix;

        [OutputConstructor]
        private MobileGatewayStaticRoutes(
            string nextHop,
            string prefix)
        {
            NextHop = nextHop;
            Prefix = prefix;
        }
    }

    [OutputType]
    public sealed class MobileGatewayTrafficControl
    {
        public readonly bool? AutoTrafficShaping;
        public readonly int? BandWidthLimit;
        public readonly bool? EnableEmail;
        public readonly bool? EnableSlack;
        public readonly int Quota;
        public readonly string? SlackWebhook;

        [OutputConstructor]
        private MobileGatewayTrafficControl(
            bool? autoTrafficShaping,
            int? bandWidthLimit,
            bool? enableEmail,
            bool? enableSlack,
            int quota,
            string? slackWebhook)
        {
            AutoTrafficShaping = autoTrafficShaping;
            BandWidthLimit = bandWidthLimit;
            EnableEmail = enableEmail;
            EnableSlack = enableSlack;
            Quota = quota;
            SlackWebhook = slackWebhook;
        }
    }
    }
}
