// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud Mobile Gateway.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Sakuracloud = Pulumi.Sakuracloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var zone = Output.Create(Sakuracloud.GetZone.InvokeAsync());
    ///         var foobarSwitch = new Sakuracloud.Switch("foobarSwitch", new Sakuracloud.SwitchArgs
    ///         {
    ///         });
    ///         var foobarMobileGateway = new Sakuracloud.MobileGateway("foobarMobileGateway", new Sakuracloud.MobileGatewayArgs
    ///         {
    ///             InternetConnection = true,
    ///             DnsServers = zone.Apply(zone =&gt; zone.DnsServers),
    ///             PrivateNetworkInterface = new Sakuracloud.Inputs.MobileGatewayPrivateNetworkInterfaceArgs
    ///             {
    ///                 SwitchId = foobarSwitch.Id,
    ///                 IpAddress = "192.168.11.101",
    ///                 Netmask = 24,
    ///             },
    ///             Description = "description",
    ///             Tags = 
    ///             {
    ///                 "tag1",
    ///                 "tag2",
    ///             },
    ///             TrafficControl = new Sakuracloud.Inputs.MobileGatewayTrafficControlArgs
    ///             {
    ///                 Quota = 256,
    ///                 BandWidthLimit = 64,
    ///                 EnableEmail = true,
    ///                 EnableSlack = true,
    ///                 SlackWebhook = "https://hooks.slack.com/services/xxx/xxx/xxx",
    ///                 AutoTrafficShaping = true,
    ///             },
    ///             StaticRoutes = 
    ///             {
    ///                 new Sakuracloud.Inputs.MobileGatewayStaticRouteArgs
    ///                 {
    ///                     Prefix = "192.168.10.0/24",
    ///                     NextHop = "192.168.11.1",
    ///                 },
    ///                 new Sakuracloud.Inputs.MobileGatewayStaticRouteArgs
    ///                 {
    ///                     Prefix = "192.168.10.0/25",
    ///                     NextHop = "192.168.11.2",
    ///                 },
    ///                 new Sakuracloud.Inputs.MobileGatewayStaticRouteArgs
    ///                 {
    ///                     Prefix = "192.168.10.0/26",
    ///                     NextHop = "192.168.11.3",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/mobileGateway:MobileGateway")]
    public partial class MobileGateway : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the MobileGateway. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of IP address used by each connected devices.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the MobileGateway.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The flag to allow communication between each connected devices.
        /// </summary>
        [Output("interDeviceCommunication")]
        public Output<bool?> InterDeviceCommunication { get; private set; } = null!;

        /// <summary>
        /// The flag to enable connect to the Internet.
        /// </summary>
        [Output("internetConnection")]
        public Output<bool?> InternetConnection { get; private set; } = null!;

        /// <summary>
        /// The name of the MobileGateway. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An `private_network_interface` block as defined below.
        /// </summary>
        [Output("privateNetworkInterface")]
        public Output<Outputs.MobileGatewayPrivateNetworkInterface?> PrivateNetworkInterface { get; private set; } = null!;

        /// <summary>
        /// The public IP address assigned to the MobileGateway.
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// The bit length of the subnet assigned to the MobileGateway.
        /// </summary>
        [Output("publicNetmask")]
        public Output<int> PublicNetmask { get; private set; } = null!;

        /// <summary>
        /// One or more `sim_route` blocks as defined below.
        /// </summary>
        [Output("simRoutes")]
        public Output<ImmutableArray<Outputs.MobileGatewaySimRoute>> SimRoutes { get; private set; } = null!;

        /// <summary>
        /// One or more `sim` blocks as defined below.
        /// </summary>
        [Output("sims")]
        public Output<ImmutableArray<Outputs.MobileGatewaySim>> Sims { get; private set; } = null!;

        /// <summary>
        /// One or more `static_route` blocks as defined below.
        /// </summary>
        [Output("staticRoutes")]
        public Output<ImmutableArray<Outputs.MobileGatewayStaticRoute>> StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the MobileGateway.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// A `traffic_control` block as defined below.
        /// </summary>
        [Output("trafficControl")]
        public Output<Outputs.MobileGatewayTrafficControl?> TrafficControl { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the MobileGateway will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a MobileGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MobileGateway(string name, MobileGatewayArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/mobileGateway:MobileGateway", name, args ?? new MobileGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MobileGateway(string name, Input<string> id, MobileGatewayState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/mobileGateway:MobileGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MobileGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MobileGateway Get(string name, Input<string> id, MobileGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new MobileGateway(name, id, state, options);
        }
    }

    public sealed class MobileGatewayArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the MobileGateway. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers", required: true)]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of IP address used by each connected devices.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// The icon id to attach to the MobileGateway.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to allow communication between each connected devices.
        /// </summary>
        [Input("interDeviceCommunication")]
        public Input<bool>? InterDeviceCommunication { get; set; }

        /// <summary>
        /// The flag to enable connect to the Internet.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The name of the MobileGateway. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An `private_network_interface` block as defined below.
        /// </summary>
        [Input("privateNetworkInterface")]
        public Input<Inputs.MobileGatewayPrivateNetworkInterfaceArgs>? PrivateNetworkInterface { get; set; }

        [Input("simRoutes")]
        private InputList<Inputs.MobileGatewaySimRouteArgs>? _simRoutes;

        /// <summary>
        /// One or more `sim_route` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MobileGatewaySimRouteArgs> SimRoutes
        {
            get => _simRoutes ?? (_simRoutes = new InputList<Inputs.MobileGatewaySimRouteArgs>());
            set => _simRoutes = value;
        }

        [Input("sims")]
        private InputList<Inputs.MobileGatewaySimArgs>? _sims;

        /// <summary>
        /// One or more `sim` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MobileGatewaySimArgs> Sims
        {
            get => _sims ?? (_sims = new InputList<Inputs.MobileGatewaySimArgs>());
            set => _sims = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.MobileGatewayStaticRouteArgs>? _staticRoutes;

        /// <summary>
        /// One or more `static_route` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MobileGatewayStaticRouteArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.MobileGatewayStaticRouteArgs>());
            set => _staticRoutes = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the MobileGateway.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `traffic_control` block as defined below.
        /// </summary>
        [Input("trafficControl")]
        public Input<Inputs.MobileGatewayTrafficControlArgs>? TrafficControl { get; set; }

        /// <summary>
        /// The name of zone that the MobileGateway will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public MobileGatewayArgs()
        {
        }
    }

    public sealed class MobileGatewayState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the MobileGateway. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// A list of IP address used by each connected devices.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// The icon id to attach to the MobileGateway.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to allow communication between each connected devices.
        /// </summary>
        [Input("interDeviceCommunication")]
        public Input<bool>? InterDeviceCommunication { get; set; }

        /// <summary>
        /// The flag to enable connect to the Internet.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The name of the MobileGateway. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An `private_network_interface` block as defined below.
        /// </summary>
        [Input("privateNetworkInterface")]
        public Input<Inputs.MobileGatewayPrivateNetworkInterfaceGetArgs>? PrivateNetworkInterface { get; set; }

        /// <summary>
        /// The public IP address assigned to the MobileGateway.
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// The bit length of the subnet assigned to the MobileGateway.
        /// </summary>
        [Input("publicNetmask")]
        public Input<int>? PublicNetmask { get; set; }

        [Input("simRoutes")]
        private InputList<Inputs.MobileGatewaySimRouteGetArgs>? _simRoutes;

        /// <summary>
        /// One or more `sim_route` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MobileGatewaySimRouteGetArgs> SimRoutes
        {
            get => _simRoutes ?? (_simRoutes = new InputList<Inputs.MobileGatewaySimRouteGetArgs>());
            set => _simRoutes = value;
        }

        [Input("sims")]
        private InputList<Inputs.MobileGatewaySimGetArgs>? _sims;

        /// <summary>
        /// One or more `sim` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MobileGatewaySimGetArgs> Sims
        {
            get => _sims ?? (_sims = new InputList<Inputs.MobileGatewaySimGetArgs>());
            set => _sims = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.MobileGatewayStaticRouteGetArgs>? _staticRoutes;

        /// <summary>
        /// One or more `static_route` blocks as defined below.
        /// </summary>
        public InputList<Inputs.MobileGatewayStaticRouteGetArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.MobileGatewayStaticRouteGetArgs>());
            set => _staticRoutes = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the MobileGateway.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// A `traffic_control` block as defined below.
        /// </summary>
        [Input("trafficControl")]
        public Input<Inputs.MobileGatewayTrafficControlGetArgs>? TrafficControl { get; set; }

        /// <summary>
        /// The name of zone that the MobileGateway will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public MobileGatewayState()
        {
        }
    }
}
