// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public partial class NFS : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the NFS. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the NFS
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the NFS. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkInterface")]
        public Output<Outputs.NFSNetworkInterface> NetworkInterface { get; private set; } = null!;

        /// <summary>
        /// The plan name of the NFS. This must be one of [`hdd`/`ssd`]
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// The size of NFS in GiB
        /// </summary>
        [Output("size")]
        public Output<int?> Size { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the NFS
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the NFS will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a NFS resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NFS(string name, NFSArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/nFS:NFS", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private NFS(string name, Input<string> id, NFSState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/nFS:NFS", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NFS resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NFS Get(string name, Input<string> id, NFSState? state = null, CustomResourceOptions? options = null)
        {
            return new NFS(name, id, state, options);
        }
    }

    public sealed class NFSArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the NFS. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the NFS
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the NFS. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterface", required: true)]
        public Input<Inputs.NFSNetworkInterfaceArgs> NetworkInterface { get; set; } = null!;

        /// <summary>
        /// The plan name of the NFS. This must be one of [`hdd`/`ssd`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The size of NFS in GiB
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the NFS
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of zone that the NFS will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public NFSArgs()
        {
        }
    }

    public sealed class NFSState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the NFS. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the NFS
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the NFS. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterface")]
        public Input<Inputs.NFSNetworkInterfaceGetArgs>? NetworkInterface { get; set; }

        /// <summary>
        /// The plan name of the NFS. This must be one of [`hdd`/`ssd`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// The size of NFS in GiB
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the NFS
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of zone that the NFS will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public NFSState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class NFSNetworkInterfaceArgs : Pulumi.ResourceArgs
    {
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        public NFSNetworkInterfaceArgs()
        {
        }
    }

    public sealed class NFSNetworkInterfaceGetArgs : Pulumi.ResourceArgs
    {
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        public NFSNetworkInterfaceGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class NFSNetworkInterface
    {
        public readonly string? Gateway;
        public readonly string IpAddress;
        public readonly int Netmask;
        public readonly string SwitchId;

        [OutputConstructor]
        private NFSNetworkInterface(
            string? gateway,
            string ipAddress,
            int netmask,
            string switchId)
        {
            Gateway = gateway;
            IpAddress = ipAddress;
            Netmask = netmask;
            SwitchId = switchId;
        }
    }
    }
}
