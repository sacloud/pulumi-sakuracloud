// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetCDROM
    {
        /// <summary>
        /// Get information about an existing CD-ROM.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetCDROM.InvokeAsync(new Sakuracloud.GetCDROMArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetCDROMFilterArgs
        ///             {
        ///                 Conditions = 
        ///                 {
        ///                     new Sakuracloud.Inputs.GetCDROMFilterConditionArgs
        ///                     {
        ///                         Name = "Name",
        ///                         Values = 
        ///                         {
        ///                             "Parted Magic 2013_08_01",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCDROMResult> InvokeAsync(GetCDROMArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCDROMResult>("sakuracloud:index/getCDROM:getCDROM", args ?? new GetCDROMArgs(), options.WithVersion());
    }


    public sealed class GetCDROMArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetCDROMFilterArgs? Filter { get; set; }

        /// <summary>
        /// The name of zone that the CD-ROM is in (e.g. `is1a`, `tk1a`).
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetCDROMArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCDROMResult
    {
        /// <summary>
        /// The description of the CD-ROM.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetCDROMFilterResult? Filter;
        /// <summary>
        /// The icon id attached to the CD-ROM.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the CD-ROM.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The size of CD-ROM in GiB.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// Any tags assigned to the CD-ROM.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string Zone;

        [OutputConstructor]
        private GetCDROMResult(
            string description,

            Outputs.GetCDROMFilterResult? filter,

            string iconId,

            string id,

            string name,

            int size,

            ImmutableArray<string> tags,

            string zone)
        {
            Description = description;
            Filter = filter;
            IconId = iconId;
            Id = id;
            Name = name;
            Size = size;
            Tags = tags;
            Zone = zone;
        }
    }
}
