// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetESME
    {
        /// <summary>
        /// Get information about an existing ESME.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetESME.InvokeAsync(new Sakuracloud.GetESMEArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetESMEFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetESMEResult> InvokeAsync(GetESMEArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetESMEResult>("sakuracloud:index/getESME:getESME", args ?? new GetESMEArgs(), options.WithVersion());
    }


    public sealed class GetESMEArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetESMEFilterArgs? Filter { get; set; }

        public GetESMEArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetESMEResult
    {
        /// <summary>
        /// The description of the ESME.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetESMEFilterResult? Filter;
        /// <summary>
        /// The icon id attached to the ESME.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the ESME.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The API URL for send SMS with generated OTP.
        /// </summary>
        public readonly string SendMessageWithGeneratedOtpApiUrl;
        /// <summary>
        /// The API URL for send SMS with inputted OTP.
        /// </summary>
        public readonly string SendMessageWithInputtedOtpApiUrl;
        /// <summary>
        /// Any tags assigned to the ESME.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetESMEResult(
            string description,

            Outputs.GetESMEFilterResult? filter,

            string iconId,

            string id,

            string name,

            string sendMessageWithGeneratedOtpApiUrl,

            string sendMessageWithInputtedOtpApiUrl,

            ImmutableArray<string> tags)
        {
            Description = description;
            Filter = filter;
            IconId = iconId;
            Id = id;
            Name = name;
            SendMessageWithGeneratedOtpApiUrl = sendMessageWithGeneratedOtpApiUrl;
            SendMessageWithInputtedOtpApiUrl = sendMessageWithInputtedOtpApiUrl;
            Tags = tags;
        }
    }
}
