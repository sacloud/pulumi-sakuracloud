// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetProxyLB
    {
        /// <summary>
        /// Get information about an existing ProxyLB.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetProxyLB.InvokeAsync(new Sakuracloud.GetProxyLBArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetProxyLBFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProxyLBResult> InvokeAsync(GetProxyLBArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProxyLBResult>("sakuracloud:index/getProxyLB:getProxyLB", args ?? new GetProxyLBArgs(), options.WithVersion());
    }


    public sealed class GetProxyLBArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetProxyLBFilterArgs? Filter { get; set; }

        public GetProxyLBArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProxyLBResult
    {
        /// <summary>
        /// A list of `bind_port` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProxyLBBindPortResult> BindPorts;
        /// <summary>
        /// A list of `certificate` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProxyLBCertificateResult> Certificates;
        /// <summary>
        /// The description of the ProxyLB.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetProxyLBFilterResult? Filter;
        /// <summary>
        /// The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// The flag to enable gzip compression.
        /// </summary>
        public readonly bool Gzip;
        /// <summary>
        /// A list of `health_check` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProxyLBHealthCheckResult> HealthChecks;
        /// <summary>
        /// The icon id attached to the ProxyLB.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the ProxyLB.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The plan name of the ProxyLB. This will be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`/`400000`].
        /// </summary>
        public readonly int Plan;
        /// <summary>
        /// A list of CIDR block used by the ProxyLB to access the server.
        /// </summary>
        public readonly ImmutableArray<string> ProxyNetworks;
        /// <summary>
        /// The flag to enable proxy protocol v2.
        /// </summary>
        public readonly bool ProxyProtocol;
        /// <summary>
        /// The name of region that the proxy LB is in. This will be one of [`tk1`/`is1`/`anycast`].
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// A list of `rule` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProxyLBRuleResult> Rules;
        /// <summary>
        /// The address of syslog server.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProxyLBServerResult> Servers;
        /// <summary>
        /// A list of `sorry_server` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProxyLBSorryServerResult> SorryServers;
        /// <summary>
        /// The flag to enable sticky session.
        /// </summary>
        public readonly bool StickySession;
        /// <summary>
        /// A list of `syslog` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProxyLBSyslogResult> Syslogs;
        /// <summary>
        /// Any tags assigned to the ProxyLB.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The timeout duration in seconds.
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// The virtual IP address assigned to the ProxyLB.
        /// </summary>
        public readonly string Vip;
        /// <summary>
        /// The flag to enable VIP fail-over.
        /// </summary>
        public readonly bool VipFailover;

        [OutputConstructor]
        private GetProxyLBResult(
            ImmutableArray<Outputs.GetProxyLBBindPortResult> bindPorts,

            ImmutableArray<Outputs.GetProxyLBCertificateResult> certificates,

            string description,

            Outputs.GetProxyLBFilterResult? filter,

            string fqdn,

            bool gzip,

            ImmutableArray<Outputs.GetProxyLBHealthCheckResult> healthChecks,

            string iconId,

            string id,

            string name,

            int plan,

            ImmutableArray<string> proxyNetworks,

            bool proxyProtocol,

            string region,

            ImmutableArray<Outputs.GetProxyLBRuleResult> rules,

            ImmutableArray<Outputs.GetProxyLBServerResult> servers,

            ImmutableArray<Outputs.GetProxyLBSorryServerResult> sorryServers,

            bool stickySession,

            ImmutableArray<Outputs.GetProxyLBSyslogResult> syslogs,

            ImmutableArray<string> tags,

            int timeout,

            string vip,

            bool vipFailover)
        {
            BindPorts = bindPorts;
            Certificates = certificates;
            Description = description;
            Filter = filter;
            Fqdn = fqdn;
            Gzip = gzip;
            HealthChecks = healthChecks;
            IconId = iconId;
            Id = id;
            Name = name;
            Plan = plan;
            ProxyNetworks = proxyNetworks;
            ProxyProtocol = proxyProtocol;
            Region = region;
            Rules = rules;
            Servers = servers;
            SorryServers = sorryServers;
            StickySession = stickySession;
            Syslogs = syslogs;
            Tags = tags;
            Timeout = timeout;
            Vip = vip;
            VipFailover = vipFailover;
        }
    }
}
