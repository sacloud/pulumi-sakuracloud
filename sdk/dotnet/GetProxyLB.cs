// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public static partial class Invokes
    {
        public static Task<GetProxyLBResult> GetProxyLB(GetProxyLBArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProxyLBResult>("sakuracloud:index/getProxyLB:getProxyLB", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetProxyLBArgs : Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetProxyLBFilterArgs? Filter { get; set; }

        public GetProxyLBArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetProxyLBResult
    {
        public readonly ImmutableArray<Outputs.GetProxyLBBindPortsResult> BindPorts;
        public readonly ImmutableArray<Outputs.GetProxyLBCertificatesResult> Certificates;
        public readonly string Description;
        public readonly Outputs.GetProxyLBFilterResult? Filter;
        public readonly string Fqdn;
        public readonly ImmutableArray<Outputs.GetProxyLBHealthChecksResult> HealthChecks;
        public readonly string IconId;
        public readonly string Name;
        public readonly int Plan;
        public readonly ImmutableArray<string> ProxyNetworks;
        public readonly string Region;
        public readonly ImmutableArray<Outputs.GetProxyLBRulesResult> Rules;
        public readonly ImmutableArray<Outputs.GetProxyLBServersResult> Servers;
        public readonly ImmutableArray<Outputs.GetProxyLBSorryServersResult> SorryServers;
        public readonly bool StickySession;
        public readonly ImmutableArray<string> Tags;
        public readonly int Timeout;
        public readonly string Vip;
        public readonly bool VipFailover;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetProxyLBResult(
            ImmutableArray<Outputs.GetProxyLBBindPortsResult> bindPorts,
            ImmutableArray<Outputs.GetProxyLBCertificatesResult> certificates,
            string description,
            Outputs.GetProxyLBFilterResult? filter,
            string fqdn,
            ImmutableArray<Outputs.GetProxyLBHealthChecksResult> healthChecks,
            string iconId,
            string name,
            int plan,
            ImmutableArray<string> proxyNetworks,
            string region,
            ImmutableArray<Outputs.GetProxyLBRulesResult> rules,
            ImmutableArray<Outputs.GetProxyLBServersResult> servers,
            ImmutableArray<Outputs.GetProxyLBSorryServersResult> sorryServers,
            bool stickySession,
            ImmutableArray<string> tags,
            int timeout,
            string vip,
            bool vipFailover,
            string id)
        {
            BindPorts = bindPorts;
            Certificates = certificates;
            Description = description;
            Filter = filter;
            Fqdn = fqdn;
            HealthChecks = healthChecks;
            IconId = iconId;
            Name = name;
            Plan = plan;
            ProxyNetworks = proxyNetworks;
            Region = region;
            Rules = rules;
            Servers = servers;
            SorryServers = sorryServers;
            StickySession = stickySession;
            Tags = tags;
            Timeout = timeout;
            Vip = vip;
            VipFailover = vipFailover;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetProxyLBFilterArgs : Pulumi.InvokeArgs
    {
        [Input("conditions")]
        private List<GetProxyLBFilterConditionsArgs>? _conditions;
        public List<GetProxyLBFilterConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new List<GetProxyLBFilterConditionsArgs>());
            set => _conditions = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("names")]
        private List<string>? _names;
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        [Input("tags")]
        private List<string>? _tags;
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetProxyLBFilterArgs()
        {
        }
    }

    public sealed class GetProxyLBFilterConditionsArgs : Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("values", required: true)]
        private List<string>? _values;
        public List<string> Values
        {
            get => _values ?? (_values = new List<string>());
            set => _values = value;
        }

        public GetProxyLBFilterConditionsArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetProxyLBBindPortsResponseHeadersResult
    {
        public readonly string Header;
        public readonly string Value;

        [OutputConstructor]
        private GetProxyLBBindPortsResponseHeadersResult(
            string header,
            string value)
        {
            Header = header;
            Value = value;
        }
    }

    [OutputType]
    public sealed class GetProxyLBBindPortsResult
    {
        public readonly int Port;
        public readonly string ProxyMode;
        public readonly bool RedirectToHttps;
        public readonly ImmutableArray<GetProxyLBBindPortsResponseHeadersResult> ResponseHeaders;
        public readonly bool SupportHttp2;

        [OutputConstructor]
        private GetProxyLBBindPortsResult(
            int port,
            string proxyMode,
            bool redirectToHttps,
            ImmutableArray<GetProxyLBBindPortsResponseHeadersResult> responseHeaders,
            bool supportHttp2)
        {
            Port = port;
            ProxyMode = proxyMode;
            RedirectToHttps = redirectToHttps;
            ResponseHeaders = responseHeaders;
            SupportHttp2 = supportHttp2;
        }
    }

    [OutputType]
    public sealed class GetProxyLBCertificatesAdditionalCertificatesResult
    {
        public readonly string IntermediateCert;
        public readonly string PrivateKey;
        public readonly string ServerCert;

        [OutputConstructor]
        private GetProxyLBCertificatesAdditionalCertificatesResult(
            string intermediateCert,
            string privateKey,
            string serverCert)
        {
            IntermediateCert = intermediateCert;
            PrivateKey = privateKey;
            ServerCert = serverCert;
        }
    }

    [OutputType]
    public sealed class GetProxyLBCertificatesResult
    {
        public readonly ImmutableArray<GetProxyLBCertificatesAdditionalCertificatesResult> AdditionalCertificates;
        public readonly string IntermediateCert;
        public readonly string PrivateKey;
        public readonly string ServerCert;

        [OutputConstructor]
        private GetProxyLBCertificatesResult(
            ImmutableArray<GetProxyLBCertificatesAdditionalCertificatesResult> additionalCertificates,
            string intermediateCert,
            string privateKey,
            string serverCert)
        {
            AdditionalCertificates = additionalCertificates;
            IntermediateCert = intermediateCert;
            PrivateKey = privateKey;
            ServerCert = serverCert;
        }
    }

    [OutputType]
    public sealed class GetProxyLBFilterConditionsResult
    {
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetProxyLBFilterConditionsResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }

    [OutputType]
    public sealed class GetProxyLBFilterResult
    {
        public readonly ImmutableArray<GetProxyLBFilterConditionsResult> Conditions;
        public readonly string? Id;
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetProxyLBFilterResult(
            ImmutableArray<GetProxyLBFilterConditionsResult> conditions,
            string? id,
            ImmutableArray<string> names,
            ImmutableArray<string> tags)
        {
            Conditions = conditions;
            Id = id;
            Names = names;
            Tags = tags;
        }
    }

    [OutputType]
    public sealed class GetProxyLBHealthChecksResult
    {
        public readonly int DelayLoop;
        public readonly string HostHeader;
        public readonly string Path;
        public readonly int Port;
        public readonly string Protocol;

        [OutputConstructor]
        private GetProxyLBHealthChecksResult(
            int delayLoop,
            string hostHeader,
            string path,
            int port,
            string protocol)
        {
            DelayLoop = delayLoop;
            HostHeader = hostHeader;
            Path = path;
            Port = port;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class GetProxyLBRulesResult
    {
        public readonly string Group;
        public readonly string Host;
        public readonly string Path;

        [OutputConstructor]
        private GetProxyLBRulesResult(
            string group,
            string host,
            string path)
        {
            Group = group;
            Host = host;
            Path = path;
        }
    }

    [OutputType]
    public sealed class GetProxyLBServersResult
    {
        public readonly bool Enabled;
        public readonly string Group;
        public readonly string IpAddress;
        public readonly int Port;

        [OutputConstructor]
        private GetProxyLBServersResult(
            bool enabled,
            string group,
            string ipAddress,
            int port)
        {
            Enabled = enabled;
            Group = group;
            IpAddress = ipAddress;
            Port = port;
        }
    }

    [OutputType]
    public sealed class GetProxyLBSorryServersResult
    {
        public readonly string IpAddress;
        public readonly int Port;

        [OutputConstructor]
        private GetProxyLBSorryServersResult(
            string ipAddress,
            int port)
        {
            IpAddress = ipAddress;
            Port = port;
        }
    }
    }
}
