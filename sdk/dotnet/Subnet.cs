// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud Subnet.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Sakuracloud = Pulumi.Sakuracloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobarInternet = new Sakuracloud.Internet("foobarInternet", new Sakuracloud.InternetArgs
    ///         {
    ///         });
    ///         var foobarSubnet = new Sakuracloud.Subnet("foobarSubnet", new Sakuracloud.SubnetArgs
    ///         {
    ///             InternetId = foobarInternet.Id,
    ///             NextHop = foobarInternet.MinIpAddress,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/subnet:Subnet")]
    public partial class Subnet : Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the switch+router resource that the subnet belongs. Changing this forces a new resource to be created.
        /// </summary>
        [Output("internetId")]
        public Output<string> InternetId { get; private set; } = null!;

        /// <summary>
        /// A list of assigned global address to the subnet.
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// Maximum IP address in assigned global addresses to the subnet.
        /// </summary>
        [Output("maxIpAddress")]
        public Output<string> MaxIpAddress { get; private set; } = null!;

        /// <summary>
        /// Minimum IP address in assigned global addresses to the subnet.
        /// </summary>
        [Output("minIpAddress")]
        public Output<string> MinIpAddress { get; private set; } = null!;

        /// <summary>
        /// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]. Changing this forces a new resource to be created. Default:`28`.
        /// </summary>
        [Output("netmask")]
        public Output<int?> Netmask { get; private set; } = null!;

        /// <summary>
        /// The IPv4 network address assigned to the Subnet.
        /// </summary>
        [Output("networkAddress")]
        public Output<string> NetworkAddress { get; private set; } = null!;

        /// <summary>
        /// The ip address of the next-hop at the subnet.
        /// </summary>
        [Output("nextHop")]
        public Output<string> NextHop { get; private set; } = null!;

        /// <summary>
        /// The id of the switch connected from the Subnet.
        /// </summary>
        [Output("switchId")]
        public Output<string> SwitchId { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the Subnet will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Subnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subnet(string name, SubnetArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/subnet:Subnet", name, args ?? new SubnetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subnet(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/subnet:Subnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subnet Get(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
        {
            return new Subnet(name, id, state, options);
        }
    }

    public sealed class SubnetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the switch+router resource that the subnet belongs. Changing this forces a new resource to be created.
        /// </summary>
        [Input("internetId", required: true)]
        public Input<string> InternetId { get; set; } = null!;

        /// <summary>
        /// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]. Changing this forces a new resource to be created. Default:`28`.
        /// </summary>
        [Input("netmask")]
        public Input<int>? Netmask { get; set; }

        /// <summary>
        /// The ip address of the next-hop at the subnet.
        /// </summary>
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        /// <summary>
        /// The name of zone that the Subnet will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SubnetArgs()
        {
        }
    }

    public sealed class SubnetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the switch+router resource that the subnet belongs. Changing this forces a new resource to be created.
        /// </summary>
        [Input("internetId")]
        public Input<string>? InternetId { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// A list of assigned global address to the subnet.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// Maximum IP address in assigned global addresses to the subnet.
        /// </summary>
        [Input("maxIpAddress")]
        public Input<string>? MaxIpAddress { get; set; }

        /// <summary>
        /// Minimum IP address in assigned global addresses to the subnet.
        /// </summary>
        [Input("minIpAddress")]
        public Input<string>? MinIpAddress { get; set; }

        /// <summary>
        /// The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]. Changing this forces a new resource to be created. Default:`28`.
        /// </summary>
        [Input("netmask")]
        public Input<int>? Netmask { get; set; }

        /// <summary>
        /// The IPv4 network address assigned to the Subnet.
        /// </summary>
        [Input("networkAddress")]
        public Input<string>? NetworkAddress { get; set; }

        /// <summary>
        /// The ip address of the next-hop at the subnet.
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// The id of the switch connected from the Subnet.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        /// <summary>
        /// The name of zone that the Subnet will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SubnetState()
        {
        }
    }
}
