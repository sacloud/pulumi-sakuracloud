// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud Subnet resource. This can be used to create, update, and delete Subnets.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/subnet.html.markdown.
    /// </summary>
    public partial class Subnet : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Internet resource.
        /// </summary>
        [Output("internetId")]
        public Output<string> InternetId { get; private set; } = null!;

        /// <summary>
        /// Global IP address list.
        /// </summary>
        [Output("ipaddresses")]
        public Output<ImmutableArray<string>> Ipaddresses { get; private set; } = null!;

        /// <summary>
        /// Max global IP address.
        /// </summary>
        [Output("maxIpaddress")]
        public Output<string> MaxIpaddress { get; private set; } = null!;

        /// <summary>
        /// Min global IP address.
        /// </summary>
        [Output("minIpaddress")]
        public Output<string> MinIpaddress { get; private set; } = null!;

        /// <summary>
        /// The next hop IP address.
        /// </summary>
        [Output("nextHop")]
        public Output<string> NextHop { get; private set; } = null!;

        /// <summary>
        /// The network address.
        /// </summary>
        [Output("nwAddress")]
        public Output<string> NwAddress { get; private set; } = null!;

        /// <summary>
        /// Network mask length.  
        /// Valid value is one of the following: [ 28 (default) / 27 / 26 ]
        /// </summary>
        [Output("nwMaskLen")]
        public Output<int?> NwMaskLen { get; private set; } = null!;

        [Output("switchId")]
        public Output<string> SwitchId { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Subnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subnet(string name, SubnetArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/subnet:Subnet", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Subnet(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/subnet:Subnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subnet Get(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
        {
            return new Subnet(name, id, state, options);
        }
    }

    public sealed class SubnetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Internet resource.
        /// </summary>
        [Input("internetId", required: true)]
        public Input<string> InternetId { get; set; } = null!;

        /// <summary>
        /// The next hop IP address.
        /// </summary>
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        /// <summary>
        /// Network mask length.  
        /// Valid value is one of the following: [ 28 (default) / 27 / 26 ]
        /// </summary>
        [Input("nwMaskLen")]
        public Input<int>? NwMaskLen { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SubnetArgs()
        {
        }
    }

    public sealed class SubnetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Internet resource.
        /// </summary>
        [Input("internetId")]
        public Input<string>? InternetId { get; set; }

        [Input("ipaddresses")]
        private InputList<string>? _ipaddresses;

        /// <summary>
        /// Global IP address list.
        /// </summary>
        public InputList<string> Ipaddresses
        {
            get => _ipaddresses ?? (_ipaddresses = new InputList<string>());
            set => _ipaddresses = value;
        }

        /// <summary>
        /// Max global IP address.
        /// </summary>
        [Input("maxIpaddress")]
        public Input<string>? MaxIpaddress { get; set; }

        /// <summary>
        /// Min global IP address.
        /// </summary>
        [Input("minIpaddress")]
        public Input<string>? MinIpaddress { get; set; }

        /// <summary>
        /// The next hop IP address.
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// The network address.
        /// </summary>
        [Input("nwAddress")]
        public Input<string>? NwAddress { get; set; }

        /// <summary>
        /// Network mask length.  
        /// Valid value is one of the following: [ 28 (default) / 27 / 26 ]
        /// </summary>
        [Input("nwMaskLen")]
        public Input<int>? NwMaskLen { get; set; }

        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public SubnetState()
        {
        }
    }
}
