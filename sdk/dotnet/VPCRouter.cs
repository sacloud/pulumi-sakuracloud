// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public partial class VPCRouter : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("dhcpServers")]
        public Output<ImmutableArray<Outputs.VPCRouterDhcpServers>> DhcpServers { get; private set; } = null!;

        [Output("dhcpStaticMappings")]
        public Output<ImmutableArray<Outputs.VPCRouterDhcpStaticMappings>> DhcpStaticMappings { get; private set; } = null!;

        [Output("firewalls")]
        public Output<ImmutableArray<Outputs.VPCRouterFirewalls>> Firewalls { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the VPCRouter
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The flag to enable connecting to the Internet from the VPC Router
        /// </summary>
        [Output("internetConnection")]
        public Output<bool?> InternetConnection { get; private set; } = null!;

        [Output("l2tp")]
        public Output<Outputs.VPCRouterL2tp?> L2tp { get; private set; } = null!;

        /// <summary>
        /// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        [Output("portForwardings")]
        public Output<ImmutableArray<Outputs.VPCRouterPortForwardings>> PortForwardings { get; private set; } = null!;

        [Output("pptp")]
        public Output<Outputs.VPCRouterPptp?> Pptp { get; private set; } = null!;

        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting
        /// </summary>
        [Output("privateNetworkInterfaces")]
        public Output<ImmutableArray<Outputs.VPCRouterPrivateNetworkInterfaces>> PrivateNetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The public ip address of the VPC Router
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// The bit length of the subnet to assign to the public network interface
        /// </summary>
        [Output("publicNetmask")]
        public Output<int> PublicNetmask { get; private set; } = null!;

        [Output("publicNetworkInterface")]
        public Output<Outputs.VPCRouterPublicNetworkInterface?> PublicNetworkInterface { get; private set; } = null!;

        [Output("siteToSiteVpns")]
        public Output<ImmutableArray<Outputs.VPCRouterSiteToSiteVpns>> SiteToSiteVpns { get; private set; } = null!;

        [Output("staticNats")]
        public Output<ImmutableArray<Outputs.VPCRouterStaticNats>> StaticNats { get; private set; } = null!;

        [Output("staticRoutes")]
        public Output<ImmutableArray<Outputs.VPCRouterStaticRoutes>> StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The ip address of the syslog host to which the VPC Router sends logs
        /// </summary>
        [Output("syslogHost")]
        public Output<string?> SyslogHost { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the VPCRouter
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("users")]
        public Output<ImmutableArray<Outputs.VPCRouterUsers>> Users { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a VPCRouter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VPCRouter(string name, VPCRouterArgs? args = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/vPCRouter:VPCRouter", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private VPCRouter(string name, Input<string> id, VPCRouterState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/vPCRouter:VPCRouter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VPCRouter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VPCRouter Get(string name, Input<string> id, VPCRouterState? state = null, CustomResourceOptions? options = null)
        {
            return new VPCRouter(name, id, state, options);
        }
    }

    public sealed class VPCRouterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpServers")]
        private InputList<Inputs.VPCRouterDhcpServersArgs>? _dhcpServers;
        public InputList<Inputs.VPCRouterDhcpServersArgs> DhcpServers
        {
            get => _dhcpServers ?? (_dhcpServers = new InputList<Inputs.VPCRouterDhcpServersArgs>());
            set => _dhcpServers = value;
        }

        [Input("dhcpStaticMappings")]
        private InputList<Inputs.VPCRouterDhcpStaticMappingsArgs>? _dhcpStaticMappings;
        public InputList<Inputs.VPCRouterDhcpStaticMappingsArgs> DhcpStaticMappings
        {
            get => _dhcpStaticMappings ?? (_dhcpStaticMappings = new InputList<Inputs.VPCRouterDhcpStaticMappingsArgs>());
            set => _dhcpStaticMappings = value;
        }

        [Input("firewalls")]
        private InputList<Inputs.VPCRouterFirewallsArgs>? _firewalls;
        public InputList<Inputs.VPCRouterFirewallsArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.VPCRouterFirewallsArgs>());
            set => _firewalls = value;
        }

        /// <summary>
        /// The icon id to attach to the VPCRouter
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to enable connecting to the Internet from the VPC Router
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        [Input("l2tp")]
        public Input<Inputs.VPCRouterL2tpArgs>? L2tp { get; set; }

        /// <summary>
        /// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("portForwardings")]
        private InputList<Inputs.VPCRouterPortForwardingsArgs>? _portForwardings;
        public InputList<Inputs.VPCRouterPortForwardingsArgs> PortForwardings
        {
            get => _portForwardings ?? (_portForwardings = new InputList<Inputs.VPCRouterPortForwardingsArgs>());
            set => _portForwardings = value;
        }

        [Input("pptp")]
        public Input<Inputs.VPCRouterPptpArgs>? Pptp { get; set; }

        [Input("privateNetworkInterfaces")]
        private InputList<Inputs.VPCRouterPrivateNetworkInterfacesArgs>? _privateNetworkInterfaces;

        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting
        /// </summary>
        public InputList<Inputs.VPCRouterPrivateNetworkInterfacesArgs> PrivateNetworkInterfaces
        {
            get => _privateNetworkInterfaces ?? (_privateNetworkInterfaces = new InputList<Inputs.VPCRouterPrivateNetworkInterfacesArgs>());
            set => _privateNetworkInterfaces = value;
        }

        [Input("publicNetworkInterface")]
        public Input<Inputs.VPCRouterPublicNetworkInterfaceArgs>? PublicNetworkInterface { get; set; }

        [Input("siteToSiteVpns")]
        private InputList<Inputs.VPCRouterSiteToSiteVpnsArgs>? _siteToSiteVpns;
        public InputList<Inputs.VPCRouterSiteToSiteVpnsArgs> SiteToSiteVpns
        {
            get => _siteToSiteVpns ?? (_siteToSiteVpns = new InputList<Inputs.VPCRouterSiteToSiteVpnsArgs>());
            set => _siteToSiteVpns = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.VPCRouterStaticNatsArgs>? _staticNats;
        public InputList<Inputs.VPCRouterStaticNatsArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.VPCRouterStaticNatsArgs>());
            set => _staticNats = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.VPCRouterStaticRoutesArgs>? _staticRoutes;
        public InputList<Inputs.VPCRouterStaticRoutesArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.VPCRouterStaticRoutesArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ip address of the syslog host to which the VPC Router sends logs
        /// </summary>
        [Input("syslogHost")]
        public Input<string>? SyslogHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the VPCRouter
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.VPCRouterUsersArgs>? _users;
        public InputList<Inputs.VPCRouterUsersArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.VPCRouterUsersArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VPCRouterArgs()
        {
        }
    }

    public sealed class VPCRouterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpServers")]
        private InputList<Inputs.VPCRouterDhcpServersGetArgs>? _dhcpServers;
        public InputList<Inputs.VPCRouterDhcpServersGetArgs> DhcpServers
        {
            get => _dhcpServers ?? (_dhcpServers = new InputList<Inputs.VPCRouterDhcpServersGetArgs>());
            set => _dhcpServers = value;
        }

        [Input("dhcpStaticMappings")]
        private InputList<Inputs.VPCRouterDhcpStaticMappingsGetArgs>? _dhcpStaticMappings;
        public InputList<Inputs.VPCRouterDhcpStaticMappingsGetArgs> DhcpStaticMappings
        {
            get => _dhcpStaticMappings ?? (_dhcpStaticMappings = new InputList<Inputs.VPCRouterDhcpStaticMappingsGetArgs>());
            set => _dhcpStaticMappings = value;
        }

        [Input("firewalls")]
        private InputList<Inputs.VPCRouterFirewallsGetArgs>? _firewalls;
        public InputList<Inputs.VPCRouterFirewallsGetArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.VPCRouterFirewallsGetArgs>());
            set => _firewalls = value;
        }

        /// <summary>
        /// The icon id to attach to the VPCRouter
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to enable connecting to the Internet from the VPC Router
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        [Input("l2tp")]
        public Input<Inputs.VPCRouterL2tpGetArgs>? L2tp { get; set; }

        /// <summary>
        /// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("portForwardings")]
        private InputList<Inputs.VPCRouterPortForwardingsGetArgs>? _portForwardings;
        public InputList<Inputs.VPCRouterPortForwardingsGetArgs> PortForwardings
        {
            get => _portForwardings ?? (_portForwardings = new InputList<Inputs.VPCRouterPortForwardingsGetArgs>());
            set => _portForwardings = value;
        }

        [Input("pptp")]
        public Input<Inputs.VPCRouterPptpGetArgs>? Pptp { get; set; }

        [Input("privateNetworkInterfaces")]
        private InputList<Inputs.VPCRouterPrivateNetworkInterfacesGetArgs>? _privateNetworkInterfaces;

        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting
        /// </summary>
        public InputList<Inputs.VPCRouterPrivateNetworkInterfacesGetArgs> PrivateNetworkInterfaces
        {
            get => _privateNetworkInterfaces ?? (_privateNetworkInterfaces = new InputList<Inputs.VPCRouterPrivateNetworkInterfacesGetArgs>());
            set => _privateNetworkInterfaces = value;
        }

        /// <summary>
        /// The public ip address of the VPC Router
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// The bit length of the subnet to assign to the public network interface
        /// </summary>
        [Input("publicNetmask")]
        public Input<int>? PublicNetmask { get; set; }

        [Input("publicNetworkInterface")]
        public Input<Inputs.VPCRouterPublicNetworkInterfaceGetArgs>? PublicNetworkInterface { get; set; }

        [Input("siteToSiteVpns")]
        private InputList<Inputs.VPCRouterSiteToSiteVpnsGetArgs>? _siteToSiteVpns;
        public InputList<Inputs.VPCRouterSiteToSiteVpnsGetArgs> SiteToSiteVpns
        {
            get => _siteToSiteVpns ?? (_siteToSiteVpns = new InputList<Inputs.VPCRouterSiteToSiteVpnsGetArgs>());
            set => _siteToSiteVpns = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.VPCRouterStaticNatsGetArgs>? _staticNats;
        public InputList<Inputs.VPCRouterStaticNatsGetArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.VPCRouterStaticNatsGetArgs>());
            set => _staticNats = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.VPCRouterStaticRoutesGetArgs>? _staticRoutes;
        public InputList<Inputs.VPCRouterStaticRoutesGetArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.VPCRouterStaticRoutesGetArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ip address of the syslog host to which the VPC Router sends logs
        /// </summary>
        [Input("syslogHost")]
        public Input<string>? SyslogHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the VPCRouter
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.VPCRouterUsersGetArgs>? _users;
        public InputList<Inputs.VPCRouterUsersGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.VPCRouterUsersGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VPCRouterState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VPCRouterDhcpServersArgs : Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("interfaceIndex", required: true)]
        public Input<int> InterfaceIndex { get; set; } = null!;

        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterDhcpServersArgs()
        {
        }
    }

    public sealed class VPCRouterDhcpServersGetArgs : Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("interfaceIndex", required: true)]
        public Input<int> InterfaceIndex { get; set; } = null!;

        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterDhcpServersGetArgs()
        {
        }
    }

    public sealed class VPCRouterDhcpStaticMappingsArgs : Pulumi.ResourceArgs
    {
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("macAddress", required: true)]
        public Input<string> MacAddress { get; set; } = null!;

        public VPCRouterDhcpStaticMappingsArgs()
        {
        }
    }

    public sealed class VPCRouterDhcpStaticMappingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("ipAddress", required: true)]
        public Input<string> IpAddress { get; set; } = null!;

        [Input("macAddress", required: true)]
        public Input<string> MacAddress { get; set; } = null!;

        public VPCRouterDhcpStaticMappingsGetArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsArgs : Pulumi.ResourceArgs
    {
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        [Input("expressions", required: true)]
        private InputList<VPCRouterFirewallsExpressionsArgs>? _expressions;
        public InputList<VPCRouterFirewallsExpressionsArgs> Expressions
        {
            get => _expressions ?? (_expressions = new InputList<VPCRouterFirewallsExpressionsArgs>());
            set => _expressions = value;
        }

        [Input("interfaceIndex")]
        public Input<int>? InterfaceIndex { get; set; }

        public VPCRouterFirewallsArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsExpressionsArgs : Pulumi.ResourceArgs
    {
        [Input("allow", required: true)]
        public Input<bool> Allow { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationNetwork")]
        public Input<string>? DestinationNetwork { get; set; }

        [Input("destinationPort")]
        public Input<string>? DestinationPort { get; set; }

        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("sourceNetwork")]
        public Input<string>? SourceNetwork { get; set; }

        [Input("sourcePort")]
        public Input<string>? SourcePort { get; set; }

        public VPCRouterFirewallsExpressionsArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsExpressionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("allow", required: true)]
        public Input<bool> Allow { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destinationNetwork")]
        public Input<string>? DestinationNetwork { get; set; }

        [Input("destinationPort")]
        public Input<string>? DestinationPort { get; set; }

        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("sourceNetwork")]
        public Input<string>? SourceNetwork { get; set; }

        [Input("sourcePort")]
        public Input<string>? SourcePort { get; set; }

        public VPCRouterFirewallsExpressionsGetArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsGetArgs : Pulumi.ResourceArgs
    {
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        [Input("expressions", required: true)]
        private InputList<VPCRouterFirewallsExpressionsGetArgs>? _expressions;
        public InputList<VPCRouterFirewallsExpressionsGetArgs> Expressions
        {
            get => _expressions ?? (_expressions = new InputList<VPCRouterFirewallsExpressionsGetArgs>());
            set => _expressions = value;
        }

        [Input("interfaceIndex")]
        public Input<int>? InterfaceIndex { get; set; }

        public VPCRouterFirewallsGetArgs()
        {
        }
    }

    public sealed class VPCRouterL2tpArgs : Pulumi.ResourceArgs
    {
        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterL2tpArgs()
        {
        }
    }

    public sealed class VPCRouterL2tpGetArgs : Pulumi.ResourceArgs
    {
        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterL2tpGetArgs()
        {
        }
    }

    public sealed class VPCRouterPortForwardingsArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("privateIp", required: true)]
        public Input<string> PrivateIp { get; set; } = null!;

        [Input("privatePort", required: true)]
        public Input<int> PrivatePort { get; set; } = null!;

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("publicPort", required: true)]
        public Input<int> PublicPort { get; set; } = null!;

        public VPCRouterPortForwardingsArgs()
        {
        }
    }

    public sealed class VPCRouterPortForwardingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("privateIp", required: true)]
        public Input<string> PrivateIp { get; set; } = null!;

        [Input("privatePort", required: true)]
        public Input<int> PrivatePort { get; set; } = null!;

        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        [Input("publicPort", required: true)]
        public Input<int> PublicPort { get; set; } = null!;

        public VPCRouterPortForwardingsGetArgs()
        {
        }
    }

    public sealed class VPCRouterPptpArgs : Pulumi.ResourceArgs
    {
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterPptpArgs()
        {
        }
    }

    public sealed class VPCRouterPptpGetArgs : Pulumi.ResourceArgs
    {
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterPptpGetArgs()
        {
        }
    }

    public sealed class VPCRouterPrivateNetworkInterfacesArgs : Pulumi.ResourceArgs
    {
        [Input("index", required: true)]
        public Input<int> Index { get; set; } = null!;

        [Input("ipAddresses", required: true)]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        [Input("vip")]
        public Input<string>? Vip { get; set; }

        public VPCRouterPrivateNetworkInterfacesArgs()
        {
        }
    }

    public sealed class VPCRouterPrivateNetworkInterfacesGetArgs : Pulumi.ResourceArgs
    {
        [Input("index", required: true)]
        public Input<int> Index { get; set; } = null!;

        [Input("ipAddresses", required: true)]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("netmask", required: true)]
        public Input<int> Netmask { get; set; } = null!;

        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        [Input("vip")]
        public Input<string>? Vip { get; set; }

        public VPCRouterPrivateNetworkInterfacesGetArgs()
        {
        }
    }

    public sealed class VPCRouterPublicNetworkInterfaceArgs : Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("vip")]
        public Input<string>? Vip { get; set; }

        [Input("vrid")]
        public Input<int>? Vrid { get; set; }

        public VPCRouterPublicNetworkInterfaceArgs()
        {
        }
    }

    public sealed class VPCRouterPublicNetworkInterfaceGetArgs : Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("vip")]
        public Input<string>? Vip { get; set; }

        [Input("vrid")]
        public Input<int>? Vrid { get; set; }

        public VPCRouterPublicNetworkInterfaceGetArgs()
        {
        }
    }

    public sealed class VPCRouterSiteToSiteVpnsArgs : Pulumi.ResourceArgs
    {
        [Input("localPrefixes", required: true)]
        private InputList<string>? _localPrefixes;
        public InputList<string> LocalPrefixes
        {
            get => _localPrefixes ?? (_localPrefixes = new InputList<string>());
            set => _localPrefixes = value;
        }

        [Input("peer", required: true)]
        public Input<string> Peer { get; set; } = null!;

        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        [Input("remoteId", required: true)]
        public Input<string> RemoteId { get; set; } = null!;

        [Input("routes", required: true)]
        private InputList<string>? _routes;
        public InputList<string> Routes
        {
            get => _routes ?? (_routes = new InputList<string>());
            set => _routes = value;
        }

        public VPCRouterSiteToSiteVpnsArgs()
        {
        }
    }

    public sealed class VPCRouterSiteToSiteVpnsGetArgs : Pulumi.ResourceArgs
    {
        [Input("localPrefixes", required: true)]
        private InputList<string>? _localPrefixes;
        public InputList<string> LocalPrefixes
        {
            get => _localPrefixes ?? (_localPrefixes = new InputList<string>());
            set => _localPrefixes = value;
        }

        [Input("peer", required: true)]
        public Input<string> Peer { get; set; } = null!;

        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        [Input("remoteId", required: true)]
        public Input<string> RemoteId { get; set; } = null!;

        [Input("routes", required: true)]
        private InputList<string>? _routes;
        public InputList<string> Routes
        {
            get => _routes ?? (_routes = new InputList<string>());
            set => _routes = value;
        }

        public VPCRouterSiteToSiteVpnsGetArgs()
        {
        }
    }

    public sealed class VPCRouterStaticNatsArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("privateIp", required: true)]
        public Input<string> PrivateIp { get; set; } = null!;

        [Input("publicIp", required: true)]
        public Input<string> PublicIp { get; set; } = null!;

        public VPCRouterStaticNatsArgs()
        {
        }
    }

    public sealed class VPCRouterStaticNatsGetArgs : Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("privateIp", required: true)]
        public Input<string> PrivateIp { get; set; } = null!;

        [Input("publicIp", required: true)]
        public Input<string> PublicIp { get; set; } = null!;

        public VPCRouterStaticNatsGetArgs()
        {
        }
    }

    public sealed class VPCRouterStaticRoutesArgs : Pulumi.ResourceArgs
    {
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public VPCRouterStaticRoutesArgs()
        {
        }
    }

    public sealed class VPCRouterStaticRoutesGetArgs : Pulumi.ResourceArgs
    {
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public VPCRouterStaticRoutesGetArgs()
        {
        }
    }

    public sealed class VPCRouterUsersArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public VPCRouterUsersArgs()
        {
        }
    }

    public sealed class VPCRouterUsersGetArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public VPCRouterUsersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VPCRouterDhcpServers
    {
        public readonly ImmutableArray<string> DnsServers;
        public readonly int InterfaceIndex;
        public readonly string RangeStart;
        public readonly string RangeStop;

        [OutputConstructor]
        private VPCRouterDhcpServers(
            ImmutableArray<string> dnsServers,
            int interfaceIndex,
            string rangeStart,
            string rangeStop)
        {
            DnsServers = dnsServers;
            InterfaceIndex = interfaceIndex;
            RangeStart = rangeStart;
            RangeStop = rangeStop;
        }
    }

    [OutputType]
    public sealed class VPCRouterDhcpStaticMappings
    {
        public readonly string IpAddress;
        public readonly string MacAddress;

        [OutputConstructor]
        private VPCRouterDhcpStaticMappings(
            string ipAddress,
            string macAddress)
        {
            IpAddress = ipAddress;
            MacAddress = macAddress;
        }
    }

    [OutputType]
    public sealed class VPCRouterFirewalls
    {
        public readonly string Direction;
        public readonly ImmutableArray<VPCRouterFirewallsExpressions> Expressions;
        public readonly int? InterfaceIndex;

        [OutputConstructor]
        private VPCRouterFirewalls(
            string direction,
            ImmutableArray<VPCRouterFirewallsExpressions> expressions,
            int? interfaceIndex)
        {
            Direction = direction;
            Expressions = expressions;
            InterfaceIndex = interfaceIndex;
        }
    }

    [OutputType]
    public sealed class VPCRouterFirewallsExpressions
    {
        public readonly bool Allow;
        public readonly string? Description;
        public readonly string? DestinationNetwork;
        public readonly string? DestinationPort;
        public readonly bool? Logging;
        public readonly string Protocol;
        public readonly string? SourceNetwork;
        public readonly string? SourcePort;

        [OutputConstructor]
        private VPCRouterFirewallsExpressions(
            bool allow,
            string? description,
            string? destinationNetwork,
            string? destinationPort,
            bool? logging,
            string protocol,
            string? sourceNetwork,
            string? sourcePort)
        {
            Allow = allow;
            Description = description;
            DestinationNetwork = destinationNetwork;
            DestinationPort = destinationPort;
            Logging = logging;
            Protocol = protocol;
            SourceNetwork = sourceNetwork;
            SourcePort = sourcePort;
        }
    }

    [OutputType]
    public sealed class VPCRouterL2tp
    {
        public readonly string PreSharedSecret;
        public readonly string RangeStart;
        public readonly string RangeStop;

        [OutputConstructor]
        private VPCRouterL2tp(
            string preSharedSecret,
            string rangeStart,
            string rangeStop)
        {
            PreSharedSecret = preSharedSecret;
            RangeStart = rangeStart;
            RangeStop = rangeStop;
        }
    }

    [OutputType]
    public sealed class VPCRouterPortForwardings
    {
        public readonly string? Description;
        public readonly string PrivateIp;
        public readonly int PrivatePort;
        public readonly string Protocol;
        public readonly int PublicPort;

        [OutputConstructor]
        private VPCRouterPortForwardings(
            string? description,
            string privateIp,
            int privatePort,
            string protocol,
            int publicPort)
        {
            Description = description;
            PrivateIp = privateIp;
            PrivatePort = privatePort;
            Protocol = protocol;
            PublicPort = publicPort;
        }
    }

    [OutputType]
    public sealed class VPCRouterPptp
    {
        public readonly string RangeStart;
        public readonly string RangeStop;

        [OutputConstructor]
        private VPCRouterPptp(
            string rangeStart,
            string rangeStop)
        {
            RangeStart = rangeStart;
            RangeStop = rangeStop;
        }
    }

    [OutputType]
    public sealed class VPCRouterPrivateNetworkInterfaces
    {
        public readonly int Index;
        public readonly ImmutableArray<string> IpAddresses;
        public readonly int Netmask;
        public readonly string SwitchId;
        public readonly string? Vip;

        [OutputConstructor]
        private VPCRouterPrivateNetworkInterfaces(
            int index,
            ImmutableArray<string> ipAddresses,
            int netmask,
            string switchId,
            string? vip)
        {
            Index = index;
            IpAddresses = ipAddresses;
            Netmask = netmask;
            SwitchId = switchId;
            Vip = vip;
        }
    }

    [OutputType]
    public sealed class VPCRouterPublicNetworkInterface
    {
        public readonly ImmutableArray<string> Aliases;
        public readonly ImmutableArray<string> IpAddresses;
        public readonly string? SwitchId;
        public readonly string? Vip;
        public readonly int? Vrid;

        [OutputConstructor]
        private VPCRouterPublicNetworkInterface(
            ImmutableArray<string> aliases,
            ImmutableArray<string> ipAddresses,
            string? switchId,
            string? vip,
            int? vrid)
        {
            Aliases = aliases;
            IpAddresses = ipAddresses;
            SwitchId = switchId;
            Vip = vip;
            Vrid = vrid;
        }
    }

    [OutputType]
    public sealed class VPCRouterSiteToSiteVpns
    {
        public readonly ImmutableArray<string> LocalPrefixes;
        public readonly string Peer;
        public readonly string PreSharedSecret;
        public readonly string RemoteId;
        public readonly ImmutableArray<string> Routes;

        [OutputConstructor]
        private VPCRouterSiteToSiteVpns(
            ImmutableArray<string> localPrefixes,
            string peer,
            string preSharedSecret,
            string remoteId,
            ImmutableArray<string> routes)
        {
            LocalPrefixes = localPrefixes;
            Peer = peer;
            PreSharedSecret = preSharedSecret;
            RemoteId = remoteId;
            Routes = routes;
        }
    }

    [OutputType]
    public sealed class VPCRouterStaticNats
    {
        public readonly string? Description;
        public readonly string PrivateIp;
        public readonly string PublicIp;

        [OutputConstructor]
        private VPCRouterStaticNats(
            string? description,
            string privateIp,
            string publicIp)
        {
            Description = description;
            PrivateIp = privateIp;
            PublicIp = publicIp;
        }
    }

    [OutputType]
    public sealed class VPCRouterStaticRoutes
    {
        public readonly string NextHop;
        public readonly string Prefix;

        [OutputConstructor]
        private VPCRouterStaticRoutes(
            string nextHop,
            string prefix)
        {
            NextHop = nextHop;
            Prefix = prefix;
        }
    }

    [OutputType]
    public sealed class VPCRouterUsers
    {
        public readonly string Name;
        public readonly string Password;

        [OutputConstructor]
        private VPCRouterUsers(
            string name,
            string password)
        {
            Name = name;
            Password = password;
        }
    }
    }
}
