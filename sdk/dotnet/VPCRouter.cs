// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud VPC Router.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Sakuracloud = Pulumi.Sakuracloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var standard = new Sakuracloud.VPCRouter("standard", new Sakuracloud.VPCRouterArgs
    ///         {
    ///             Description = "description",
    ///             Tags = 
    ///             {
    ///                 "tag1",
    ///                 "tag2",
    ///             },
    ///             InternetConnection = true,
    ///         });
    ///         var foobarInternet = new Sakuracloud.Internet("foobarInternet", new Sakuracloud.InternetArgs
    ///         {
    ///         });
    ///         var foobarSwitch = new Sakuracloud.Switch("foobarSwitch", new Sakuracloud.SwitchArgs
    ///         {
    ///         });
    ///         var premium = new Sakuracloud.VPCRouter("premium", new Sakuracloud.VPCRouterArgs
    ///         {
    ///             Description = "description",
    ///             Tags = 
    ///             {
    ///                 "tag1",
    ///                 "tag2",
    ///             },
    ///             Plan = "premium",
    ///             InternetConnection = true,
    ///             PublicNetworkInterface = new Sakuracloud.Inputs.VPCRouterPublicNetworkInterfaceArgs
    ///             {
    ///                 SwitchId = foobarInternet.SwitchId,
    ///                 Vip = foobarInternet.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[0]),
    ///                 IpAddresses = 
    ///                 {
    ///                     foobarInternet.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[1]),
    ///                     foobarInternet.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[2]),
    ///                 },
    ///                 Aliases = 
    ///                 {
    ///                     foobarInternet.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[3]),
    ///                 },
    ///                 Vrid = 1,
    ///             },
    ///             PrivateNetworkInterfaces = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterPrivateNetworkInterfaceArgs
    ///                 {
    ///                     Index = 1,
    ///                     SwitchId = foobarSwitch.Id,
    ///                     Vip = "192.168.11.1",
    ///                     IpAddresses = 
    ///                     {
    ///                         "192.168.11.2",
    ///                         "192.168.11.3",
    ///                     },
    ///                     Netmask = 24,
    ///                 },
    ///             },
    ///             DhcpServers = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterDhcpServerArgs
    ///                 {
    ///                     InterfaceIndex = 1,
    ///                     RangeStart = "192.168.11.11",
    ///                     RangeStop = "192.168.11.20",
    ///                     DnsServers = 
    ///                     {
    ///                         "8.8.8.8",
    ///                         "8.8.4.4",
    ///                     },
    ///                 },
    ///             },
    ///             DhcpStaticMappings = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterDhcpStaticMappingArgs
    ///                 {
    ///                     IpAddress = "192.168.11.10",
    ///                     MacAddress = "aa:bb:cc:aa:bb:cc",
    ///                 },
    ///             },
    ///             Firewalls = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterFirewallArgs
    ///                 {
    ///                     InterfaceIndex = 1,
    ///                     Direction = "send",
    ///                     Expressions = 
    ///                     {
    ///                         new Sakuracloud.Inputs.VPCRouterFirewallExpressionArgs
    ///                         {
    ///                             Protocol = "tcp",
    ///                             SourceNetwork = "",
    ///                             SourcePort = "80",
    ///                             DestinationNetwork = "",
    ///                             DestinationPort = "",
    ///                             Allow = true,
    ///                             Logging = true,
    ///                             Description = "desc",
    ///                         },
    ///                         new Sakuracloud.Inputs.VPCRouterFirewallExpressionArgs
    ///                         {
    ///                             Protocol = "ip",
    ///                             SourceNetwork = "",
    ///                             SourcePort = "",
    ///                             DestinationNetwork = "",
    ///                             DestinationPort = "",
    ///                             Allow = false,
    ///                             Logging = true,
    ///                             Description = "desc",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             L2tp = new Sakuracloud.Inputs.VPCRouterL2tpArgs
    ///             {
    ///                 PreSharedSecret = "example",
    ///                 RangeStart = "192.168.11.21",
    ///                 RangeStop = "192.168.11.30",
    ///             },
    ///             PortForwardings = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterPortForwardingArgs
    ///                 {
    ///                     Protocol = "udp",
    ///                     PublicPort = 10022,
    ///                     PrivateIp = "192.168.11.11",
    ///                     PrivatePort = 22,
    ///                     Description = "desc",
    ///                 },
    ///             },
    ///             Pptp = new Sakuracloud.Inputs.VPCRouterPptpArgs
    ///             {
    ///                 RangeStart = "192.168.11.31",
    ///                 RangeStop = "192.168.11.40",
    ///             },
    ///             SiteToSiteVpns = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterSiteToSiteVpnArgs
    ///                 {
    ///                     Peer = "10.0.0.1",
    ///                     RemoteId = "10.0.0.1",
    ///                     PreSharedSecret = "example",
    ///                     Routes = 
    ///                     {
    ///                         "10.0.0.0/8",
    ///                     },
    ///                     LocalPrefixes = 
    ///                     {
    ///                         "192.168.21.0/24",
    ///                     },
    ///                 },
    ///             },
    ///             StaticNats = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterStaticNatArgs
    ///                 {
    ///                     PublicIp = foobarInternet.IpAddresses.Apply(ipAddresses =&gt; ipAddresses[3]),
    ///                     PrivateIp = "192.168.11.12",
    ///                     Description = "desc",
    ///                 },
    ///             },
    ///             StaticRoutes = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterStaticRouteArgs
    ///                 {
    ///                     Prefix = "172.16.0.0/16",
    ///                     NextHop = "192.168.11.99",
    ///                 },
    ///             },
    ///             Users = 
    ///             {
    ///                 new Sakuracloud.Inputs.VPCRouterUserArgs
    ///                 {
    ///                     Name = "username",
    ///                     Password = "password",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/vPCRouter:VPCRouter")]
    public partial class VPCRouter : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the expression. The length of this value must be in the range [`0`-`512`].
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// One or more `dhcp_server` blocks as defined below.
        /// </summary>
        [Output("dhcpServers")]
        public Output<ImmutableArray<Outputs.VPCRouterDhcpServer>> DhcpServers { get; private set; } = null!;

        /// <summary>
        /// One or more `dhcp_static_mapping` blocks as defined below.
        /// </summary>
        [Output("dhcpStaticMappings")]
        public Output<ImmutableArray<Outputs.VPCRouterDhcpStaticMapping>> DhcpStaticMappings { get; private set; } = null!;

        /// <summary>
        /// One or more `firewall` blocks as defined below.
        /// </summary>
        [Output("firewalls")]
        public Output<ImmutableArray<Outputs.VPCRouterFirewall>> Firewalls { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the VPCRouter.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
        /// </summary>
        [Output("internetConnection")]
        public Output<bool?> InternetConnection { get; private set; } = null!;

        /// <summary>
        /// A `l2tp` block as defined below.
        /// </summary>
        [Output("l2tp")]
        public Output<Outputs.VPCRouterL2tp?> L2tp { get; private set; } = null!;

        /// <summary>
        /// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// One or more `port_forwarding` blocks as defined below.
        /// </summary>
        [Output("portForwardings")]
        public Output<ImmutableArray<Outputs.VPCRouterPortForwarding>> PortForwardings { get; private set; } = null!;

        /// <summary>
        /// A `pptp` block as defined below.
        /// </summary>
        [Output("pptp")]
        public Output<Outputs.VPCRouterPptp?> Pptp { get; private set; } = null!;

        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting.
        /// </summary>
        [Output("privateNetworkInterfaces")]
        public Output<ImmutableArray<Outputs.VPCRouterPrivateNetworkInterface>> PrivateNetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The public IP address used for the static NAT.
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        /// <summary>
        /// The bit length of the subnet to assign to the public network interface.
        /// </summary>
        [Output("publicNetmask")]
        public Output<int> PublicNetmask { get; private set; } = null!;

        /// <summary>
        /// An `public_network_interface` block as defined below. This block is required when `plan` is not `standard`.
        /// </summary>
        [Output("publicNetworkInterface")]
        public Output<Outputs.VPCRouterPublicNetworkInterface?> PublicNetworkInterface { get; private set; } = null!;

        /// <summary>
        /// One or more `site_to_site_vpn` blocks as defined below.
        /// </summary>
        [Output("siteToSiteVpns")]
        public Output<ImmutableArray<Outputs.VPCRouterSiteToSiteVpn>> SiteToSiteVpns { get; private set; } = null!;

        /// <summary>
        /// One or more `static_nat` blocks as defined below.
        /// </summary>
        [Output("staticNats")]
        public Output<ImmutableArray<Outputs.VPCRouterStaticNat>> StaticNats { get; private set; } = null!;

        /// <summary>
        /// One or more `static_route` blocks as defined below.
        /// </summary>
        [Output("staticRoutes")]
        public Output<ImmutableArray<Outputs.VPCRouterStaticRoute>> StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The ip address of the syslog host to which the VPC Router sends logs.
        /// </summary>
        [Output("syslogHost")]
        public Output<string?> SyslogHost { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the VPCRouter.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// One or more `user` blocks as defined below.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.VPCRouterUser>> Users { get; private set; } = null!;

        /// <summary>
        /// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
        /// </summary>
        [Output("version")]
        public Output<int?> Version { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a VPCRouter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VPCRouter(string name, VPCRouterArgs? args = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/vPCRouter:VPCRouter", name, args ?? new VPCRouterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VPCRouter(string name, Input<string> id, VPCRouterState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/vPCRouter:VPCRouter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VPCRouter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VPCRouter Get(string name, Input<string> id, VPCRouterState? state = null, CustomResourceOptions? options = null)
        {
            return new VPCRouter(name, id, state, options);
        }
    }

    public sealed class VPCRouterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the expression. The length of this value must be in the range [`0`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpServers")]
        private InputList<Inputs.VPCRouterDhcpServerArgs>? _dhcpServers;

        /// <summary>
        /// One or more `dhcp_server` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpServerArgs> DhcpServers
        {
            get => _dhcpServers ?? (_dhcpServers = new InputList<Inputs.VPCRouterDhcpServerArgs>());
            set => _dhcpServers = value;
        }

        [Input("dhcpStaticMappings")]
        private InputList<Inputs.VPCRouterDhcpStaticMappingArgs>? _dhcpStaticMappings;

        /// <summary>
        /// One or more `dhcp_static_mapping` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpStaticMappingArgs> DhcpStaticMappings
        {
            get => _dhcpStaticMappings ?? (_dhcpStaticMappings = new InputList<Inputs.VPCRouterDhcpStaticMappingArgs>());
            set => _dhcpStaticMappings = value;
        }

        [Input("firewalls")]
        private InputList<Inputs.VPCRouterFirewallArgs>? _firewalls;

        /// <summary>
        /// One or more `firewall` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterFirewallArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.VPCRouterFirewallArgs>());
            set => _firewalls = value;
        }

        /// <summary>
        /// The icon id to attach to the VPCRouter.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// A `l2tp` block as defined below.
        /// </summary>
        [Input("l2tp")]
        public Input<Inputs.VPCRouterL2tpArgs>? L2tp { get; set; }

        /// <summary>
        /// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("portForwardings")]
        private InputList<Inputs.VPCRouterPortForwardingArgs>? _portForwardings;

        /// <summary>
        /// One or more `port_forwarding` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterPortForwardingArgs> PortForwardings
        {
            get => _portForwardings ?? (_portForwardings = new InputList<Inputs.VPCRouterPortForwardingArgs>());
            set => _portForwardings = value;
        }

        /// <summary>
        /// A `pptp` block as defined below.
        /// </summary>
        [Input("pptp")]
        public Input<Inputs.VPCRouterPptpArgs>? Pptp { get; set; }

        [Input("privateNetworkInterfaces")]
        private InputList<Inputs.VPCRouterPrivateNetworkInterfaceArgs>? _privateNetworkInterfaces;

        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting.
        /// </summary>
        public InputList<Inputs.VPCRouterPrivateNetworkInterfaceArgs> PrivateNetworkInterfaces
        {
            get => _privateNetworkInterfaces ?? (_privateNetworkInterfaces = new InputList<Inputs.VPCRouterPrivateNetworkInterfaceArgs>());
            set => _privateNetworkInterfaces = value;
        }

        /// <summary>
        /// An `public_network_interface` block as defined below. This block is required when `plan` is not `standard`.
        /// </summary>
        [Input("publicNetworkInterface")]
        public Input<Inputs.VPCRouterPublicNetworkInterfaceArgs>? PublicNetworkInterface { get; set; }

        [Input("siteToSiteVpns")]
        private InputList<Inputs.VPCRouterSiteToSiteVpnArgs>? _siteToSiteVpns;

        /// <summary>
        /// One or more `site_to_site_vpn` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterSiteToSiteVpnArgs> SiteToSiteVpns
        {
            get => _siteToSiteVpns ?? (_siteToSiteVpns = new InputList<Inputs.VPCRouterSiteToSiteVpnArgs>());
            set => _siteToSiteVpns = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.VPCRouterStaticNatArgs>? _staticNats;

        /// <summary>
        /// One or more `static_nat` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterStaticNatArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.VPCRouterStaticNatArgs>());
            set => _staticNats = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.VPCRouterStaticRouteArgs>? _staticRoutes;

        /// <summary>
        /// One or more `static_route` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterStaticRouteArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.VPCRouterStaticRouteArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ip address of the syslog host to which the VPC Router sends logs.
        /// </summary>
        [Input("syslogHost")]
        public Input<string>? SyslogHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the VPCRouter.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.VPCRouterUserArgs>? _users;

        /// <summary>
        /// One or more `user` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.VPCRouterUserArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VPCRouterArgs()
        {
        }
    }

    public sealed class VPCRouterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the expression. The length of this value must be in the range [`0`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpServers")]
        private InputList<Inputs.VPCRouterDhcpServerGetArgs>? _dhcpServers;

        /// <summary>
        /// One or more `dhcp_server` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpServerGetArgs> DhcpServers
        {
            get => _dhcpServers ?? (_dhcpServers = new InputList<Inputs.VPCRouterDhcpServerGetArgs>());
            set => _dhcpServers = value;
        }

        [Input("dhcpStaticMappings")]
        private InputList<Inputs.VPCRouterDhcpStaticMappingGetArgs>? _dhcpStaticMappings;

        /// <summary>
        /// One or more `dhcp_static_mapping` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpStaticMappingGetArgs> DhcpStaticMappings
        {
            get => _dhcpStaticMappings ?? (_dhcpStaticMappings = new InputList<Inputs.VPCRouterDhcpStaticMappingGetArgs>());
            set => _dhcpStaticMappings = value;
        }

        [Input("firewalls")]
        private InputList<Inputs.VPCRouterFirewallGetArgs>? _firewalls;

        /// <summary>
        /// One or more `firewall` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterFirewallGetArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.VPCRouterFirewallGetArgs>());
            set => _firewalls = value;
        }

        /// <summary>
        /// The icon id to attach to the VPCRouter.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// A `l2tp` block as defined below.
        /// </summary>
        [Input("l2tp")]
        public Input<Inputs.VPCRouterL2tpGetArgs>? L2tp { get; set; }

        /// <summary>
        /// The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("portForwardings")]
        private InputList<Inputs.VPCRouterPortForwardingGetArgs>? _portForwardings;

        /// <summary>
        /// One or more `port_forwarding` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterPortForwardingGetArgs> PortForwardings
        {
            get => _portForwardings ?? (_portForwardings = new InputList<Inputs.VPCRouterPortForwardingGetArgs>());
            set => _portForwardings = value;
        }

        /// <summary>
        /// A `pptp` block as defined below.
        /// </summary>
        [Input("pptp")]
        public Input<Inputs.VPCRouterPptpGetArgs>? Pptp { get; set; }

        [Input("privateNetworkInterfaces")]
        private InputList<Inputs.VPCRouterPrivateNetworkInterfaceGetArgs>? _privateNetworkInterfaces;

        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting.
        /// </summary>
        public InputList<Inputs.VPCRouterPrivateNetworkInterfaceGetArgs> PrivateNetworkInterfaces
        {
            get => _privateNetworkInterfaces ?? (_privateNetworkInterfaces = new InputList<Inputs.VPCRouterPrivateNetworkInterfaceGetArgs>());
            set => _privateNetworkInterfaces = value;
        }

        /// <summary>
        /// The public IP address used for the static NAT.
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// The bit length of the subnet to assign to the public network interface.
        /// </summary>
        [Input("publicNetmask")]
        public Input<int>? PublicNetmask { get; set; }

        /// <summary>
        /// An `public_network_interface` block as defined below. This block is required when `plan` is not `standard`.
        /// </summary>
        [Input("publicNetworkInterface")]
        public Input<Inputs.VPCRouterPublicNetworkInterfaceGetArgs>? PublicNetworkInterface { get; set; }

        [Input("siteToSiteVpns")]
        private InputList<Inputs.VPCRouterSiteToSiteVpnGetArgs>? _siteToSiteVpns;

        /// <summary>
        /// One or more `site_to_site_vpn` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterSiteToSiteVpnGetArgs> SiteToSiteVpns
        {
            get => _siteToSiteVpns ?? (_siteToSiteVpns = new InputList<Inputs.VPCRouterSiteToSiteVpnGetArgs>());
            set => _siteToSiteVpns = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.VPCRouterStaticNatGetArgs>? _staticNats;

        /// <summary>
        /// One or more `static_nat` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterStaticNatGetArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.VPCRouterStaticNatGetArgs>());
            set => _staticNats = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.VPCRouterStaticRouteGetArgs>? _staticRoutes;

        /// <summary>
        /// One or more `static_route` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterStaticRouteGetArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.VPCRouterStaticRouteGetArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ip address of the syslog host to which the VPC Router sends logs.
        /// </summary>
        [Input("syslogHost")]
        public Input<string>? SyslogHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the VPCRouter.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.VPCRouterUserGetArgs>? _users;

        /// <summary>
        /// One or more `user` blocks as defined below.
        /// </summary>
        public InputList<Inputs.VPCRouterUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.VPCRouterUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VPCRouterState()
        {
        }
    }
}
