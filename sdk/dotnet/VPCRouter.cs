// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud VPC Router resource. This can be used to create, update, and delete VPC Routers.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/vpc_router.html.markdown.
    /// </summary>
    public partial class VPCRouter : Pulumi.CustomResource
    {
        /// <summary>
        /// The IP address aliase list. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Output("aliases")]
        public Output<ImmutableArray<string>> Aliases { get; private set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The DHCP server settings. It contains some attributes to dhcp_server.   
        /// </summary>
        [Output("dhcpServers")]
        public Output<ImmutableArray<Outputs.VPCRouterDhcpServers>> DhcpServers { get; private set; } = null!;

        /// <summary>
        /// The DHCP static mapping settings. It contains some attributes to dhcp_static_mapping.  
        /// </summary>
        [Output("dhcpStaticMappings")]
        public Output<ImmutableArray<Outputs.VPCRouterDhcpStaticMappings>> DhcpStaticMappings { get; private set; } = null!;

        /// <summary>
        /// The firewall settings. It contains some attributes to firewall.  
        /// </summary>
        [Output("firewalls")]
        public Output<ImmutableArray<Outputs.VPCRouterFirewalls>> Firewalls { get; private set; } = null!;

        /// <summary>
        /// (Required) The global IP address of the Static NAT.
        /// </summary>
        [Output("globalAddress")]
        public Output<string> GlobalAddress { get; private set; } = null!;

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the VPC Router.
        /// </summary>
        [Output("gracefulShutdownTimeout")]
        public Output<int?> GracefulShutdownTimeout { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The private NICs. It contains some attributes to interface. 
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.VPCRouterInterfaces>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// The flag of enable/disable connection from the VPC Router to the Internet.
        /// </summary>
        [Output("internetConnection")]
        public Output<bool?> InternetConnection { get; private set; } = null!;

        /// <summary>
        /// The primary IP address of the VPC Router.
        /// </summary>
        [Output("ipaddress1")]
        public Output<string?> Ipaddress1 { get; private set; } = null!;

        /// <summary>
        /// The secondly IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Output("ipaddress2")]
        public Output<string?> Ipaddress2 { get; private set; } = null!;

        [Output("l2tp")]
        public Output<Outputs.VPCRouterL2tp> L2tp { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The plan of the VPC Router.   
        /// Valid value is one of the following: [ "standard" (default) / "premium" / "highspec" ]
        /// </summary>
        [Output("plan")]
        public Output<string?> Plan { get; private set; } = null!;

        /// <summary>
        /// The port forwarding settings. It contains some attributes to port_forwarding. 
        /// </summary>
        [Output("portForwardings")]
        public Output<ImmutableArray<Outputs.VPCRouterPortForwardings>> PortForwardings { get; private set; } = null!;

        /// <summary>
        /// The PPTP settings. It contains some attributes to pptp.  
        /// </summary>
        [Output("pptp")]
        public Output<Outputs.VPCRouterPptp> Pptp { get; private set; } = null!;

        /// <summary>
        /// The Site-to-Site VPN settings. It contains some attributes to site_to_site_vpn.  
        /// </summary>
        [Output("siteToSiteVpns")]
        public Output<ImmutableArray<Outputs.VPCRouterSiteToSiteVpns>> SiteToSiteVpns { get; private set; } = null!;

        /// <summary>
        /// The static NAT settings. It contains some attributes to static_nat.  
        /// </summary>
        [Output("staticNats")]
        public Output<ImmutableArray<Outputs.VPCRouterStaticNats>> StaticNats { get; private set; } = null!;

        /// <summary>
        /// The static route settings. It contains some attributes to static_route.  
        /// </summary>
        [Output("staticRoutes")]
        public Output<ImmutableArray<Outputs.VPCRouterStaticRoutes>> StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Output("switchId")]
        public Output<string?> SwitchId { get; private set; } = null!;

        /// <summary>
        /// The destination HostName/IP address to send log.	
        /// </summary>
        [Output("syslogHost")]
        public Output<string?> SyslogHost { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The remote access user settings. It contains some attributes to user.  
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.VPCRouterUsers>> Users { get; private set; } = null!;

        /// <summary>
        /// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Output("vip")]
        public Output<string?> Vip { get; private set; } = null!;

        /// <summary>
        /// VRID used when plan is `premium` or `highspec`.
        /// </summary>
        [Output("vrid")]
        public Output<int?> Vrid { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a VPCRouter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VPCRouter(string name, VPCRouterArgs? args = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/vPCRouter:VPCRouter", name, args, MakeResourceOptions(options, ""))
        {
        }

        private VPCRouter(string name, Input<string> id, VPCRouterState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/vPCRouter:VPCRouter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VPCRouter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VPCRouter Get(string name, Input<string> id, VPCRouterState? state = null, CustomResourceOptions? options = null)
        {
            return new VPCRouter(name, id, state, options);
        }
    }

    public sealed class VPCRouterArgs : Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;

        /// <summary>
        /// The IP address aliase list. Used when plan is `premium` or `highspec`.
        /// </summary>
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpServers")]
        private InputList<Inputs.VPCRouterDhcpServersArgs>? _dhcpServers;

        /// <summary>
        /// The DHCP server settings. It contains some attributes to dhcp_server.   
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpServersArgs> DhcpServers
        {
            get => _dhcpServers ?? (_dhcpServers = new InputList<Inputs.VPCRouterDhcpServersArgs>());
            set => _dhcpServers = value;
        }

        [Input("dhcpStaticMappings")]
        private InputList<Inputs.VPCRouterDhcpStaticMappingsArgs>? _dhcpStaticMappings;

        /// <summary>
        /// The DHCP static mapping settings. It contains some attributes to dhcp_static_mapping.  
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpStaticMappingsArgs> DhcpStaticMappings
        {
            get => _dhcpStaticMappings ?? (_dhcpStaticMappings = new InputList<Inputs.VPCRouterDhcpStaticMappingsArgs>());
            set => _dhcpStaticMappings = value;
        }

        [Input("firewalls")]
        private InputList<Inputs.VPCRouterFirewallsArgs>? _firewalls;

        /// <summary>
        /// The firewall settings. It contains some attributes to firewall.  
        /// </summary>
        public InputList<Inputs.VPCRouterFirewallsArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.VPCRouterFirewallsArgs>());
            set => _firewalls = value;
        }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the VPC Router.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.VPCRouterInterfacesArgs>? _interfaces;

        /// <summary>
        /// The private NICs. It contains some attributes to interface. 
        /// </summary>
        public InputList<Inputs.VPCRouterInterfacesArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.VPCRouterInterfacesArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// The flag of enable/disable connection from the VPC Router to the Internet.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The primary IP address of the VPC Router.
        /// </summary>
        [Input("ipaddress1")]
        public Input<string>? Ipaddress1 { get; set; }

        /// <summary>
        /// The secondly IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("ipaddress2")]
        public Input<string>? Ipaddress2 { get; set; }

        [Input("l2tp")]
        public Input<Inputs.VPCRouterL2tpArgs>? L2tp { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan of the VPC Router.   
        /// Valid value is one of the following: [ "standard" (default) / "premium" / "highspec" ]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("portForwardings")]
        private InputList<Inputs.VPCRouterPortForwardingsArgs>? _portForwardings;

        /// <summary>
        /// The port forwarding settings. It contains some attributes to port_forwarding. 
        /// </summary>
        public InputList<Inputs.VPCRouterPortForwardingsArgs> PortForwardings
        {
            get => _portForwardings ?? (_portForwardings = new InputList<Inputs.VPCRouterPortForwardingsArgs>());
            set => _portForwardings = value;
        }

        /// <summary>
        /// The PPTP settings. It contains some attributes to pptp.  
        /// </summary>
        [Input("pptp")]
        public Input<Inputs.VPCRouterPptpArgs>? Pptp { get; set; }

        [Input("siteToSiteVpns")]
        private InputList<Inputs.VPCRouterSiteToSiteVpnsArgs>? _siteToSiteVpns;

        /// <summary>
        /// The Site-to-Site VPN settings. It contains some attributes to site_to_site_vpn.  
        /// </summary>
        public InputList<Inputs.VPCRouterSiteToSiteVpnsArgs> SiteToSiteVpns
        {
            get => _siteToSiteVpns ?? (_siteToSiteVpns = new InputList<Inputs.VPCRouterSiteToSiteVpnsArgs>());
            set => _siteToSiteVpns = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.VPCRouterStaticNatsArgs>? _staticNats;

        /// <summary>
        /// The static NAT settings. It contains some attributes to static_nat.  
        /// </summary>
        public InputList<Inputs.VPCRouterStaticNatsArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.VPCRouterStaticNatsArgs>());
            set => _staticNats = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.VPCRouterStaticRoutesArgs>? _staticRoutes;

        /// <summary>
        /// The static route settings. It contains some attributes to static_route.  
        /// </summary>
        public InputList<Inputs.VPCRouterStaticRoutesArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.VPCRouterStaticRoutesArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        /// <summary>
        /// The destination HostName/IP address to send log.	
        /// </summary>
        [Input("syslogHost")]
        public Input<string>? SyslogHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.VPCRouterUsersArgs>? _users;

        /// <summary>
        /// The remote access user settings. It contains some attributes to user.  
        /// </summary>
        public InputList<Inputs.VPCRouterUsersArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.VPCRouterUsersArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        /// <summary>
        /// VRID used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("vrid")]
        public Input<int>? Vrid { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VPCRouterArgs()
        {
        }
    }

    public sealed class VPCRouterState : Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;

        /// <summary>
        /// The IP address aliase list. Used when plan is `premium` or `highspec`.
        /// </summary>
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dhcpServers")]
        private InputList<Inputs.VPCRouterDhcpServersGetArgs>? _dhcpServers;

        /// <summary>
        /// The DHCP server settings. It contains some attributes to dhcp_server.   
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpServersGetArgs> DhcpServers
        {
            get => _dhcpServers ?? (_dhcpServers = new InputList<Inputs.VPCRouterDhcpServersGetArgs>());
            set => _dhcpServers = value;
        }

        [Input("dhcpStaticMappings")]
        private InputList<Inputs.VPCRouterDhcpStaticMappingsGetArgs>? _dhcpStaticMappings;

        /// <summary>
        /// The DHCP static mapping settings. It contains some attributes to dhcp_static_mapping.  
        /// </summary>
        public InputList<Inputs.VPCRouterDhcpStaticMappingsGetArgs> DhcpStaticMappings
        {
            get => _dhcpStaticMappings ?? (_dhcpStaticMappings = new InputList<Inputs.VPCRouterDhcpStaticMappingsGetArgs>());
            set => _dhcpStaticMappings = value;
        }

        [Input("firewalls")]
        private InputList<Inputs.VPCRouterFirewallsGetArgs>? _firewalls;

        /// <summary>
        /// The firewall settings. It contains some attributes to firewall.  
        /// </summary>
        public InputList<Inputs.VPCRouterFirewallsGetArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.VPCRouterFirewallsGetArgs>());
            set => _firewalls = value;
        }

        /// <summary>
        /// (Required) The global IP address of the Static NAT.
        /// </summary>
        [Input("globalAddress")]
        public Input<string>? GlobalAddress { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the VPC Router.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.VPCRouterInterfacesGetArgs>? _interfaces;

        /// <summary>
        /// The private NICs. It contains some attributes to interface. 
        /// </summary>
        public InputList<Inputs.VPCRouterInterfacesGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.VPCRouterInterfacesGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// The flag of enable/disable connection from the VPC Router to the Internet.
        /// </summary>
        [Input("internetConnection")]
        public Input<bool>? InternetConnection { get; set; }

        /// <summary>
        /// The primary IP address of the VPC Router.
        /// </summary>
        [Input("ipaddress1")]
        public Input<string>? Ipaddress1 { get; set; }

        /// <summary>
        /// The secondly IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("ipaddress2")]
        public Input<string>? Ipaddress2 { get; set; }

        [Input("l2tp")]
        public Input<Inputs.VPCRouterL2tpGetArgs>? L2tp { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan of the VPC Router.   
        /// Valid value is one of the following: [ "standard" (default) / "premium" / "highspec" ]
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        [Input("portForwardings")]
        private InputList<Inputs.VPCRouterPortForwardingsGetArgs>? _portForwardings;

        /// <summary>
        /// The port forwarding settings. It contains some attributes to port_forwarding. 
        /// </summary>
        public InputList<Inputs.VPCRouterPortForwardingsGetArgs> PortForwardings
        {
            get => _portForwardings ?? (_portForwardings = new InputList<Inputs.VPCRouterPortForwardingsGetArgs>());
            set => _portForwardings = value;
        }

        /// <summary>
        /// The PPTP settings. It contains some attributes to pptp.  
        /// </summary>
        [Input("pptp")]
        public Input<Inputs.VPCRouterPptpGetArgs>? Pptp { get; set; }

        [Input("siteToSiteVpns")]
        private InputList<Inputs.VPCRouterSiteToSiteVpnsGetArgs>? _siteToSiteVpns;

        /// <summary>
        /// The Site-to-Site VPN settings. It contains some attributes to site_to_site_vpn.  
        /// </summary>
        public InputList<Inputs.VPCRouterSiteToSiteVpnsGetArgs> SiteToSiteVpns
        {
            get => _siteToSiteVpns ?? (_siteToSiteVpns = new InputList<Inputs.VPCRouterSiteToSiteVpnsGetArgs>());
            set => _siteToSiteVpns = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.VPCRouterStaticNatsGetArgs>? _staticNats;

        /// <summary>
        /// The static NAT settings. It contains some attributes to static_nat.  
        /// </summary>
        public InputList<Inputs.VPCRouterStaticNatsGetArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.VPCRouterStaticNatsGetArgs>());
            set => _staticNats = value;
        }

        [Input("staticRoutes")]
        private InputList<Inputs.VPCRouterStaticRoutesGetArgs>? _staticRoutes;

        /// <summary>
        /// The static route settings. It contains some attributes to static_route.  
        /// </summary>
        public InputList<Inputs.VPCRouterStaticRoutesGetArgs> StaticRoutes
        {
            get => _staticRoutes ?? (_staticRoutes = new InputList<Inputs.VPCRouterStaticRoutesGetArgs>());
            set => _staticRoutes = value;
        }

        /// <summary>
        /// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        /// <summary>
        /// The destination HostName/IP address to send log.	
        /// </summary>
        [Input("syslogHost")]
        public Input<string>? SyslogHost { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.VPCRouterUsersGetArgs>? _users;

        /// <summary>
        /// The remote access user settings. It contains some attributes to user.  
        /// </summary>
        public InputList<Inputs.VPCRouterUsersGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.VPCRouterUsersGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        /// <summary>
        /// VRID used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("vrid")]
        public Input<int>? Vrid { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public VPCRouterState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VPCRouterDhcpServersArgs : Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// (Required) DNS server list to be assigned by DHCP.  
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        /// <summary>
        /// (Required) The NIC index of VPC Router running DHCP Server.
        /// </summary>
        [Input("vpcRouterInterfaceIndex", required: true)]
        public Input<int> VpcRouterInterfaceIndex { get; set; } = null!;

        public VPCRouterDhcpServersArgs()
        {
        }
    }

    public sealed class VPCRouterDhcpServersGetArgs : Pulumi.ResourceArgs
    {
        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// (Required) DNS server list to be assigned by DHCP.  
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        /// <summary>
        /// (Required) The NIC index of VPC Router running DHCP Server.
        /// </summary>
        [Input("vpcRouterInterfaceIndex", required: true)]
        public Input<int> VpcRouterInterfaceIndex { get; set; } = null!;

        public VPCRouterDhcpServersGetArgs()
        {
        }
    }

    public sealed class VPCRouterDhcpStaticMappingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) The MAC address to be the key of the mapping. 
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        /// <summary>
        /// (Required) The IP address mapped by MAC address.
        /// </summary>
        [Input("macaddress", required: true)]
        public Input<string> Macaddress { get; set; } = null!;

        public VPCRouterDhcpStaticMappingsArgs()
        {
        }
    }

    public sealed class VPCRouterDhcpStaticMappingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) The MAC address to be the key of the mapping. 
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        /// <summary>
        /// (Required) The IP address mapped by MAC address.
        /// </summary>
        [Input("macaddress", required: true)]
        public Input<string> Macaddress { get; set; } = null!;

        public VPCRouterDhcpStaticMappingsGetArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) Direction of filtering packets.  
        /// Valid value is one of the following: [ "send" / "receive" ]
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        [Input("expressions", required: true)]
        private InputList<VPCRouterFirewallsExpressionsArgs>? _expressions;

        /// <summary>
        /// (Required) Filtering rules. It contains some attributes to Expressions.
        /// </summary>
        public InputList<VPCRouterFirewallsExpressionsArgs> Expressions
        {
            get => _expressions ?? (_expressions = new InputList<VPCRouterFirewallsExpressionsArgs>());
            set => _expressions = value;
        }

        /// <summary>
        /// (Required) The NIC index of VPC Router running DHCP Server.
        /// </summary>
        [Input("vpcRouterInterfaceIndex")]
        public Input<int>? VpcRouterInterfaceIndex { get; set; }

        public VPCRouterFirewallsArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsExpressionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) The flag for allow/deny packets.
        /// </summary>
        [Input("allow", required: true)]
        public Input<bool> Allow { get; set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Required) Target destination network IP address or CIDR or range.  
        /// Valid format is one of the following:
        /// * IP address: `"xxx.xxx.xxx.xxx"`
        /// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
        /// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        /// </summary>
        [Input("destNw", required: true)]
        public Input<string> DestNw { get; set; } = null!;

        /// <summary>
        /// (Required) Target destination port.
        /// Valid format is one of the following:
        /// * Number: `"0"` - `"65535"`
        /// * Range: `"xx-yy"`
        /// * Range (hex): `"0xPPPP/0xMMMM"`
        /// </summary>
        [Input("destPort", required: true)]
        public Input<string> DestPort { get; set; } = null!;

        /// <summary>
        /// (Required) The flag for enable/disable logging.
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// (Required) Protocol used in health check.  
        /// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "ip" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// (Required) Target source network IP address or CIDR or range.  
        /// Valid format is one of the following:
        /// * IP address: `"xxx.xxx.xxx.xxx"`
        /// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
        /// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        /// </summary>
        [Input("sourceNw", required: true)]
        public Input<string> SourceNw { get; set; } = null!;

        /// <summary>
        /// (Required) Target source port.
        /// Valid format is one of the following:
        /// * Number: `"0"` - `"65535"`
        /// * Range: `"xx-yy"`
        /// * Range (hex): `"0xPPPP/0xMMMM"`
        /// </summary>
        [Input("sourcePort", required: true)]
        public Input<string> SourcePort { get; set; } = null!;

        public VPCRouterFirewallsExpressionsArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsExpressionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) The flag for allow/deny packets.
        /// </summary>
        [Input("allow", required: true)]
        public Input<bool> Allow { get; set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Required) Target destination network IP address or CIDR or range.  
        /// Valid format is one of the following:
        /// * IP address: `"xxx.xxx.xxx.xxx"`
        /// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
        /// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        /// </summary>
        [Input("destNw", required: true)]
        public Input<string> DestNw { get; set; } = null!;

        /// <summary>
        /// (Required) Target destination port.
        /// Valid format is one of the following:
        /// * Number: `"0"` - `"65535"`
        /// * Range: `"xx-yy"`
        /// * Range (hex): `"0xPPPP/0xMMMM"`
        /// </summary>
        [Input("destPort", required: true)]
        public Input<string> DestPort { get; set; } = null!;

        /// <summary>
        /// (Required) The flag for enable/disable logging.
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// (Required) Protocol used in health check.  
        /// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "ip" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// (Required) Target source network IP address or CIDR or range.  
        /// Valid format is one of the following:
        /// * IP address: `"xxx.xxx.xxx.xxx"`
        /// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
        /// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        /// </summary>
        [Input("sourceNw", required: true)]
        public Input<string> SourceNw { get; set; } = null!;

        /// <summary>
        /// (Required) Target source port.
        /// Valid format is one of the following:
        /// * Number: `"0"` - `"65535"`
        /// * Range: `"xx-yy"`
        /// * Range (hex): `"0xPPPP/0xMMMM"`
        /// </summary>
        [Input("sourcePort", required: true)]
        public Input<string> SourcePort { get; set; } = null!;

        public VPCRouterFirewallsExpressionsGetArgs()
        {
        }
    }

    public sealed class VPCRouterFirewallsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) Direction of filtering packets.  
        /// Valid value is one of the following: [ "send" / "receive" ]
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        [Input("expressions", required: true)]
        private InputList<VPCRouterFirewallsExpressionsGetArgs>? _expressions;

        /// <summary>
        /// (Required) Filtering rules. It contains some attributes to Expressions.
        /// </summary>
        public InputList<VPCRouterFirewallsExpressionsGetArgs> Expressions
        {
            get => _expressions ?? (_expressions = new InputList<VPCRouterFirewallsExpressionsGetArgs>());
            set => _expressions = value;
        }

        /// <summary>
        /// (Required) The NIC index of VPC Router running DHCP Server.
        /// </summary>
        [Input("vpcRouterInterfaceIndex")]
        public Input<int>? VpcRouterInterfaceIndex { get; set; }

        public VPCRouterFirewallsGetArgs()
        {
        }
    }

    public sealed class VPCRouterInterfacesArgs : Pulumi.ResourceArgs
    {
        [Input("ipaddresses", required: true)]
        private InputList<string>? _ipaddresses;

        /// <summary>
        /// (Required) The MAC address to be the key of the mapping. 
        /// </summary>
        public InputList<string> Ipaddresses
        {
            get => _ipaddresses ?? (_ipaddresses = new InputList<string>());
            set => _ipaddresses = value;
        }

        /// <summary>
        /// (Optional) Network mask length of the VPC Router Interface.
        /// </summary>
        [Input("nwMaskLen", required: true)]
        public Input<int> NwMaskLen { get; set; } = null!;

        /// <summary>
        /// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        /// <summary>
        /// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        public VPCRouterInterfacesArgs()
        {
        }
    }

    public sealed class VPCRouterInterfacesGetArgs : Pulumi.ResourceArgs
    {
        [Input("ipaddresses", required: true)]
        private InputList<string>? _ipaddresses;

        /// <summary>
        /// (Required) The MAC address to be the key of the mapping. 
        /// </summary>
        public InputList<string> Ipaddresses
        {
            get => _ipaddresses ?? (_ipaddresses = new InputList<string>());
            set => _ipaddresses = value;
        }

        /// <summary>
        /// (Optional) Network mask length of the VPC Router Interface.
        /// </summary>
        [Input("nwMaskLen", required: true)]
        public Input<int> NwMaskLen { get; set; } = null!;

        /// <summary>
        /// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("switchId", required: true)]
        public Input<string> SwitchId { get; set; } = null!;

        /// <summary>
        /// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        public VPCRouterInterfacesGetArgs()
        {
        }
    }

    public sealed class VPCRouterL2tpArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The pre shared secret for IPSec.
        /// </summary>
        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterL2tpArgs()
        {
        }
    }

    public sealed class VPCRouterL2tpGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The pre shared secret for IPSec.
        /// </summary>
        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterL2tpGetArgs()
        {
        }
    }

    public sealed class VPCRouterPortForwardingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Required) The global port of the Port Forwarding.
        /// </summary>
        [Input("globalPort", required: true)]
        public Input<int> GlobalPort { get; set; } = null!;

        /// <summary>
        /// (Required) The private IP address of the Static NAT.
        /// </summary>
        [Input("privateAddress", required: true)]
        public Input<string> PrivateAddress { get; set; } = null!;

        /// <summary>
        /// (Required) The destination port number of the Port Forwarding.
        /// </summary>
        [Input("privatePort", required: true)]
        public Input<int> PrivatePort { get; set; } = null!;

        /// <summary>
        /// (Required) Protocol used in health check.  
        /// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "ip" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public VPCRouterPortForwardingsArgs()
        {
        }
    }

    public sealed class VPCRouterPortForwardingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Required) The global port of the Port Forwarding.
        /// </summary>
        [Input("globalPort", required: true)]
        public Input<int> GlobalPort { get; set; } = null!;

        /// <summary>
        /// (Required) The private IP address of the Static NAT.
        /// </summary>
        [Input("privateAddress", required: true)]
        public Input<string> PrivateAddress { get; set; } = null!;

        /// <summary>
        /// (Required) The destination port number of the Port Forwarding.
        /// </summary>
        [Input("privatePort", required: true)]
        public Input<int> PrivatePort { get; set; } = null!;

        /// <summary>
        /// (Required) Protocol used in health check.  
        /// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "ip" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public VPCRouterPortForwardingsGetArgs()
        {
        }
    }

    public sealed class VPCRouterPptpArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterPptpArgs()
        {
        }
    }

    public sealed class VPCRouterPptpGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStart", required: true)]
        public Input<string> RangeStart { get; set; } = null!;

        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        [Input("rangeStop", required: true)]
        public Input<string> RangeStop { get; set; } = null!;

        public VPCRouterPptpGetArgs()
        {
        }
    }

    public sealed class VPCRouterSiteToSiteVpnsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ESP authentication protocol.
        /// </summary>
        [Input("espAuthenticationProtocol")]
        public Input<string>? EspAuthenticationProtocol { get; set; }

        /// <summary>
        /// ESP DH group.
        /// </summary>
        [Input("espDhGroup")]
        public Input<string>? EspDhGroup { get; set; }

        /// <summary>
        /// ESP encryption protocol.
        /// </summary>
        [Input("espEncryptionProtocol")]
        public Input<string>? EspEncryptionProtocol { get; set; }

        /// <summary>
        /// ESP lifetime.
        /// </summary>
        [Input("espLifetime")]
        public Input<string>? EspLifetime { get; set; }

        /// <summary>
        /// ESP mode.
        /// </summary>
        [Input("espMode")]
        public Input<string>? EspMode { get; set; }

        /// <summary>
        /// ESP perfect forward secrecy.
        /// </summary>
        [Input("espPerfectForwardSecrecy")]
        public Input<string>? EspPerfectForwardSecrecy { get; set; }

        /// <summary>
        /// IKE authentication protocol.
        /// </summary>
        [Input("ikeAuthenticationProtocol")]
        public Input<string>? IkeAuthenticationProtocol { get; set; }

        /// <summary>
        /// IKE encryption protocol.
        /// </summary>
        [Input("ikeEncryptionProtocol")]
        public Input<string>? IkeEncryptionProtocol { get; set; }

        /// <summary>
        /// IKE lifetime.
        /// </summary>
        [Input("ikeLifetime")]
        public Input<string>? IkeLifetime { get; set; }

        /// <summary>
        /// IKE mode.
        /// </summary>
        [Input("ikeMode")]
        public Input<string>? IkeMode { get; set; }

        /// <summary>
        /// IKE perfect forward secrecy.
        /// </summary>
        [Input("ikePerfectForwardSecrecy")]
        public Input<string>? IkePerfectForwardSecrecy { get; set; }

        /// <summary>
        /// IKE pre shared secret.
        /// </summary>
        [Input("ikePreSharedSecret")]
        public Input<string>? IkePreSharedSecret { get; set; }

        [Input("localPrefixes", required: true)]
        private InputList<string>? _localPrefixes;

        /// <summary>
        /// The local prefix.
        /// </summary>
        public InputList<string> LocalPrefixes
        {
            get => _localPrefixes ?? (_localPrefixes = new InputList<string>());
            set => _localPrefixes = value;
        }

        /// <summary>
        /// The peer IP address.
        /// </summary>
        [Input("peer", required: true)]
        public Input<string> Peer { get; set; } = null!;

        /// <summary>
        /// Peer ID.
        /// </summary>
        [Input("peerId")]
        public Input<string>? PeerId { get; set; }

        [Input("peerInsideNetworks")]
        private InputList<string>? _peerInsideNetworks;

        /// <summary>
        /// Peer inside networks.
        /// </summary>
        public InputList<string> PeerInsideNetworks
        {
            get => _peerInsideNetworks ?? (_peerInsideNetworks = new InputList<string>());
            set => _peerInsideNetworks = value;
        }

        /// <summary>
        /// Peer outsite ipaddress.
        /// </summary>
        [Input("peerOutsideIpaddress")]
        public Input<string>? PeerOutsideIpaddress { get; set; }

        /// <summary>
        /// The pre shared secret for IPSec.
        /// </summary>
        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        /// <summary>
        /// The IPSec ID of target.
        /// </summary>
        [Input("remoteId", required: true)]
        public Input<string> RemoteId { get; set; } = null!;

        [Input("routes", required: true)]
        private InputList<string>? _routes;

        /// <summary>
        /// The routing prefix.
        /// </summary>
        public InputList<string> Routes
        {
            get => _routes ?? (_routes = new InputList<string>());
            set => _routes = value;
        }

        [Input("vpcRouterInsideNetworks")]
        private InputList<string>? _vpcRouterInsideNetworks;

        /// <summary>
        /// VPC Router inside networks.
        /// </summary>
        public InputList<string> VpcRouterInsideNetworks
        {
            get => _vpcRouterInsideNetworks ?? (_vpcRouterInsideNetworks = new InputList<string>());
            set => _vpcRouterInsideNetworks = value;
        }

        /// <summary>
        /// VPC Router outside IP address.
        /// </summary>
        [Input("vpcRouterOutsideIpaddress")]
        public Input<string>? VpcRouterOutsideIpaddress { get; set; }

        public VPCRouterSiteToSiteVpnsArgs()
        {
        }
    }

    public sealed class VPCRouterSiteToSiteVpnsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ESP authentication protocol.
        /// </summary>
        [Input("espAuthenticationProtocol")]
        public Input<string>? EspAuthenticationProtocol { get; set; }

        /// <summary>
        /// ESP DH group.
        /// </summary>
        [Input("espDhGroup")]
        public Input<string>? EspDhGroup { get; set; }

        /// <summary>
        /// ESP encryption protocol.
        /// </summary>
        [Input("espEncryptionProtocol")]
        public Input<string>? EspEncryptionProtocol { get; set; }

        /// <summary>
        /// ESP lifetime.
        /// </summary>
        [Input("espLifetime")]
        public Input<string>? EspLifetime { get; set; }

        /// <summary>
        /// ESP mode.
        /// </summary>
        [Input("espMode")]
        public Input<string>? EspMode { get; set; }

        /// <summary>
        /// ESP perfect forward secrecy.
        /// </summary>
        [Input("espPerfectForwardSecrecy")]
        public Input<string>? EspPerfectForwardSecrecy { get; set; }

        /// <summary>
        /// IKE authentication protocol.
        /// </summary>
        [Input("ikeAuthenticationProtocol")]
        public Input<string>? IkeAuthenticationProtocol { get; set; }

        /// <summary>
        /// IKE encryption protocol.
        /// </summary>
        [Input("ikeEncryptionProtocol")]
        public Input<string>? IkeEncryptionProtocol { get; set; }

        /// <summary>
        /// IKE lifetime.
        /// </summary>
        [Input("ikeLifetime")]
        public Input<string>? IkeLifetime { get; set; }

        /// <summary>
        /// IKE mode.
        /// </summary>
        [Input("ikeMode")]
        public Input<string>? IkeMode { get; set; }

        /// <summary>
        /// IKE perfect forward secrecy.
        /// </summary>
        [Input("ikePerfectForwardSecrecy")]
        public Input<string>? IkePerfectForwardSecrecy { get; set; }

        /// <summary>
        /// IKE pre shared secret.
        /// </summary>
        [Input("ikePreSharedSecret")]
        public Input<string>? IkePreSharedSecret { get; set; }

        [Input("localPrefixes", required: true)]
        private InputList<string>? _localPrefixes;

        /// <summary>
        /// The local prefix.
        /// </summary>
        public InputList<string> LocalPrefixes
        {
            get => _localPrefixes ?? (_localPrefixes = new InputList<string>());
            set => _localPrefixes = value;
        }

        /// <summary>
        /// The peer IP address.
        /// </summary>
        [Input("peer", required: true)]
        public Input<string> Peer { get; set; } = null!;

        /// <summary>
        /// Peer ID.
        /// </summary>
        [Input("peerId")]
        public Input<string>? PeerId { get; set; }

        [Input("peerInsideNetworks")]
        private InputList<string>? _peerInsideNetworks;

        /// <summary>
        /// Peer inside networks.
        /// </summary>
        public InputList<string> PeerInsideNetworks
        {
            get => _peerInsideNetworks ?? (_peerInsideNetworks = new InputList<string>());
            set => _peerInsideNetworks = value;
        }

        /// <summary>
        /// Peer outsite ipaddress.
        /// </summary>
        [Input("peerOutsideIpaddress")]
        public Input<string>? PeerOutsideIpaddress { get; set; }

        /// <summary>
        /// The pre shared secret for IPSec.
        /// </summary>
        [Input("preSharedSecret", required: true)]
        public Input<string> PreSharedSecret { get; set; } = null!;

        /// <summary>
        /// The IPSec ID of target.
        /// </summary>
        [Input("remoteId", required: true)]
        public Input<string> RemoteId { get; set; } = null!;

        [Input("routes", required: true)]
        private InputList<string>? _routes;

        /// <summary>
        /// The routing prefix.
        /// </summary>
        public InputList<string> Routes
        {
            get => _routes ?? (_routes = new InputList<string>());
            set => _routes = value;
        }

        [Input("vpcRouterInsideNetworks")]
        private InputList<string>? _vpcRouterInsideNetworks;

        /// <summary>
        /// VPC Router inside networks.
        /// </summary>
        public InputList<string> VpcRouterInsideNetworks
        {
            get => _vpcRouterInsideNetworks ?? (_vpcRouterInsideNetworks = new InputList<string>());
            set => _vpcRouterInsideNetworks = value;
        }

        /// <summary>
        /// VPC Router outside IP address.
        /// </summary>
        [Input("vpcRouterOutsideIpaddress")]
        public Input<string>? VpcRouterOutsideIpaddress { get; set; }

        public VPCRouterSiteToSiteVpnsGetArgs()
        {
        }
    }

    public sealed class VPCRouterStaticNatsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Required) The global IP address of the Static NAT.
        /// </summary>
        [Input("globalAddress", required: true)]
        public Input<string> GlobalAddress { get; set; } = null!;

        /// <summary>
        /// (Required) The private IP address of the Static NAT.
        /// </summary>
        [Input("privateAddress", required: true)]
        public Input<string> PrivateAddress { get; set; } = null!;

        public VPCRouterStaticNatsArgs()
        {
        }
    }

    public sealed class VPCRouterStaticNatsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Required) The global IP address of the Static NAT.
        /// </summary>
        [Input("globalAddress", required: true)]
        public Input<string> GlobalAddress { get; set; } = null!;

        /// <summary>
        /// (Required) The private IP address of the Static NAT.
        /// </summary>
        [Input("privateAddress", required: true)]
        public Input<string> PrivateAddress { get; set; } = null!;

        public VPCRouterStaticNatsGetArgs()
        {
        }
    }

    public sealed class VPCRouterStaticRoutesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) The next hop IP address of the Static Route.
        /// </summary>
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        /// <summary>
        /// (Required) The prefix of the Static Route.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public VPCRouterStaticRoutesArgs()
        {
        }
    }

    public sealed class VPCRouterStaticRoutesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) The next hop IP address of the Static Route.
        /// </summary>
        [Input("nextHop", required: true)]
        public Input<string> NextHop { get; set; } = null!;

        /// <summary>
        /// (Required) The prefix of the Static Route.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public VPCRouterStaticRoutesGetArgs()
        {
        }
    }

    public sealed class VPCRouterUsersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (Required) The password.
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public VPCRouterUsersArgs()
        {
        }
    }

    public sealed class VPCRouterUsersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (Required) The password.
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public VPCRouterUsersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VPCRouterDhcpServers
    {
        /// <summary>
        /// (Required) DNS server list to be assigned by DHCP.  
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        public readonly string RangeStart;
        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        public readonly string RangeStop;
        /// <summary>
        /// (Required) The NIC index of VPC Router running DHCP Server.
        /// </summary>
        public readonly int VpcRouterInterfaceIndex;

        [OutputConstructor]
        private VPCRouterDhcpServers(
            ImmutableArray<string> dnsServers,
            string rangeStart,
            string rangeStop,
            int vpcRouterInterfaceIndex)
        {
            DnsServers = dnsServers;
            RangeStart = rangeStart;
            RangeStop = rangeStop;
            VpcRouterInterfaceIndex = vpcRouterInterfaceIndex;
        }
    }

    [OutputType]
    public sealed class VPCRouterDhcpStaticMappings
    {
        /// <summary>
        /// (Required) The MAC address to be the key of the mapping. 
        /// </summary>
        public readonly string Ipaddress;
        /// <summary>
        /// (Required) The IP address mapped by MAC address.
        /// </summary>
        public readonly string Macaddress;

        [OutputConstructor]
        private VPCRouterDhcpStaticMappings(
            string ipaddress,
            string macaddress)
        {
            Ipaddress = ipaddress;
            Macaddress = macaddress;
        }
    }

    [OutputType]
    public sealed class VPCRouterFirewalls
    {
        /// <summary>
        /// (Required) Direction of filtering packets.  
        /// Valid value is one of the following: [ "send" / "receive" ]
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// (Required) Filtering rules. It contains some attributes to Expressions.
        /// </summary>
        public readonly ImmutableArray<VPCRouterFirewallsExpressions> Expressions;
        /// <summary>
        /// (Required) The NIC index of VPC Router running DHCP Server.
        /// </summary>
        public readonly int? VpcRouterInterfaceIndex;

        [OutputConstructor]
        private VPCRouterFirewalls(
            string direction,
            ImmutableArray<VPCRouterFirewallsExpressions> expressions,
            int? vpcRouterInterfaceIndex)
        {
            Direction = direction;
            Expressions = expressions;
            VpcRouterInterfaceIndex = vpcRouterInterfaceIndex;
        }
    }

    [OutputType]
    public sealed class VPCRouterFirewallsExpressions
    {
        /// <summary>
        /// (Required) The flag for allow/deny packets.
        /// </summary>
        public readonly bool Allow;
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// (Required) Target destination network IP address or CIDR or range.  
        /// Valid format is one of the following:
        /// * IP address: `"xxx.xxx.xxx.xxx"`
        /// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
        /// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        /// </summary>
        public readonly string DestNw;
        /// <summary>
        /// (Required) Target destination port.
        /// Valid format is one of the following:
        /// * Number: `"0"` - `"65535"`
        /// * Range: `"xx-yy"`
        /// * Range (hex): `"0xPPPP/0xMMMM"`
        /// </summary>
        public readonly string DestPort;
        /// <summary>
        /// (Required) The flag for enable/disable logging.
        /// </summary>
        public readonly bool? Logging;
        /// <summary>
        /// (Required) Protocol used in health check.  
        /// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "ip" ]
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// (Required) Target source network IP address or CIDR or range.  
        /// Valid format is one of the following:
        /// * IP address: `"xxx.xxx.xxx.xxx"`
        /// * CIDR: `"xxx.xxx.xxx.xxx/nn"`
        /// * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        /// </summary>
        public readonly string SourceNw;
        /// <summary>
        /// (Required) Target source port.
        /// Valid format is one of the following:
        /// * Number: `"0"` - `"65535"`
        /// * Range: `"xx-yy"`
        /// * Range (hex): `"0xPPPP/0xMMMM"`
        /// </summary>
        public readonly string SourcePort;

        [OutputConstructor]
        private VPCRouterFirewallsExpressions(
            bool allow,
            string? description,
            string destNw,
            string destPort,
            bool? logging,
            string protocol,
            string sourceNw,
            string sourcePort)
        {
            Allow = allow;
            Description = description;
            DestNw = destNw;
            DestPort = destPort;
            Logging = logging;
            Protocol = protocol;
            SourceNw = sourceNw;
            SourcePort = sourcePort;
        }
    }

    [OutputType]
    public sealed class VPCRouterInterfaces
    {
        /// <summary>
        /// (Required) The MAC address to be the key of the mapping. 
        /// </summary>
        public readonly ImmutableArray<string> Ipaddresses;
        /// <summary>
        /// (Optional) Network mask length of the VPC Router Interface.
        /// </summary>
        public readonly int NwMaskLen;
        /// <summary>
        /// The ID of the switch connected to the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        public readonly string SwitchId;
        /// <summary>
        /// The Virtual IP address of the VPC Router. Used when plan is `premium` or `highspec`.
        /// </summary>
        public readonly string? Vip;

        [OutputConstructor]
        private VPCRouterInterfaces(
            ImmutableArray<string> ipaddresses,
            int nwMaskLen,
            string switchId,
            string? vip)
        {
            Ipaddresses = ipaddresses;
            NwMaskLen = nwMaskLen;
            SwitchId = switchId;
            Vip = vip;
        }
    }

    [OutputType]
    public sealed class VPCRouterL2tp
    {
        /// <summary>
        /// The pre shared secret for IPSec.
        /// </summary>
        public readonly string PreSharedSecret;
        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        public readonly string RangeStart;
        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        public readonly string RangeStop;

        [OutputConstructor]
        private VPCRouterL2tp(
            string preSharedSecret,
            string rangeStart,
            string rangeStop)
        {
            PreSharedSecret = preSharedSecret;
            RangeStart = rangeStart;
            RangeStop = rangeStop;
        }
    }

    [OutputType]
    public sealed class VPCRouterPortForwardings
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// (Required) The global port of the Port Forwarding.
        /// </summary>
        public readonly int GlobalPort;
        /// <summary>
        /// (Required) The private IP address of the Static NAT.
        /// </summary>
        public readonly string PrivateAddress;
        /// <summary>
        /// (Required) The destination port number of the Port Forwarding.
        /// </summary>
        public readonly int PrivatePort;
        /// <summary>
        /// (Required) Protocol used in health check.  
        /// Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "ip" ]
        /// </summary>
        public readonly string Protocol;

        [OutputConstructor]
        private VPCRouterPortForwardings(
            string? description,
            int globalPort,
            string privateAddress,
            int privatePort,
            string protocol)
        {
            Description = description;
            GlobalPort = globalPort;
            PrivateAddress = privateAddress;
            PrivatePort = privatePort;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class VPCRouterPptp
    {
        /// <summary>
        /// (Required) Start IP address of address range to be assigned by PPTP.
        /// </summary>
        public readonly string RangeStart;
        /// <summary>
        /// (Required) End IP address of address range to be assigned by PPTP.
        /// </summary>
        public readonly string RangeStop;

        [OutputConstructor]
        private VPCRouterPptp(
            string rangeStart,
            string rangeStop)
        {
            RangeStart = rangeStart;
            RangeStop = rangeStop;
        }
    }

    [OutputType]
    public sealed class VPCRouterSiteToSiteVpns
    {
        /// <summary>
        /// ESP authentication protocol.
        /// </summary>
        public readonly string EspAuthenticationProtocol;
        /// <summary>
        /// ESP DH group.
        /// </summary>
        public readonly string EspDhGroup;
        /// <summary>
        /// ESP encryption protocol.
        /// </summary>
        public readonly string EspEncryptionProtocol;
        /// <summary>
        /// ESP lifetime.
        /// </summary>
        public readonly string EspLifetime;
        /// <summary>
        /// ESP mode.
        /// </summary>
        public readonly string EspMode;
        /// <summary>
        /// ESP perfect forward secrecy.
        /// </summary>
        public readonly string EspPerfectForwardSecrecy;
        /// <summary>
        /// IKE authentication protocol.
        /// </summary>
        public readonly string IkeAuthenticationProtocol;
        /// <summary>
        /// IKE encryption protocol.
        /// </summary>
        public readonly string IkeEncryptionProtocol;
        /// <summary>
        /// IKE lifetime.
        /// </summary>
        public readonly string IkeLifetime;
        /// <summary>
        /// IKE mode.
        /// </summary>
        public readonly string IkeMode;
        /// <summary>
        /// IKE perfect forward secrecy.
        /// </summary>
        public readonly string IkePerfectForwardSecrecy;
        /// <summary>
        /// IKE pre shared secret.
        /// </summary>
        public readonly string IkePreSharedSecret;
        /// <summary>
        /// The local prefix.
        /// </summary>
        public readonly ImmutableArray<string> LocalPrefixes;
        /// <summary>
        /// The peer IP address.
        /// </summary>
        public readonly string Peer;
        /// <summary>
        /// Peer ID.
        /// </summary>
        public readonly string PeerId;
        /// <summary>
        /// Peer inside networks.
        /// </summary>
        public readonly ImmutableArray<string> PeerInsideNetworks;
        /// <summary>
        /// Peer outsite ipaddress.
        /// </summary>
        public readonly string PeerOutsideIpaddress;
        /// <summary>
        /// The pre shared secret for IPSec.
        /// </summary>
        public readonly string PreSharedSecret;
        /// <summary>
        /// The IPSec ID of target.
        /// </summary>
        public readonly string RemoteId;
        /// <summary>
        /// The routing prefix.
        /// </summary>
        public readonly ImmutableArray<string> Routes;
        /// <summary>
        /// VPC Router inside networks.
        /// </summary>
        public readonly ImmutableArray<string> VpcRouterInsideNetworks;
        /// <summary>
        /// VPC Router outside IP address.
        /// </summary>
        public readonly string VpcRouterOutsideIpaddress;

        [OutputConstructor]
        private VPCRouterSiteToSiteVpns(
            string espAuthenticationProtocol,
            string espDhGroup,
            string espEncryptionProtocol,
            string espLifetime,
            string espMode,
            string espPerfectForwardSecrecy,
            string ikeAuthenticationProtocol,
            string ikeEncryptionProtocol,
            string ikeLifetime,
            string ikeMode,
            string ikePerfectForwardSecrecy,
            string ikePreSharedSecret,
            ImmutableArray<string> localPrefixes,
            string peer,
            string peerId,
            ImmutableArray<string> peerInsideNetworks,
            string peerOutsideIpaddress,
            string preSharedSecret,
            string remoteId,
            ImmutableArray<string> routes,
            ImmutableArray<string> vpcRouterInsideNetworks,
            string vpcRouterOutsideIpaddress)
        {
            EspAuthenticationProtocol = espAuthenticationProtocol;
            EspDhGroup = espDhGroup;
            EspEncryptionProtocol = espEncryptionProtocol;
            EspLifetime = espLifetime;
            EspMode = espMode;
            EspPerfectForwardSecrecy = espPerfectForwardSecrecy;
            IkeAuthenticationProtocol = ikeAuthenticationProtocol;
            IkeEncryptionProtocol = ikeEncryptionProtocol;
            IkeLifetime = ikeLifetime;
            IkeMode = ikeMode;
            IkePerfectForwardSecrecy = ikePerfectForwardSecrecy;
            IkePreSharedSecret = ikePreSharedSecret;
            LocalPrefixes = localPrefixes;
            Peer = peer;
            PeerId = peerId;
            PeerInsideNetworks = peerInsideNetworks;
            PeerOutsideIpaddress = peerOutsideIpaddress;
            PreSharedSecret = preSharedSecret;
            RemoteId = remoteId;
            Routes = routes;
            VpcRouterInsideNetworks = vpcRouterInsideNetworks;
            VpcRouterOutsideIpaddress = vpcRouterOutsideIpaddress;
        }
    }

    [OutputType]
    public sealed class VPCRouterStaticNats
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// (Required) The global IP address of the Static NAT.
        /// </summary>
        public readonly string GlobalAddress;
        /// <summary>
        /// (Required) The private IP address of the Static NAT.
        /// </summary>
        public readonly string PrivateAddress;

        [OutputConstructor]
        private VPCRouterStaticNats(
            string? description,
            string globalAddress,
            string privateAddress)
        {
            Description = description;
            GlobalAddress = globalAddress;
            PrivateAddress = privateAddress;
        }
    }

    [OutputType]
    public sealed class VPCRouterStaticRoutes
    {
        /// <summary>
        /// (Required) The next hop IP address of the Static Route.
        /// </summary>
        public readonly string NextHop;
        /// <summary>
        /// (Required) The prefix of the Static Route.
        /// </summary>
        public readonly string Prefix;

        [OutputConstructor]
        private VPCRouterStaticRoutes(
            string nextHop,
            string prefix)
        {
            NextHop = nextHop;
            Prefix = prefix;
        }
    }

    [OutputType]
    public sealed class VPCRouterUsers
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Required) The password.
        /// </summary>
        public readonly string Password;

        [OutputConstructor]
        private VPCRouterUsers(
            string name,
            string password)
        {
            Name = name;
            Password = password;
        }
    }
    }
}
