// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud Database(ReadReplica) resource. This can be used to create, update, and delete Databases.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/database_read_replica.html.markdown.
    /// </summary>
    public partial class DatabaseReadReplica : Pulumi.CustomResource
    {
        /// <summary>
        /// The default route IP address of the database.
        /// </summary>
        [Output("defaultRoute")]
        public Output<string> DefaultRoute { get; private set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Database.
        /// </summary>
        [Output("gracefulShutdownTimeout")]
        public Output<int?> GracefulShutdownTimeout { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The IP address of the database.
        /// </summary>
        [Output("ipaddress1")]
        public Output<string> Ipaddress1 { get; private set; } = null!;

        /// <summary>
        /// The ID of the master Database Appliance.
        /// </summary>
        [Output("masterId")]
        public Output<string> MasterId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The network mask length of the database.
        /// </summary>
        [Output("nwMaskLen")]
        public Output<int> NwMaskLen { get; private set; } = null!;

        /// <summary>
        /// The ID of the switch connected to the database.
        /// </summary>
        [Output("switchId")]
        public Output<string> SwitchId { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseReadReplica resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseReadReplica(string name, DatabaseReadReplicaArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/databaseReadReplica:DatabaseReadReplica", name, args, MakeResourceOptions(options, ""))
        {
        }

        private DatabaseReadReplica(string name, Input<string> id, DatabaseReadReplicaState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/databaseReadReplica:DatabaseReadReplica", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseReadReplica resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseReadReplica Get(string name, Input<string> id, DatabaseReadReplicaState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseReadReplica(name, id, state, options);
        }
    }

    public sealed class DatabaseReadReplicaArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default route IP address of the database.
        /// </summary>
        [Input("defaultRoute")]
        public Input<string>? DefaultRoute { get; set; }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Database.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The IP address of the database.
        /// </summary>
        [Input("ipaddress1", required: true)]
        public Input<string> Ipaddress1 { get; set; } = null!;

        /// <summary>
        /// The ID of the master Database Appliance.
        /// </summary>
        [Input("masterId", required: true)]
        public Input<string> MasterId { get; set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network mask length of the database.
        /// </summary>
        [Input("nwMaskLen")]
        public Input<int>? NwMaskLen { get; set; }

        /// <summary>
        /// The ID of the switch connected to the database.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DatabaseReadReplicaArgs()
        {
        }
    }

    public sealed class DatabaseReadReplicaState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default route IP address of the database.
        /// </summary>
        [Input("defaultRoute")]
        public Input<string>? DefaultRoute { get; set; }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Database.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The IP address of the database.
        /// </summary>
        [Input("ipaddress1")]
        public Input<string>? Ipaddress1 { get; set; }

        /// <summary>
        /// The ID of the master Database Appliance.
        /// </summary>
        [Input("masterId")]
        public Input<string>? MasterId { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The network mask length of the database.
        /// </summary>
        [Input("nwMaskLen")]
        public Input<int>? NwMaskLen { get; set; }

        /// <summary>
        /// The ID of the switch connected to the database.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DatabaseReadReplicaState()
        {
        }
    }
}
