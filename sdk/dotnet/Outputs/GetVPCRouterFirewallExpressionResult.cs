// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud.Outputs
{

    [OutputType]
    public sealed class GetVPCRouterFirewallExpressionResult
    {
        /// <summary>
        /// The flag to allow the packet through the filter.
        /// </summary>
        public readonly bool Allow;
        /// <summary>
        /// The description of the static NAT.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A destination IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).
        /// </summary>
        public readonly string DestinationNetwork;
        /// <summary>
        /// A destination port number or port range used for filtering (e.g. `1024`, `1024-2048`). This is only used when `protocol` is `tcp` or `udp`.
        /// </summary>
        public readonly string DestinationPort;
        /// <summary>
        /// The flag to enable packet logging when matching the expression.
        /// </summary>
        public readonly bool Logging;
        /// <summary>
        /// The protocol used for port forwarding. This will be one of [`tcp`/`udp`].
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// A source IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).
        /// </summary>
        public readonly string SourceNetwork;
        /// <summary>
        /// A source port number or port range used for filtering (e.g. `1024`, `1024-2048`). This is only used when `protocol` is `tcp` or `udp`.
        /// </summary>
        public readonly string SourcePort;

        [OutputConstructor]
        private GetVPCRouterFirewallExpressionResult(
            bool allow,

            string description,

            string destinationNetwork,

            string destinationPort,

            bool logging,

            string protocol,

            string sourceNetwork,

            string sourcePort)
        {
            Allow = allow;
            Description = description;
            DestinationNetwork = destinationNetwork;
            DestinationPort = destinationPort;
            Logging = logging;
            Protocol = protocol;
            SourceNetwork = sourceNetwork;
            SourcePort = sourcePort;
        }
    }
}
