// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud Server resource. This can be used to create, update, and delete Servers.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/server.html.markdown.
    /// </summary>
    public partial class Server : Pulumi.CustomResource
    {
        /// <summary>
        /// The display IP address list of the NICs (excluding primary NIC) of Server.  
        /// </summary>
        [Output("additionalDisplayIpaddresses")]
        public Output<ImmutableArray<string>> AdditionalDisplayIpaddresses { get; private set; } = null!;

        /// <summary>
        /// The ID list of the Switches connected to NICs (excluding primary NIC) of Server.  
        /// Valid values are one of the following: [ &lt;Switch ID&gt; / "" (disconnected) ]
        /// </summary>
        [Output("additionalNics")]
        public Output<ImmutableArray<string>> AdditionalNics { get; private set; } = null!;

        /// <summary>
        /// The ID of the CD-ROM inserted to Server.
        /// </summary>
        [Output("cdromId")]
        public Output<string> CdromId { get; private set; } = null!;

        /// <summary>
        /// The plan of assignment of CPU to VM(default:`standard`).  
        /// Valid value is one of the following: [ "standard" (default) / "dedicatedcpu"]
        /// </summary>
        [Output("commitment")]
        public Output<string?> Commitment { get; private set; } = null!;

        /// <summary>
        /// The number of cores (default:`1`).
        /// </summary>
        [Output("core")]
        public Output<int?> Core { get; private set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The flag of disable password auth via SSH.
        /// </summary>
        [Output("disablePwAuth")]
        public Output<bool?> DisablePwAuth { get; private set; } = null!;

        /// <summary>
        /// The ID list of the Disks connected to Server.
        /// </summary>
        [Output("disks")]
        public Output<ImmutableArray<string>> Disks { get; private set; } = null!;

        /// <summary>
        /// The IP address of NIC for display. Valid only when connected to switch.  
        /// </summary>
        [Output("displayIpaddress")]
        public Output<string> DisplayIpaddress { get; private set; } = null!;

        /// <summary>
        /// List of default DNS servers for the zone to which the Server belongs.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// Default gateway address of the Server to set with `"Modify Disk"` API.	 
        /// </summary>
        [Output("gateway")]
        public Output<string> Gateway { get; private set; } = null!;

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Server.
        /// </summary>
        [Output("gracefulShutdownTimeout")]
        public Output<int?> GracefulShutdownTimeout { get; private set; } = null!;

        /// <summary>
        /// The hostname to set with `"Modify Disk"` API.
        /// </summary>
        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of network interface driver.  
        /// Valid value is one of the following: [ "virtio" (default) / "e1000"]
        /// </summary>
        [Output("interfaceDriver")]
        public Output<string?> InterfaceDriver { get; private set; } = null!;

        /// <summary>
        /// The IP address of primary NIC to set with `"Modify Disk"` API.
        /// </summary>
        [Output("ipaddress")]
        public Output<string> Ipaddress { get; private set; } = null!;

        /// <summary>
        /// The MAC address list of NICs connected to Server.
        /// </summary>
        [Output("macaddresses")]
        public Output<ImmutableArray<string>> Macaddresses { get; private set; } = null!;

        /// <summary>
        /// The size of memory (unit:`GB`, default:`1`).
        /// </summary>
        [Output("memory")]
        public Output<int?> Memory { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The primary NIC's connection destination.  
        /// Valid value is one of the following: [ "shared" (default) / &lt;Switch ID&gt; / "" (disconnected) ]
        /// </summary>
        [Output("nic")]
        public Output<string?> Nic { get; private set; } = null!;

        /// <summary>
        /// The ID list of Notes (Startup-Scripts) to set with `"Modify Disk"` API.
        /// </summary>
        [Output("noteIds")]
        public Output<ImmutableArray<string>> NoteIds { get; private set; } = null!;

        /// <summary>
        /// The network address of the Server.
        /// </summary>
        [Output("nwAddress")]
        public Output<string> NwAddress { get; private set; } = null!;

        /// <summary>
        /// Network mask length of the Server to set with `"Modify Disk"` API.
        /// </summary>
        [Output("nwMaskLen")]
        public Output<string> NwMaskLen { get; private set; } = null!;

        /// <summary>
        /// The ID list of the Packet Filters connected to Server.
        /// </summary>
        [Output("packetFilterIds")]
        public Output<ImmutableArray<string>> PacketFilterIds { get; private set; } = null!;

        /// <summary>
        /// The password of OS's administrator to set with `"Modify Disk"` API.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The ID of the Private Host to which the Server belongs.
        /// </summary>
        [Output("privateHostId")]
        public Output<string?> PrivateHostId { get; private set; } = null!;

        /// <summary>
        /// The name of the Private Host to which the Server belongs.
        /// </summary>
        [Output("privateHostName")]
        public Output<string> PrivateHostName { get; private set; } = null!;

        /// <summary>
        /// The ID list of SSH Keys to set with `"Modify Disk"` API.
        /// </summary>
        [Output("sshKeyIds")]
        public Output<ImmutableArray<string>> SshKeyIds { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The hostname of VNC server.
        /// </summary>
        [Output("vncHost")]
        public Output<string> VncHost { get; private set; } = null!;

        /// <summary>
        /// The password of VNC server.
        /// </summary>
        [Output("vncPassword")]
        public Output<string> VncPassword { get; private set; } = null!;

        /// <summary>
        /// The port number of VNC server.
        /// </summary>
        [Output("vncPort")]
        public Output<int> VncPort { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs? args = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/server:Server", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : Pulumi.ResourceArgs
    {
        [Input("additionalDisplayIpaddresses")]
        private InputList<string>? _additionalDisplayIpaddresses;

        /// <summary>
        /// The display IP address list of the NICs (excluding primary NIC) of Server.  
        /// </summary>
        public InputList<string> AdditionalDisplayIpaddresses
        {
            get => _additionalDisplayIpaddresses ?? (_additionalDisplayIpaddresses = new InputList<string>());
            set => _additionalDisplayIpaddresses = value;
        }

        [Input("additionalNics")]
        private InputList<string>? _additionalNics;

        /// <summary>
        /// The ID list of the Switches connected to NICs (excluding primary NIC) of Server.  
        /// Valid values are one of the following: [ &lt;Switch ID&gt; / "" (disconnected) ]
        /// </summary>
        public InputList<string> AdditionalNics
        {
            get => _additionalNics ?? (_additionalNics = new InputList<string>());
            set => _additionalNics = value;
        }

        /// <summary>
        /// The ID of the CD-ROM inserted to Server.
        /// </summary>
        [Input("cdromId")]
        public Input<string>? CdromId { get; set; }

        /// <summary>
        /// The plan of assignment of CPU to VM(default:`standard`).  
        /// Valid value is one of the following: [ "standard" (default) / "dedicatedcpu"]
        /// </summary>
        [Input("commitment")]
        public Input<string>? Commitment { get; set; }

        /// <summary>
        /// The number of cores (default:`1`).
        /// </summary>
        [Input("core")]
        public Input<int>? Core { get; set; }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag of disable password auth via SSH.
        /// </summary>
        [Input("disablePwAuth")]
        public Input<bool>? DisablePwAuth { get; set; }

        [Input("disks")]
        private InputList<string>? _disks;

        /// <summary>
        /// The ID list of the Disks connected to Server.
        /// </summary>
        public InputList<string> Disks
        {
            get => _disks ?? (_disks = new InputList<string>());
            set => _disks = value;
        }

        /// <summary>
        /// The IP address of NIC for display. Valid only when connected to switch.  
        /// </summary>
        [Input("displayIpaddress")]
        public Input<string>? DisplayIpaddress { get; set; }

        /// <summary>
        /// Default gateway address of the Server to set with `"Modify Disk"` API.	 
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Server.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The hostname to set with `"Modify Disk"` API.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of network interface driver.  
        /// Valid value is one of the following: [ "virtio" (default) / "e1000"]
        /// </summary>
        [Input("interfaceDriver")]
        public Input<string>? InterfaceDriver { get; set; }

        /// <summary>
        /// The IP address of primary NIC to set with `"Modify Disk"` API.
        /// </summary>
        [Input("ipaddress")]
        public Input<string>? Ipaddress { get; set; }

        /// <summary>
        /// The size of memory (unit:`GB`, default:`1`).
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The primary NIC's connection destination.  
        /// Valid value is one of the following: [ "shared" (default) / &lt;Switch ID&gt; / "" (disconnected) ]
        /// </summary>
        [Input("nic")]
        public Input<string>? Nic { get; set; }

        [Input("noteIds")]
        private InputList<string>? _noteIds;

        /// <summary>
        /// The ID list of Notes (Startup-Scripts) to set with `"Modify Disk"` API.
        /// </summary>
        public InputList<string> NoteIds
        {
            get => _noteIds ?? (_noteIds = new InputList<string>());
            set => _noteIds = value;
        }

        /// <summary>
        /// Network mask length of the Server to set with `"Modify Disk"` API.
        /// </summary>
        [Input("nwMaskLen")]
        public Input<string>? NwMaskLen { get; set; }

        [Input("packetFilterIds")]
        private InputList<string>? _packetFilterIds;

        /// <summary>
        /// The ID list of the Packet Filters connected to Server.
        /// </summary>
        public InputList<string> PacketFilterIds
        {
            get => _packetFilterIds ?? (_packetFilterIds = new InputList<string>());
            set => _packetFilterIds = value;
        }

        /// <summary>
        /// The password of OS's administrator to set with `"Modify Disk"` API.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The ID of the Private Host to which the Server belongs.
        /// </summary>
        [Input("privateHostId")]
        public Input<string>? PrivateHostId { get; set; }

        [Input("sshKeyIds")]
        private InputList<string>? _sshKeyIds;

        /// <summary>
        /// The ID list of SSH Keys to set with `"Modify Disk"` API.
        /// </summary>
        public InputList<string> SshKeyIds
        {
            get => _sshKeyIds ?? (_sshKeyIds = new InputList<string>());
            set => _sshKeyIds = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ServerArgs()
        {
        }
    }

    public sealed class ServerState : Pulumi.ResourceArgs
    {
        [Input("additionalDisplayIpaddresses")]
        private InputList<string>? _additionalDisplayIpaddresses;

        /// <summary>
        /// The display IP address list of the NICs (excluding primary NIC) of Server.  
        /// </summary>
        public InputList<string> AdditionalDisplayIpaddresses
        {
            get => _additionalDisplayIpaddresses ?? (_additionalDisplayIpaddresses = new InputList<string>());
            set => _additionalDisplayIpaddresses = value;
        }

        [Input("additionalNics")]
        private InputList<string>? _additionalNics;

        /// <summary>
        /// The ID list of the Switches connected to NICs (excluding primary NIC) of Server.  
        /// Valid values are one of the following: [ &lt;Switch ID&gt; / "" (disconnected) ]
        /// </summary>
        public InputList<string> AdditionalNics
        {
            get => _additionalNics ?? (_additionalNics = new InputList<string>());
            set => _additionalNics = value;
        }

        /// <summary>
        /// The ID of the CD-ROM inserted to Server.
        /// </summary>
        [Input("cdromId")]
        public Input<string>? CdromId { get; set; }

        /// <summary>
        /// The plan of assignment of CPU to VM(default:`standard`).  
        /// Valid value is one of the following: [ "standard" (default) / "dedicatedcpu"]
        /// </summary>
        [Input("commitment")]
        public Input<string>? Commitment { get; set; }

        /// <summary>
        /// The number of cores (default:`1`).
        /// </summary>
        [Input("core")]
        public Input<int>? Core { get; set; }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag of disable password auth via SSH.
        /// </summary>
        [Input("disablePwAuth")]
        public Input<bool>? DisablePwAuth { get; set; }

        [Input("disks")]
        private InputList<string>? _disks;

        /// <summary>
        /// The ID list of the Disks connected to Server.
        /// </summary>
        public InputList<string> Disks
        {
            get => _disks ?? (_disks = new InputList<string>());
            set => _disks = value;
        }

        /// <summary>
        /// The IP address of NIC for display. Valid only when connected to switch.  
        /// </summary>
        [Input("displayIpaddress")]
        public Input<string>? DisplayIpaddress { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// List of default DNS servers for the zone to which the Server belongs.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Default gateway address of the Server to set with `"Modify Disk"` API.	 
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// The wait time (seconds) to do graceful shutdown the Server.
        /// </summary>
        [Input("gracefulShutdownTimeout")]
        public Input<int>? GracefulShutdownTimeout { get; set; }

        /// <summary>
        /// The hostname to set with `"Modify Disk"` API.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of network interface driver.  
        /// Valid value is one of the following: [ "virtio" (default) / "e1000"]
        /// </summary>
        [Input("interfaceDriver")]
        public Input<string>? InterfaceDriver { get; set; }

        /// <summary>
        /// The IP address of primary NIC to set with `"Modify Disk"` API.
        /// </summary>
        [Input("ipaddress")]
        public Input<string>? Ipaddress { get; set; }

        [Input("macaddresses")]
        private InputList<string>? _macaddresses;

        /// <summary>
        /// The MAC address list of NICs connected to Server.
        /// </summary>
        public InputList<string> Macaddresses
        {
            get => _macaddresses ?? (_macaddresses = new InputList<string>());
            set => _macaddresses = value;
        }

        /// <summary>
        /// The size of memory (unit:`GB`, default:`1`).
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The primary NIC's connection destination.  
        /// Valid value is one of the following: [ "shared" (default) / &lt;Switch ID&gt; / "" (disconnected) ]
        /// </summary>
        [Input("nic")]
        public Input<string>? Nic { get; set; }

        [Input("noteIds")]
        private InputList<string>? _noteIds;

        /// <summary>
        /// The ID list of Notes (Startup-Scripts) to set with `"Modify Disk"` API.
        /// </summary>
        public InputList<string> NoteIds
        {
            get => _noteIds ?? (_noteIds = new InputList<string>());
            set => _noteIds = value;
        }

        /// <summary>
        /// The network address of the Server.
        /// </summary>
        [Input("nwAddress")]
        public Input<string>? NwAddress { get; set; }

        /// <summary>
        /// Network mask length of the Server to set with `"Modify Disk"` API.
        /// </summary>
        [Input("nwMaskLen")]
        public Input<string>? NwMaskLen { get; set; }

        [Input("packetFilterIds")]
        private InputList<string>? _packetFilterIds;

        /// <summary>
        /// The ID list of the Packet Filters connected to Server.
        /// </summary>
        public InputList<string> PacketFilterIds
        {
            get => _packetFilterIds ?? (_packetFilterIds = new InputList<string>());
            set => _packetFilterIds = value;
        }

        /// <summary>
        /// The password of OS's administrator to set with `"Modify Disk"` API.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The ID of the Private Host to which the Server belongs.
        /// </summary>
        [Input("privateHostId")]
        public Input<string>? PrivateHostId { get; set; }

        /// <summary>
        /// The name of the Private Host to which the Server belongs.
        /// </summary>
        [Input("privateHostName")]
        public Input<string>? PrivateHostName { get; set; }

        [Input("sshKeyIds")]
        private InputList<string>? _sshKeyIds;

        /// <summary>
        /// The ID list of SSH Keys to set with `"Modify Disk"` API.
        /// </summary>
        public InputList<string> SshKeyIds
        {
            get => _sshKeyIds ?? (_sshKeyIds = new InputList<string>());
            set => _sshKeyIds = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The hostname of VNC server.
        /// </summary>
        [Input("vncHost")]
        public Input<string>? VncHost { get; set; }

        /// <summary>
        /// The password of VNC server.
        /// </summary>
        [Input("vncPassword")]
        public Input<string>? VncPassword { get; set; }

        /// <summary>
        /// The port number of VNC server.
        /// </summary>
        [Input("vncPort")]
        public Input<int>? VncPort { get; set; }

        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ServerState()
        {
        }
    }
}
