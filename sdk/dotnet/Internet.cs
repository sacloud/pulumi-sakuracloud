// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud Switch+Router.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Sakuracloud = Pulumi.Sakuracloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobar = new Sakuracloud.Internet("foobar", new Sakuracloud.InternetArgs
    ///         {
    ///             BandWidth = 100,
    ///             Description = "description",
    ///             EnableIpv6 = false,
    ///             Netmask = 28,
    ///             Tags = 
    ///             {
    ///                 "tag1",
    ///                 "tag2",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/internet:Internet")]
    public partial class Internet : Pulumi.CustomResource
    {
        /// <summary>
        /// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`]. 
        /// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
        /// </summary>
        [Output("bandWidth")]
        public Output<int?> BandWidth { get; private set; } = null!;

        /// <summary>
        /// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The flag to enable IPv6.
        /// </summary>
        [Output("enableIpv6")]
        public Output<bool?> EnableIpv6 { get; private set; } = null!;

        /// <summary>
        /// The IP address of the gateway used by the Switch+Router.
        /// </summary>
        [Output("gateway")]
        public Output<string> Gateway { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the Switch+Router.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// A list of assigned global address to the Switch+Router.
        /// </summary>
        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        /// <summary>
        /// The IPv6 network address assigned to the Switch+Router.
        /// </summary>
        [Output("ipv6NetworkAddress")]
        public Output<string> Ipv6NetworkAddress { get; private set; } = null!;

        /// <summary>
        /// The network prefix of assigned IPv6 addresses to the Switch+Router.
        /// </summary>
        [Output("ipv6Prefix")]
        public Output<string> Ipv6Prefix { get; private set; } = null!;

        /// <summary>
        /// The bit length of IPv6 network prefix.
        /// </summary>
        [Output("ipv6PrefixLen")]
        public Output<int> Ipv6PrefixLen { get; private set; } = null!;

        /// <summary>
        /// Maximum IP address in assigned global addresses to the Switch+Router.
        /// </summary>
        [Output("maxIpAddress")]
        public Output<string> MaxIpAddress { get; private set; } = null!;

        /// <summary>
        /// Minimum IP address in assigned global addresses to the Switch+Router.
        /// </summary>
        [Output("minIpAddress")]
        public Output<string> MinIpAddress { get; private set; } = null!;

        /// <summary>
        /// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
        /// </summary>
        [Output("netmask")]
        public Output<int?> Netmask { get; private set; } = null!;

        /// <summary>
        /// The IPv4 network address assigned to the Switch+Router.
        /// </summary>
        [Output("networkAddress")]
        public Output<string> NetworkAddress { get; private set; } = null!;

        /// <summary>
        /// A list of the ID of Servers connected to the Switch+Router.
        /// </summary>
        [Output("serverIds")]
        public Output<ImmutableArray<string>> ServerIds { get; private set; } = null!;

        /// <summary>
        /// The id of the switch.
        /// </summary>
        [Output("switchId")]
        public Output<string> SwitchId { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the Switch+Router.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Internet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Internet(string name, InternetArgs? args = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/internet:Internet", name, args ?? new InternetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Internet(string name, Input<string> id, InternetState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/internet:Internet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Internet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Internet Get(string name, Input<string> id, InternetState? state = null, CustomResourceOptions? options = null)
        {
            return new Internet(name, id, state, options);
        }
    }

    public sealed class InternetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`]. 
        /// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
        /// </summary>
        [Input("bandWidth")]
        public Input<int>? BandWidth { get; set; }

        /// <summary>
        /// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag to enable IPv6.
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        /// <summary>
        /// The icon id to attach to the Switch+Router.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
        /// </summary>
        [Input("netmask")]
        public Input<int>? Netmask { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Switch+Router.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InternetArgs()
        {
        }
    }

    public sealed class InternetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`]. 
        /// If zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.
        /// </summary>
        [Input("bandWidth")]
        public Input<int>? BandWidth { get; set; }

        /// <summary>
        /// The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag to enable IPv6.
        /// </summary>
        [Input("enableIpv6")]
        public Input<bool>? EnableIpv6 { get; set; }

        /// <summary>
        /// The IP address of the gateway used by the Switch+Router.
        /// </summary>
        [Input("gateway")]
        public Input<string>? Gateway { get; set; }

        /// <summary>
        /// The icon id to attach to the Switch+Router.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;

        /// <summary>
        /// A list of assigned global address to the Switch+Router.
        /// </summary>
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        /// <summary>
        /// The IPv6 network address assigned to the Switch+Router.
        /// </summary>
        [Input("ipv6NetworkAddress")]
        public Input<string>? Ipv6NetworkAddress { get; set; }

        /// <summary>
        /// The network prefix of assigned IPv6 addresses to the Switch+Router.
        /// </summary>
        [Input("ipv6Prefix")]
        public Input<string>? Ipv6Prefix { get; set; }

        /// <summary>
        /// The bit length of IPv6 network prefix.
        /// </summary>
        [Input("ipv6PrefixLen")]
        public Input<int>? Ipv6PrefixLen { get; set; }

        /// <summary>
        /// Maximum IP address in assigned global addresses to the Switch+Router.
        /// </summary>
        [Input("maxIpAddress")]
        public Input<string>? MaxIpAddress { get; set; }

        /// <summary>
        /// Minimum IP address in assigned global addresses to the Switch+Router.
        /// </summary>
        [Input("minIpAddress")]
        public Input<string>? MinIpAddress { get; set; }

        /// <summary>
        /// The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.
        /// </summary>
        [Input("netmask")]
        public Input<int>? Netmask { get; set; }

        /// <summary>
        /// The IPv4 network address assigned to the Switch+Router.
        /// </summary>
        [Input("networkAddress")]
        public Input<string>? NetworkAddress { get; set; }

        [Input("serverIds")]
        private InputList<string>? _serverIds;

        /// <summary>
        /// A list of the ID of Servers connected to the Switch+Router.
        /// </summary>
        public InputList<string> ServerIds
        {
            get => _serverIds ?? (_serverIds = new InputList<string>());
            set => _serverIds = value;
        }

        /// <summary>
        /// The id of the switch.
        /// </summary>
        [Input("switchId")]
        public Input<string>? SwitchId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Switch+Router.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InternetState()
        {
        }
    }
}
