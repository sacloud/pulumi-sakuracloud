// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a SakuraCloud VPC Router.
        /// 
        /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/vpc_router.html.markdown.
        /// </summary>
        public static Task<GetVPCRouterResult> GetVPCRouter(GetVPCRouterArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVPCRouterResult>("sakuracloud:index/getVPCRouter:getVPCRouter", args, options.WithVersion());
    }

    public sealed class GetVPCRouterArgs : Pulumi.ResourceArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVPCRouterFiltersArgs>? _filters;

        /// <summary>
        /// The map of filter key and value.
        /// </summary>
        public InputList<Inputs.GetVPCRouterFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVPCRouterFiltersArgs>());
            set => _filters = value;
        }

        [Input("nameSelectors")]
        private InputList<string>? _nameSelectors;

        /// <summary>
        /// The list of names to filtering.
        /// </summary>
        public InputList<string> NameSelectors
        {
            get => _nameSelectors ?? (_nameSelectors = new InputList<string>());
            set => _nameSelectors = value;
        }

        [Input("tagSelectors")]
        private InputList<string>? _tagSelectors;

        /// <summary>
        /// The list of tags to filtering.
        /// </summary>
        public InputList<string> TagSelectors
        {
            get => _tagSelectors ?? (_tagSelectors = new InputList<string>());
            set => _tagSelectors = value;
        }

        /// <summary>
        /// The ID of the zone.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetVPCRouterArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetVPCRouterResult
    {
        /// <summary>
        /// The IP address aliase list. Used when plan is in `premium` or `highspec`.
        /// </summary>
        public readonly ImmutableArray<string> Aliases;
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetVPCRouterDhcpServersResult> DhcpServers;
        public readonly ImmutableArray<Outputs.GetVPCRouterDhcpStaticMappingsResult> DhcpStaticMappings;
        public readonly ImmutableArray<Outputs.GetVPCRouterFiltersResult> Filters;
        public readonly ImmutableArray<Outputs.GetVPCRouterFirewallsResult> Firewalls;
        /// <summary>
        /// Global IP address of the VPC Router.
        /// </summary>
        public readonly string GlobalAddress;
        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        public readonly string IconId;
        public readonly ImmutableArray<Outputs.GetVPCRouterInterfacesResult> Interfaces;
        /// <summary>
        /// The flag of enable/disable connection from the VPC Router to the Internet.
        /// </summary>
        public readonly bool InternetConnection;
        /// <summary>
        /// The primary IP address of the VPC Router.
        /// </summary>
        public readonly string Ipaddress1;
        /// <summary>
        /// The secondly IP address of the VPC Router. Used when plan is in `premium` or `highspec`.
        /// </summary>
        public readonly string Ipaddress2;
        public readonly ImmutableArray<Outputs.GetVPCRouterL2tpsResult> L2tps;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> NameSelectors;
        /// <summary>
        /// The name of the resource plan. 
        /// </summary>
        public readonly string Plan;
        public readonly ImmutableArray<Outputs.GetVPCRouterPortForwardingsResult> PortForwardings;
        public readonly ImmutableArray<Outputs.GetVPCRouterPptpsResult> Pptps;
        public readonly ImmutableArray<Outputs.GetVPCRouterSiteToSiteVpnsResult> SiteToSiteVpns;
        public readonly ImmutableArray<Outputs.GetVPCRouterStaticNatsResult> StaticNats;
        public readonly ImmutableArray<Outputs.GetVPCRouterStaticRoutesResult> StaticRoutes;
        /// <summary>
        /// The ID of the Switch connected to the VPC Router (eth0).
        /// </summary>
        public readonly string SwitchId;
        /// <summary>
        /// The destination HostName/IP address to send log.	
        /// </summary>
        public readonly string SyslogHost;
        public readonly ImmutableArray<string> TagSelectors;
        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly ImmutableArray<Outputs.GetVPCRouterUsersResult> Users;
        /// <summary>
        /// Virtual IP address of the VPC Router. Used when plan is in `premium` or `highspec`.
        /// </summary>
        public readonly string Vip;
        /// <summary>
        /// VRID used when plan is in `premium` or `highspec`.
        /// </summary>
        public readonly int Vrid;
        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        public readonly string Zone;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetVPCRouterResult(
            ImmutableArray<string> aliases,
            string description,
            ImmutableArray<Outputs.GetVPCRouterDhcpServersResult> dhcpServers,
            ImmutableArray<Outputs.GetVPCRouterDhcpStaticMappingsResult> dhcpStaticMappings,
            ImmutableArray<Outputs.GetVPCRouterFiltersResult> filters,
            ImmutableArray<Outputs.GetVPCRouterFirewallsResult> firewalls,
            string globalAddress,
            string iconId,
            ImmutableArray<Outputs.GetVPCRouterInterfacesResult> interfaces,
            bool internetConnection,
            string ipaddress1,
            string ipaddress2,
            ImmutableArray<Outputs.GetVPCRouterL2tpsResult> l2tps,
            string name,
            ImmutableArray<string> nameSelectors,
            string plan,
            ImmutableArray<Outputs.GetVPCRouterPortForwardingsResult> portForwardings,
            ImmutableArray<Outputs.GetVPCRouterPptpsResult> pptps,
            ImmutableArray<Outputs.GetVPCRouterSiteToSiteVpnsResult> siteToSiteVpns,
            ImmutableArray<Outputs.GetVPCRouterStaticNatsResult> staticNats,
            ImmutableArray<Outputs.GetVPCRouterStaticRoutesResult> staticRoutes,
            string switchId,
            string syslogHost,
            ImmutableArray<string> tagSelectors,
            ImmutableArray<string> tags,
            ImmutableArray<Outputs.GetVPCRouterUsersResult> users,
            string vip,
            int vrid,
            string zone,
            string id)
        {
            Aliases = aliases;
            Description = description;
            DhcpServers = dhcpServers;
            DhcpStaticMappings = dhcpStaticMappings;
            Filters = filters;
            Firewalls = firewalls;
            GlobalAddress = globalAddress;
            IconId = iconId;
            Interfaces = interfaces;
            InternetConnection = internetConnection;
            Ipaddress1 = ipaddress1;
            Ipaddress2 = ipaddress2;
            L2tps = l2tps;
            Name = name;
            NameSelectors = nameSelectors;
            Plan = plan;
            PortForwardings = portForwardings;
            Pptps = pptps;
            SiteToSiteVpns = siteToSiteVpns;
            StaticNats = staticNats;
            StaticRoutes = staticRoutes;
            SwitchId = switchId;
            SyslogHost = syslogHost;
            TagSelectors = tagSelectors;
            Tags = tags;
            Users = users;
            Vip = vip;
            Vrid = vrid;
            Zone = zone;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetVPCRouterFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GetVPCRouterFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetVPCRouterDhcpServersResult
    {
        public readonly ImmutableArray<string> DnsServers;
        public readonly string RangeStart;
        public readonly string RangeStop;
        public readonly int VpcRouterInterfaceIndex;

        [OutputConstructor]
        private GetVPCRouterDhcpServersResult(
            ImmutableArray<string> dnsServers,
            string rangeStart,
            string rangeStop,
            int vpcRouterInterfaceIndex)
        {
            DnsServers = dnsServers;
            RangeStart = rangeStart;
            RangeStop = rangeStop;
            VpcRouterInterfaceIndex = vpcRouterInterfaceIndex;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterDhcpStaticMappingsResult
    {
        public readonly string Ipaddress;
        public readonly string Macaddress;

        [OutputConstructor]
        private GetVPCRouterDhcpStaticMappingsResult(
            string ipaddress,
            string macaddress)
        {
            Ipaddress = ipaddress;
            Macaddress = macaddress;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterFiltersResult
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetVPCRouterFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterFirewallsExpressionsResult
    {
        public readonly bool Allow;
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        public readonly string DestNw;
        public readonly string DestPort;
        public readonly bool Logging;
        public readonly string Protocol;
        public readonly string SourceNw;
        public readonly string SourcePort;

        [OutputConstructor]
        private GetVPCRouterFirewallsExpressionsResult(
            bool allow,
            string description,
            string destNw,
            string destPort,
            bool logging,
            string protocol,
            string sourceNw,
            string sourcePort)
        {
            Allow = allow;
            Description = description;
            DestNw = destNw;
            DestPort = destPort;
            Logging = logging;
            Protocol = protocol;
            SourceNw = sourceNw;
            SourcePort = sourcePort;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterFirewallsResult
    {
        public readonly string Direction;
        public readonly ImmutableArray<GetVPCRouterFirewallsExpressionsResult> Expressions;
        public readonly int VpcRouterInterfaceIndex;

        [OutputConstructor]
        private GetVPCRouterFirewallsResult(
            string direction,
            ImmutableArray<GetVPCRouterFirewallsExpressionsResult> expressions,
            int vpcRouterInterfaceIndex)
        {
            Direction = direction;
            Expressions = expressions;
            VpcRouterInterfaceIndex = vpcRouterInterfaceIndex;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterInterfacesResult
    {
        public readonly ImmutableArray<string> Ipaddresses;
        public readonly int NwMaskLen;
        /// <summary>
        /// The ID of the Switch connected to the VPC Router (eth0).
        /// </summary>
        public readonly string SwitchId;
        /// <summary>
        /// Virtual IP address of the VPC Router. Used when plan is in `premium` or `highspec`.
        /// </summary>
        public readonly string Vip;

        [OutputConstructor]
        private GetVPCRouterInterfacesResult(
            ImmutableArray<string> ipaddresses,
            int nwMaskLen,
            string switchId,
            string vip)
        {
            Ipaddresses = ipaddresses;
            NwMaskLen = nwMaskLen;
            SwitchId = switchId;
            Vip = vip;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterL2tpsResult
    {
        public readonly string PreSharedSecret;
        public readonly string RangeStart;
        public readonly string RangeStop;

        [OutputConstructor]
        private GetVPCRouterL2tpsResult(
            string preSharedSecret,
            string rangeStart,
            string rangeStop)
        {
            PreSharedSecret = preSharedSecret;
            RangeStart = rangeStart;
            RangeStop = rangeStop;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterPortForwardingsResult
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        public readonly int GlobalPort;
        public readonly string PrivateAddress;
        public readonly int PrivatePort;
        public readonly string Protocol;

        [OutputConstructor]
        private GetVPCRouterPortForwardingsResult(
            string description,
            int globalPort,
            string privateAddress,
            int privatePort,
            string protocol)
        {
            Description = description;
            GlobalPort = globalPort;
            PrivateAddress = privateAddress;
            PrivatePort = privatePort;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterPptpsResult
    {
        public readonly string RangeStart;
        public readonly string RangeStop;

        [OutputConstructor]
        private GetVPCRouterPptpsResult(
            string rangeStart,
            string rangeStop)
        {
            RangeStart = rangeStart;
            RangeStop = rangeStop;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterSiteToSiteVpnsResult
    {
        public readonly string EspAuthenticationProtocol;
        public readonly string EspDhGroup;
        public readonly string EspEncryptionProtocol;
        public readonly string EspLifetime;
        public readonly string EspMode;
        public readonly string EspPerfectForwardSecrecy;
        public readonly string IkeAuthenticationProtocol;
        public readonly string IkeEncryptionProtocol;
        public readonly string IkeLifetime;
        public readonly string IkeMode;
        public readonly string IkePerfectForwardSecrecy;
        public readonly string IkePreSharedSecret;
        public readonly ImmutableArray<string> LocalPrefixes;
        public readonly string Peer;
        public readonly string PeerId;
        public readonly ImmutableArray<string> PeerInsideNetworks;
        public readonly string PeerOutsideIpaddress;
        public readonly string PreSharedSecret;
        public readonly string RemoteId;
        public readonly ImmutableArray<string> Routes;
        public readonly ImmutableArray<string> VpcRouterInsideNetworks;
        public readonly string VpcRouterOutsideIpaddress;

        [OutputConstructor]
        private GetVPCRouterSiteToSiteVpnsResult(
            string espAuthenticationProtocol,
            string espDhGroup,
            string espEncryptionProtocol,
            string espLifetime,
            string espMode,
            string espPerfectForwardSecrecy,
            string ikeAuthenticationProtocol,
            string ikeEncryptionProtocol,
            string ikeLifetime,
            string ikeMode,
            string ikePerfectForwardSecrecy,
            string ikePreSharedSecret,
            ImmutableArray<string> localPrefixes,
            string peer,
            string peerId,
            ImmutableArray<string> peerInsideNetworks,
            string peerOutsideIpaddress,
            string preSharedSecret,
            string remoteId,
            ImmutableArray<string> routes,
            ImmutableArray<string> vpcRouterInsideNetworks,
            string vpcRouterOutsideIpaddress)
        {
            EspAuthenticationProtocol = espAuthenticationProtocol;
            EspDhGroup = espDhGroup;
            EspEncryptionProtocol = espEncryptionProtocol;
            EspLifetime = espLifetime;
            EspMode = espMode;
            EspPerfectForwardSecrecy = espPerfectForwardSecrecy;
            IkeAuthenticationProtocol = ikeAuthenticationProtocol;
            IkeEncryptionProtocol = ikeEncryptionProtocol;
            IkeLifetime = ikeLifetime;
            IkeMode = ikeMode;
            IkePerfectForwardSecrecy = ikePerfectForwardSecrecy;
            IkePreSharedSecret = ikePreSharedSecret;
            LocalPrefixes = localPrefixes;
            Peer = peer;
            PeerId = peerId;
            PeerInsideNetworks = peerInsideNetworks;
            PeerOutsideIpaddress = peerOutsideIpaddress;
            PreSharedSecret = preSharedSecret;
            RemoteId = remoteId;
            Routes = routes;
            VpcRouterInsideNetworks = vpcRouterInsideNetworks;
            VpcRouterOutsideIpaddress = vpcRouterOutsideIpaddress;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterStaticNatsResult
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Global IP address of the VPC Router.
        /// </summary>
        public readonly string GlobalAddress;
        public readonly string PrivateAddress;

        [OutputConstructor]
        private GetVPCRouterStaticNatsResult(
            string description,
            string globalAddress,
            string privateAddress)
        {
            Description = description;
            GlobalAddress = globalAddress;
            PrivateAddress = privateAddress;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterStaticRoutesResult
    {
        public readonly string NextHop;
        public readonly string Prefix;

        [OutputConstructor]
        private GetVPCRouterStaticRoutesResult(
            string nextHop,
            string prefix)
        {
            NextHop = nextHop;
            Prefix = prefix;
        }
    }

    [OutputType]
    public sealed class GetVPCRouterUsersResult
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly string Password;

        [OutputConstructor]
        private GetVPCRouterUsersResult(
            string name,
            string password)
        {
            Name = name;
            Password = password;
        }
    }
    }
}
