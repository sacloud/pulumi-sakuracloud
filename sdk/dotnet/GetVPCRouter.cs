// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetVPCRouter
    {
        /// <summary>
        /// Get information about an existing VPC Router.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetVPCRouter.InvokeAsync(new Sakuracloud.GetVPCRouterArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetVPCRouterFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVPCRouterResult> InvokeAsync(GetVPCRouterArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVPCRouterResult>("sakuracloud:index/getVPCRouter:getVPCRouter", args ?? new GetVPCRouterArgs(), options.WithVersion());
    }


    public sealed class GetVPCRouterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetVPCRouterFilterArgs? Filter { get; set; }

        /// <summary>
        /// The name of zone that the VPC Router is in (e.g. `is1a`, `tk1a`).
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetVPCRouterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVPCRouterResult
    {
        /// <summary>
        /// The description of the static NAT.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A list of `dhcp_server` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterDhcpServerResult> DhcpServers;
        /// <summary>
        /// A list of `dhcp_static_mapping` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterDhcpStaticMappingResult> DhcpStaticMappings;
        public readonly Outputs.GetVPCRouterFilterResult? Filter;
        /// <summary>
        /// A list of `firewall` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterFirewallResult> Firewalls;
        /// <summary>
        /// The icon id attached to the VPCRouter.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The flag to enable connecting to the Internet from the VPC Router.
        /// </summary>
        public readonly bool InternetConnection;
        /// <summary>
        /// A list of `l2tp` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterL2tpResult> L2tps;
        /// <summary>
        /// the name of the peer.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The plan name of the VPCRouter. This will be one of [`standard`/`premium`/`highspec`/`highspec4000`].
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// A list of `port_forwarding` blocks as defined below. This represents a `Reverse NAT`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterPortForwardingResult> PortForwardings;
        /// <summary>
        /// A list of `pptp` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterPptpResult> Pptps;
        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterPrivateNetworkInterfaceResult> PrivateNetworkInterfaces;
        /// <summary>
        /// The public IP address used for the static NAT.
        /// </summary>
        public readonly string PublicIp;
        /// <summary>
        /// The bit length of the subnet to assign to the public network interface.
        /// </summary>
        public readonly int PublicNetmask;
        /// <summary>
        /// A list of additional network interface setting. This doesn't include primary network interface setting.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterPublicNetworkInterfaceResult> PublicNetworkInterfaces;
        /// <summary>
        /// A list of `site_to_site_vpn` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterSiteToSiteVpnResult> SiteToSiteVpns;
        /// <summary>
        /// A list of `static_nat` blocks as defined below. This represents a `1:1 NAT`, doing static mapping to both send/receive to/from the Internet. This is only used when `plan` is not `standard`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterStaticNatResult> StaticNats;
        /// <summary>
        /// A list of `static_route` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterStaticRouteResult> StaticRoutes;
        /// <summary>
        /// The ip address of the syslog host to which the VPC Router sends logs.
        /// </summary>
        public readonly string SyslogHost;
        /// <summary>
        /// Any tags assigned to the VPCRouter.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// A list of `user` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterUserResult> Users;
        /// <summary>
        /// The version of the VPC Router.
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// A list of `wire_guard` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVPCRouterWireGuardResult> WireGuards;
        public readonly string Zone;

        [OutputConstructor]
        private GetVPCRouterResult(
            string description,

            ImmutableArray<Outputs.GetVPCRouterDhcpServerResult> dhcpServers,

            ImmutableArray<Outputs.GetVPCRouterDhcpStaticMappingResult> dhcpStaticMappings,

            Outputs.GetVPCRouterFilterResult? filter,

            ImmutableArray<Outputs.GetVPCRouterFirewallResult> firewalls,

            string iconId,

            string id,

            bool internetConnection,

            ImmutableArray<Outputs.GetVPCRouterL2tpResult> l2tps,

            string name,

            string plan,

            ImmutableArray<Outputs.GetVPCRouterPortForwardingResult> portForwardings,

            ImmutableArray<Outputs.GetVPCRouterPptpResult> pptps,

            ImmutableArray<Outputs.GetVPCRouterPrivateNetworkInterfaceResult> privateNetworkInterfaces,

            string publicIp,

            int publicNetmask,

            ImmutableArray<Outputs.GetVPCRouterPublicNetworkInterfaceResult> publicNetworkInterfaces,

            ImmutableArray<Outputs.GetVPCRouterSiteToSiteVpnResult> siteToSiteVpns,

            ImmutableArray<Outputs.GetVPCRouterStaticNatResult> staticNats,

            ImmutableArray<Outputs.GetVPCRouterStaticRouteResult> staticRoutes,

            string syslogHost,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetVPCRouterUserResult> users,

            int version,

            ImmutableArray<Outputs.GetVPCRouterWireGuardResult> wireGuards,

            string zone)
        {
            Description = description;
            DhcpServers = dhcpServers;
            DhcpStaticMappings = dhcpStaticMappings;
            Filter = filter;
            Firewalls = firewalls;
            IconId = iconId;
            Id = id;
            InternetConnection = internetConnection;
            L2tps = l2tps;
            Name = name;
            Plan = plan;
            PortForwardings = portForwardings;
            Pptps = pptps;
            PrivateNetworkInterfaces = privateNetworkInterfaces;
            PublicIp = publicIp;
            PublicNetmask = publicNetmask;
            PublicNetworkInterfaces = publicNetworkInterfaces;
            SiteToSiteVpns = siteToSiteVpns;
            StaticNats = staticNats;
            StaticRoutes = staticRoutes;
            SyslogHost = syslogHost;
            Tags = tags;
            Users = users;
            Version = version;
            WireGuards = wireGuards;
            Zone = zone;
        }
    }
}
