// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public partial class ContainerRegistry : Pulumi.CustomResource
    {
        /// <summary>
        /// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`]
        /// </summary>
        [Output("accessLevel")]
        public Output<string> AccessLevel { get; private set; } = null!;

        /// <summary>
        /// The description of the Container Registry. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The FQDN for accessing the Container Registry. FQDN is built from `subdomain_label` + `.sakuracr.jp`
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the Container Registry
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the Container Registry. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in
        /// the range [`1`-`64`]
        /// </summary>
        [Output("subdomainLabel")]
        public Output<string> SubdomainLabel { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the Container Registry
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("users")]
        public Output<ImmutableArray<Outputs.ContainerRegistryUsers>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerRegistry(string name, ContainerRegistryArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/containerRegistry:ContainerRegistry", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ContainerRegistry(string name, Input<string> id, ContainerRegistryState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/containerRegistry:ContainerRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerRegistry Get(string name, Input<string> id, ContainerRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerRegistry(name, id, state, options);
        }
    }

    public sealed class ContainerRegistryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`]
        /// </summary>
        [Input("accessLevel", required: true)]
        public Input<string> AccessLevel { get; set; } = null!;

        /// <summary>
        /// The description of the Container Registry. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The icon id to attach to the Container Registry
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the Container Registry. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in
        /// the range [`1`-`64`]
        /// </summary>
        [Input("subdomainLabel", required: true)]
        public Input<string> SubdomainLabel { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Container Registry
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.ContainerRegistryUsersArgs>? _users;
        public InputList<Inputs.ContainerRegistryUsersArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.ContainerRegistryUsersArgs>());
            set => _users = value;
        }

        public ContainerRegistryArgs()
        {
        }
    }

    public sealed class ContainerRegistryState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`]
        /// </summary>
        [Input("accessLevel")]
        public Input<string>? AccessLevel { get; set; }

        /// <summary>
        /// The description of the Container Registry. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The FQDN for accessing the Container Registry. FQDN is built from `subdomain_label` + `.sakuracr.jp`
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// The icon id to attach to the Container Registry
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the Container Registry. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in
        /// the range [`1`-`64`]
        /// </summary>
        [Input("subdomainLabel")]
        public Input<string>? SubdomainLabel { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the Container Registry
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("users")]
        private InputList<Inputs.ContainerRegistryUsersGetArgs>? _users;
        public InputList<Inputs.ContainerRegistryUsersGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.ContainerRegistryUsersGetArgs>());
            set => _users = value;
        }

        public ContainerRegistryState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ContainerRegistryUsersArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public ContainerRegistryUsersArgs()
        {
        }
    }

    public sealed class ContainerRegistryUsersGetArgs : Pulumi.ResourceArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public ContainerRegistryUsersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ContainerRegistryUsers
    {
        public readonly string Name;
        public readonly string Password;

        [OutputConstructor]
        private ContainerRegistryUsers(
            string name,
            string password)
        {
            Name = name;
            Password = password;
        }
    }
    }
}
