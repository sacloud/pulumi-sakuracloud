// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetGSLB
    {
        /// <summary>
        /// Get information about an existing GSLB.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetGSLB.InvokeAsync(new Sakuracloud.GetGSLBArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetGSLBFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGSLBResult> InvokeAsync(GetGSLBArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGSLBResult>("sakuracloud:index/getGSLB:getGSLB", args ?? new GetGSLBArgs(), options.WithVersion());
    }


    public sealed class GetGSLBArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetGSLBFilterArgs? Filter { get; set; }

        public GetGSLBArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetGSLBResult
    {
        /// <summary>
        /// The description of the GSLB.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetGSLBFilterResult? Filter;
        /// <summary>
        /// The FQDN for accessing to the GSLB. This is typically used as value of CNAME record.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// A list of `health_check` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGSLBHealthCheckResult> HealthChecks;
        /// <summary>
        /// The icon id attached to the GSLB.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the GSLB.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of `server` blocks as defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGSLBServerResult> Servers;
        /// <summary>
        /// The IP address of the SorryServer. This will be used when all servers are down.
        /// </summary>
        public readonly string SorryServer;
        /// <summary>
        /// Any tags assigned to the GSLB.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The flag to enable weighted load-balancing.
        /// </summary>
        public readonly bool Weighted;

        [OutputConstructor]
        private GetGSLBResult(
            string description,

            Outputs.GetGSLBFilterResult? filter,

            string fqdn,

            ImmutableArray<Outputs.GetGSLBHealthCheckResult> healthChecks,

            string iconId,

            string id,

            string name,

            ImmutableArray<Outputs.GetGSLBServerResult> servers,

            string sorryServer,

            ImmutableArray<string> tags,

            bool weighted)
        {
            Description = description;
            Filter = filter;
            Fqdn = fqdn;
            HealthChecks = healthChecks;
            IconId = iconId;
            Id = id;
            Name = name;
            Servers = servers;
            SorryServer = sorryServer;
            Tags = tags;
            Weighted = weighted;
        }
    }
}
