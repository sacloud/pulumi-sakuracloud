// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a SakuraCloud GSLB.
        /// 
        /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/gslb.html.markdown.
        /// </summary>
        public static Task<GetGSLBResult> GetGSLB(GetGSLBArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGSLBResult>("sakuracloud:index/getGSLB:getGSLB", args, options.WithVersion());
    }

    public sealed class GetGSLBArgs : Pulumi.ResourceArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetGSLBFiltersArgs>? _filters;

        /// <summary>
        /// The map of filter key and value.
        /// </summary>
        public InputList<Inputs.GetGSLBFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetGSLBFiltersArgs>());
            set => _filters = value;
        }

        [Input("nameSelectors")]
        private InputList<string>? _nameSelectors;

        /// <summary>
        /// The list of names to filtering.
        /// </summary>
        public InputList<string> NameSelectors
        {
            get => _nameSelectors ?? (_nameSelectors = new InputList<string>());
            set => _nameSelectors = value;
        }

        [Input("tagSelectors")]
        private InputList<string>? _tagSelectors;

        /// <summary>
        /// The list of tags to filtering.
        /// </summary>
        public InputList<string> TagSelectors
        {
            get => _tagSelectors ?? (_tagSelectors = new InputList<string>());
            set => _tagSelectors = value;
        }

        public GetGSLBArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetGSLBResult
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetGSLBFiltersResult> Filters;
        /// <summary>
        /// FQDN to access this resource.
        /// </summary>
        public readonly string Fqdn;
        /// <summary>
        /// Health check rules. It contains some attributes to Health Check.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGSLBHealthChecksResult> HealthChecks;
        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> NameSelectors;
        /// <summary>
        /// The hostname or IP address of sorry server.
        /// </summary>
        public readonly string SorryServer;
        public readonly ImmutableArray<string> TagSelectors;
        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The flag for enable/disable weighting.
        /// </summary>
        public readonly bool Weighted;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetGSLBResult(
            string description,
            ImmutableArray<Outputs.GetGSLBFiltersResult> filters,
            string fqdn,
            ImmutableArray<Outputs.GetGSLBHealthChecksResult> healthChecks,
            string iconId,
            string name,
            ImmutableArray<string> nameSelectors,
            string sorryServer,
            ImmutableArray<string> tagSelectors,
            ImmutableArray<string> tags,
            bool weighted,
            string id)
        {
            Description = description;
            Filters = filters;
            Fqdn = fqdn;
            HealthChecks = healthChecks;
            IconId = iconId;
            Name = name;
            NameSelectors = nameSelectors;
            SorryServer = sorryServer;
            TagSelectors = tagSelectors;
            Tags = tags;
            Weighted = weighted;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetGSLBFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GetGSLBFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetGSLBFiltersResult
    {
        /// <summary>
        /// Name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetGSLBFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }

    [OutputType]
    public sealed class GetGSLBHealthChecksResult
    {
        /// <summary>
        /// Health check access interval (unit:`second`).
        /// </summary>
        public readonly int DelayLoop;
        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        public readonly string HostHeader;
        /// <summary>
        /// The request path used in http/https health check access.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Port number used in tcp health check access.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Protocol used in health check.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// HTTP status code expected by health check access.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetGSLBHealthChecksResult(
            int delayLoop,
            string hostHeader,
            string path,
            int port,
            string protocol,
            string status)
        {
            DelayLoop = delayLoop;
            HostHeader = hostHeader;
            Path = path;
            Port = port;
            Protocol = protocol;
            Status = status;
        }
    }
    }
}
