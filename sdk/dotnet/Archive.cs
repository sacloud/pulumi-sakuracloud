// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.SakuraCloud
{
    public partial class Archive : Pulumi.CustomResource
    {
        /// <summary>
        /// The file path to upload to the SakuraCloud
        /// </summary>
        [Output("archiveFile")]
        public Output<string?> ArchiveFile { get; private set; } = null!;

        /// <summary>
        /// The description of the archive. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The md5 checksum calculated from the base64 encoded file body
        /// </summary>
        [Output("hash")]
        public Output<string> Hash { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the archive
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the archive. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The size of archive in GiB. This must be one of [`20`/`40`/`60`/`80`/`100`/`250`/`500`/`750`/`1024`]
        /// </summary>
        [Output("size")]
        public Output<int?> Size { get; private set; } = null!;

        /// <summary>
        /// The id of the source archive. This conflicts with [`source_disk_id`]
        /// </summary>
        [Output("sourceArchiveId")]
        public Output<string?> SourceArchiveId { get; private set; } = null!;

        /// <summary>
        /// The share key of source shared archive
        /// </summary>
        [Output("sourceArchiveZone")]
        public Output<string?> SourceArchiveZone { get; private set; } = null!;

        /// <summary>
        /// The id of the source disk. This conflicts with [`source_archive_id`]
        /// </summary>
        [Output("sourceDiskId")]
        public Output<string?> SourceDiskId { get; private set; } = null!;

        /// <summary>
        /// The share key of source shared archive
        /// </summary>
        [Output("sourceSharedKey")]
        public Output<string?> SourceSharedKey { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the archive
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of zone that the archive will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Archive resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Archive(string name, ArchiveArgs? args = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/archive:Archive", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Archive(string name, Input<string> id, ArchiveState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/archive:Archive", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Archive resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Archive Get(string name, Input<string> id, ArchiveState? state = null, CustomResourceOptions? options = null)
        {
            return new Archive(name, id, state, options);
        }
    }

    public sealed class ArchiveArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file path to upload to the SakuraCloud
        /// </summary>
        [Input("archiveFile")]
        public Input<string>? ArchiveFile { get; set; }

        /// <summary>
        /// The description of the archive. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The md5 checksum calculated from the base64 encoded file body
        /// </summary>
        [Input("hash")]
        public Input<string>? Hash { get; set; }

        /// <summary>
        /// The icon id to attach to the archive
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the archive. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The size of archive in GiB. This must be one of [`20`/`40`/`60`/`80`/`100`/`250`/`500`/`750`/`1024`]
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The id of the source archive. This conflicts with [`source_disk_id`]
        /// </summary>
        [Input("sourceArchiveId")]
        public Input<string>? SourceArchiveId { get; set; }

        /// <summary>
        /// The share key of source shared archive
        /// </summary>
        [Input("sourceArchiveZone")]
        public Input<string>? SourceArchiveZone { get; set; }

        /// <summary>
        /// The id of the source disk. This conflicts with [`source_archive_id`]
        /// </summary>
        [Input("sourceDiskId")]
        public Input<string>? SourceDiskId { get; set; }

        /// <summary>
        /// The share key of source shared archive
        /// </summary>
        [Input("sourceSharedKey")]
        public Input<string>? SourceSharedKey { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the archive
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of zone that the archive will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ArchiveArgs()
        {
        }
    }

    public sealed class ArchiveState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file path to upload to the SakuraCloud
        /// </summary>
        [Input("archiveFile")]
        public Input<string>? ArchiveFile { get; set; }

        /// <summary>
        /// The description of the archive. The length of this value must be in the range [`1`-`512`]
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The md5 checksum calculated from the base64 encoded file body
        /// </summary>
        [Input("hash")]
        public Input<string>? Hash { get; set; }

        /// <summary>
        /// The icon id to attach to the archive
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the archive. The length of this value must be in the range [`1`-`64`]
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The size of archive in GiB. This must be one of [`20`/`40`/`60`/`80`/`100`/`250`/`500`/`750`/`1024`]
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The id of the source archive. This conflicts with [`source_disk_id`]
        /// </summary>
        [Input("sourceArchiveId")]
        public Input<string>? SourceArchiveId { get; set; }

        /// <summary>
        /// The share key of source shared archive
        /// </summary>
        [Input("sourceArchiveZone")]
        public Input<string>? SourceArchiveZone { get; set; }

        /// <summary>
        /// The id of the source disk. This conflicts with [`source_archive_id`]
        /// </summary>
        [Input("sourceDiskId")]
        public Input<string>? SourceDiskId { get; set; }

        /// <summary>
        /// The share key of source shared archive
        /// </summary>
        [Input("sourceSharedKey")]
        public Input<string>? SourceSharedKey { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the archive
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of zone that the archive will be created (e.g. `is1a`, `tk1a`)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ArchiveState()
        {
        }
    }
}
