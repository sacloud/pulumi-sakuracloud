// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a SakuraCloud Database.
        /// 
        /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/database.html.markdown.
        /// </summary>
        public static Task<GetDatabaseResult> GetDatabase(GetDatabaseArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("sakuracloud:index/getDatabase:getDatabase", args, options.WithVersion());
    }

    public sealed class GetDatabaseArgs : Pulumi.ResourceArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetDatabaseFiltersArgs>? _filters;

        /// <summary>
        /// The map of filter key and value.
        /// </summary>
        public InputList<Inputs.GetDatabaseFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDatabaseFiltersArgs>());
            set => _filters = value;
        }

        [Input("nameSelectors")]
        private InputList<string>? _nameSelectors;

        /// <summary>
        /// The list of names to filtering.
        /// </summary>
        public InputList<string> NameSelectors
        {
            get => _nameSelectors ?? (_nameSelectors = new InputList<string>());
            set => _nameSelectors = value;
        }

        [Input("tagSelectors")]
        private InputList<string>? _tagSelectors;

        /// <summary>
        /// The list of tags to filtering.
        /// </summary>
        public InputList<string> TagSelectors
        {
            get => _tagSelectors ?? (_tagSelectors = new InputList<string>());
            set => _tagSelectors = value;
        }

        /// <summary>
        /// The ID of the zone.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GetDatabaseArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// The network address list that allowed connections to the database.
        /// </summary>
        public readonly ImmutableArray<string> AllowNetworks;
        /// <summary>
        /// The time to perform backup.
        /// </summary>
        public readonly string BackupTime;
        /// <summary>
        /// Day of the week to get backup.  
        /// </summary>
        public readonly ImmutableArray<string> BackupWeekdays;
        /// <summary>
        /// The default route IP address of the database.
        /// </summary>
        public readonly string DefaultRoute;
        /// <summary>
        /// The description of the resource.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetDatabaseFiltersResult> Filters;
        /// <summary>
        /// The ID of the icon of the resource.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The IP address of the database.
        /// </summary>
        public readonly string Ipaddress1;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> NameSelectors;
        /// <summary>
        /// The network mask length of the database.
        /// </summary>
        public readonly int NwMaskLen;
        /// <summary>
        /// The name of the resource plan.
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// The number of the port on which the database is listening.
        /// </summary>
        public readonly int Port;
        public readonly string ReplicaPassword;
        public readonly string ReplicaUser;
        /// <summary>
        /// The ID of the switch connected to the database.
        /// </summary>
        public readonly string SwitchId;
        public readonly ImmutableArray<string> TagSelectors;
        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The username to access database.
        /// </summary>
        public readonly string UserName;
        /// <summary>
        /// The password to access database.
        /// </summary>
        public readonly string UserPassword;
        /// <summary>
        /// The ID of the zone to which the resource belongs.
        /// </summary>
        public readonly string Zone;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDatabaseResult(
            ImmutableArray<string> allowNetworks,
            string backupTime,
            ImmutableArray<string> backupWeekdays,
            string defaultRoute,
            string description,
            ImmutableArray<Outputs.GetDatabaseFiltersResult> filters,
            string iconId,
            string ipaddress1,
            string name,
            ImmutableArray<string> nameSelectors,
            int nwMaskLen,
            string plan,
            int port,
            string replicaPassword,
            string replicaUser,
            string switchId,
            ImmutableArray<string> tagSelectors,
            ImmutableArray<string> tags,
            string userName,
            string userPassword,
            string zone,
            string id)
        {
            AllowNetworks = allowNetworks;
            BackupTime = backupTime;
            BackupWeekdays = backupWeekdays;
            DefaultRoute = defaultRoute;
            Description = description;
            Filters = filters;
            IconId = iconId;
            Ipaddress1 = ipaddress1;
            Name = name;
            NameSelectors = nameSelectors;
            NwMaskLen = nwMaskLen;
            Plan = plan;
            Port = port;
            ReplicaPassword = replicaPassword;
            ReplicaUser = replicaUser;
            SwitchId = switchId;
            TagSelectors = tagSelectors;
            Tags = tags;
            UserName = userName;
            UserPassword = userPassword;
            Zone = zone;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetDatabaseFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GetDatabaseFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetDatabaseFiltersResult
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetDatabaseFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }
    }
}
