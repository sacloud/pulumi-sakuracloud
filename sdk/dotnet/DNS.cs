// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud DNS zones resource. This can be used to create, update, and delete DNS zones.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/dns.html.markdown.
    /// </summary>
    public partial class DNS : Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of host names of DNS servers.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// Records. It contains some attributes to Records.
        /// </summary>
        [Output("records")]
        public Output<ImmutableArray<Outputs.DNSRecords>> Records { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of the zone.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a DNS resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DNS(string name, DNSArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/dNS:DNS", name, args, MakeResourceOptions(options, ""))
        {
        }

        private DNS(string name, Input<string> id, DNSState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/dNS:DNS", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DNS resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DNS Get(string name, Input<string> id, DNSState? state = null, CustomResourceOptions? options = null)
        {
            return new DNS(name, id, state, options);
        }
    }

    public sealed class DNSArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        [Input("records")]
        private InputList<Inputs.DNSRecordsArgs>? _records;

        /// <summary>
        /// Records. It contains some attributes to Records.
        /// </summary>
        public InputList<Inputs.DNSRecordsArgs> Records
        {
            get => _records ?? (_records = new InputList<Inputs.DNSRecordsArgs>());
            set => _records = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the zone.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public DNSArgs()
        {
        }
    }

    public sealed class DNSState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// List of host names of DNS servers.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        [Input("records")]
        private InputList<Inputs.DNSRecordsGetArgs>? _records;

        /// <summary>
        /// Records. It contains some attributes to Records.
        /// </summary>
        public InputList<Inputs.DNSRecordsGetArgs> Records
        {
            get => _records ?? (_records = new InputList<Inputs.DNSRecordsGetArgs>());
            set => _records = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the zone.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public DNSState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DNSRecordsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hostname of target Record. If "@" is specified, it indicates own zone.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The port number used when `type` is `SRV`. 
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The priority used when `type` is `MX` or `SRV`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ttl value of the Record (unit:`second`). 
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The Record type.  
        /// Valid value is one of the following: [ "A" / "AAAA" / "ALIAS" / "CNAME" / "NS" / "MX" / "TXT" / "SRV" / "CAA" ]
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The value of the Record. 
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        /// <summary>
        /// The weight used when `type` is `SRV`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public DNSRecordsArgs()
        {
        }
    }

    public sealed class DNSRecordsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hostname of target Record. If "@" is specified, it indicates own zone.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The port number used when `type` is `SRV`. 
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The priority used when `type` is `MX` or `SRV`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ttl value of the Record (unit:`second`). 
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The Record type.  
        /// Valid value is one of the following: [ "A" / "AAAA" / "ALIAS" / "CNAME" / "NS" / "MX" / "TXT" / "SRV" / "CAA" ]
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The value of the Record. 
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        /// <summary>
        /// The weight used when `type` is `SRV`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public DNSRecordsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DNSRecords
    {
        /// <summary>
        /// The hostname of target Record. If "@" is specified, it indicates own zone.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The port number used when `type` is `SRV`. 
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The priority used when `type` is `MX` or `SRV`.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// The ttl value of the Record (unit:`second`). 
        /// </summary>
        public readonly int? Ttl;
        /// <summary>
        /// The Record type.  
        /// Valid value is one of the following: [ "A" / "AAAA" / "ALIAS" / "CNAME" / "NS" / "MX" / "TXT" / "SRV" / "CAA" ]
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The value of the Record. 
        /// </summary>
        public readonly string Value;
        /// <summary>
        /// The weight used when `type` is `SRV`.
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private DNSRecords(
            string name,
            int? port,
            int? priority,
            int? ttl,
            string type,
            string value,
            int? weight)
        {
            Name = name;
            Port = port;
            Priority = priority;
            Ttl = ttl;
            Type = type;
            Value = value;
            Weight = weight;
        }
    }
    }
}
