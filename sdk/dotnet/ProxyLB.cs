// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Provides a SakuraCloud ProxyLB(Enhanced-LoadBalancer) resource. This can be used to create, update, and delete ProxyLBs.
    /// 
    /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/proxylb.html.markdown.
    /// </summary>
    public partial class ProxyLB : Pulumi.CustomResource
    {
        /// <summary>
        /// The external listen ports. It contains some attributes to Bind Ports.
        /// </summary>
        [Output("bindPorts")]
        public Output<ImmutableArray<Outputs.ProxyLBBindPorts>> BindPorts { get; private set; } = null!;

        /// <summary>
        /// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
        /// </summary>
        [Output("certificate")]
        public Output<Outputs.ProxyLBCertificate> Certificate { get; private set; } = null!;

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The FQDN that was assigned. This attribute only valid when `vip_failover` is set to `true`.  
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// The health check rules. It contains some attributes to Health Check.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.ProxyLBHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.  
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The plan of the resource.
        /// Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
        /// </summary>
        [Output("plan")]
        public Output<int?> Plan { get; private set; } = null!;

        /// <summary>
        /// ProxyLB network address.   
        /// </summary>
        [Output("proxyNetworks")]
        public Output<ImmutableArray<string>> ProxyNetworks { get; private set; } = null!;

        /// <summary>
        /// Real servers. It contains some attributes to Servers.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.ProxyLBServers>> Servers { get; private set; } = null!;

        /// <summary>
        /// The pair of IPAddress and port number of sorry-server.
        /// </summary>
        [Output("sorryServer")]
        public Output<Outputs.ProxyLBSorryServer?> SorryServer { get; private set; } = null!;

        /// <summary>
        /// The flag of enable Sticky-Session.  
        /// </summary>
        [Output("stickySession")]
        public Output<bool?> StickySession { get; private set; } = null!;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Timeout seconds.  
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// The VirtualIPAddress that was assigned. This attribute only valid when `vip_failover` is set to `false`.  
        /// </summary>
        [Output("vip")]
        public Output<string> Vip { get; private set; } = null!;

        /// <summary>
        /// The flag of enable VIP Fail-Over.  
        /// </summary>
        [Output("vipFailover")]
        public Output<bool?> VipFailover { get; private set; } = null!;


        /// <summary>
        /// Create a ProxyLB resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProxyLB(string name, ProxyLBArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLB:ProxyLB", name, args, MakeResourceOptions(options, ""))
        {
        }

        private ProxyLB(string name, Input<string> id, ProxyLBState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLB:ProxyLB", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProxyLB resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProxyLB Get(string name, Input<string> id, ProxyLBState? state = null, CustomResourceOptions? options = null)
        {
            return new ProxyLB(name, id, state, options);
        }
    }

    public sealed class ProxyLBArgs : Pulumi.ResourceArgs
    {
        [Input("bindPorts", required: true)]
        private InputList<Inputs.ProxyLBBindPortsArgs>? _bindPorts;

        /// <summary>
        /// The external listen ports. It contains some attributes to Bind Ports.
        /// </summary>
        public InputList<Inputs.ProxyLBBindPortsArgs> BindPorts
        {
            get => _bindPorts ?? (_bindPorts = new InputList<Inputs.ProxyLBBindPortsArgs>());
            set => _bindPorts = value;
        }

        /// <summary>
        /// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.ProxyLBCertificateArgs>? Certificate { get; set; }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The health check rules. It contains some attributes to Health Check.
        /// </summary>
        [Input("healthCheck", required: true)]
        public Input<Inputs.ProxyLBHealthCheckArgs> HealthCheck { get; set; } = null!;

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the resource.  
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan of the resource.
        /// Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
        /// </summary>
        [Input("plan")]
        public Input<int>? Plan { get; set; }

        [Input("servers")]
        private InputList<Inputs.ProxyLBServersArgs>? _servers;

        /// <summary>
        /// Real servers. It contains some attributes to Servers.
        /// </summary>
        public InputList<Inputs.ProxyLBServersArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ProxyLBServersArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// The pair of IPAddress and port number of sorry-server.
        /// </summary>
        [Input("sorryServer")]
        public Input<Inputs.ProxyLBSorryServerArgs>? SorryServer { get; set; }

        /// <summary>
        /// The flag of enable Sticky-Session.  
        /// </summary>
        [Input("stickySession")]
        public Input<bool>? StickySession { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Timeout seconds.  
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The flag of enable VIP Fail-Over.  
        /// </summary>
        [Input("vipFailover")]
        public Input<bool>? VipFailover { get; set; }

        public ProxyLBArgs()
        {
        }
    }

    public sealed class ProxyLBState : Pulumi.ResourceArgs
    {
        [Input("bindPorts")]
        private InputList<Inputs.ProxyLBBindPortsGetArgs>? _bindPorts;

        /// <summary>
        /// The external listen ports. It contains some attributes to Bind Ports.
        /// </summary>
        public InputList<Inputs.ProxyLBBindPortsGetArgs> BindPorts
        {
            get => _bindPorts ?? (_bindPorts = new InputList<Inputs.ProxyLBBindPortsGetArgs>());
            set => _bindPorts = value;
        }

        /// <summary>
        /// Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.ProxyLBCertificateGetArgs>? Certificate { get; set; }

        /// <summary>
        /// The description of the resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The FQDN that was assigned. This attribute only valid when `vip_failover` is set to `true`.  
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// The health check rules. It contains some attributes to Health Check.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ProxyLBHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The ID of the icon.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the resource.  
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan of the resource.
        /// Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
        /// </summary>
        [Input("plan")]
        public Input<int>? Plan { get; set; }

        [Input("proxyNetworks")]
        private InputList<string>? _proxyNetworks;

        /// <summary>
        /// ProxyLB network address.   
        /// </summary>
        public InputList<string> ProxyNetworks
        {
            get => _proxyNetworks ?? (_proxyNetworks = new InputList<string>());
            set => _proxyNetworks = value;
        }

        [Input("servers")]
        private InputList<Inputs.ProxyLBServersGetArgs>? _servers;

        /// <summary>
        /// Real servers. It contains some attributes to Servers.
        /// </summary>
        public InputList<Inputs.ProxyLBServersGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ProxyLBServersGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// The pair of IPAddress and port number of sorry-server.
        /// </summary>
        [Input("sorryServer")]
        public Input<Inputs.ProxyLBSorryServerGetArgs>? SorryServer { get; set; }

        /// <summary>
        /// The flag of enable Sticky-Session.  
        /// </summary>
        [Input("stickySession")]
        public Input<bool>? StickySession { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Timeout seconds.  
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The VirtualIPAddress that was assigned. This attribute only valid when `vip_failover` is set to `false`.  
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        /// <summary>
        /// The flag of enable VIP Fail-Over.  
        /// </summary>
        [Input("vipFailover")]
        public Input<bool>? VipFailover { get; set; }

        public ProxyLBState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ProxyLBBindPortsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Proxy protocol.  
        /// Valid value is one of the following: [ "http" / "https"]
        /// </summary>
        [Input("proxyMode", required: true)]
        public Input<string> ProxyMode { get; set; } = null!;

        /// <summary>
        /// The flag for enable to redirect to https.
        /// </summary>
        [Input("redirectToHttps")]
        public Input<bool>? RedirectToHttps { get; set; }

        [Input("responseHeaders")]
        private InputList<ProxyLBBindPortsResponseHeadersArgs>? _responseHeaders;

        /// <summary>
        /// Additional response headers. It contains some attributes to Response Header.  
        /// </summary>
        public InputList<ProxyLBBindPortsResponseHeadersArgs> ResponseHeaders
        {
            get => _responseHeaders ?? (_responseHeaders = new InputList<ProxyLBBindPortsResponseHeadersArgs>());
            set => _responseHeaders = value;
        }

        /// <summary>
        /// The flag for enable to support HTTP/2.
        /// </summary>
        [Input("supportHttp2")]
        public Input<bool>? SupportHttp2 { get; set; }

        public ProxyLBBindPortsArgs()
        {
        }
    }

    public sealed class ProxyLBBindPortsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Proxy protocol.  
        /// Valid value is one of the following: [ "http" / "https"]
        /// </summary>
        [Input("proxyMode", required: true)]
        public Input<string> ProxyMode { get; set; } = null!;

        /// <summary>
        /// The flag for enable to redirect to https.
        /// </summary>
        [Input("redirectToHttps")]
        public Input<bool>? RedirectToHttps { get; set; }

        [Input("responseHeaders")]
        private InputList<ProxyLBBindPortsResponseHeadersGetArgs>? _responseHeaders;

        /// <summary>
        /// Additional response headers. It contains some attributes to Response Header.  
        /// </summary>
        public InputList<ProxyLBBindPortsResponseHeadersGetArgs> ResponseHeaders
        {
            get => _responseHeaders ?? (_responseHeaders = new InputList<ProxyLBBindPortsResponseHeadersGetArgs>());
            set => _responseHeaders = value;
        }

        /// <summary>
        /// The flag for enable to support HTTP/2.
        /// </summary>
        [Input("supportHttp2")]
        public Input<bool>? SupportHttp2 { get; set; }

        public ProxyLBBindPortsGetArgs()
        {
        }
    }

    public sealed class ProxyLBBindPortsResponseHeadersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of additional header.  
        /// </summary>
        [Input("header", required: true)]
        public Input<string> Header { get; set; } = null!;

        /// <summary>
        /// The value of additional header.  
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ProxyLBBindPortsResponseHeadersArgs()
        {
        }
    }

    public sealed class ProxyLBBindPortsResponseHeadersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of additional header.  
        /// </summary>
        [Input("header", required: true)]
        public Input<string> Header { get; set; } = null!;

        /// <summary>
        /// The value of additional header.  
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ProxyLBBindPortsResponseHeadersGetArgs()
        {
        }
    }

    public sealed class ProxyLBCertificateAdditionalCertificatesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        [Input("intermediateCert")]
        public Input<string>? IntermediateCert { get; set; }

        /// <summary>
        /// The private key.
        /// </summary>
        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        /// <summary>
        /// The server certificate.
        /// </summary>
        [Input("serverCert", required: true)]
        public Input<string> ServerCert { get; set; } = null!;

        public ProxyLBCertificateAdditionalCertificatesArgs()
        {
        }
    }

    public sealed class ProxyLBCertificateAdditionalCertificatesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        [Input("intermediateCert")]
        public Input<string>? IntermediateCert { get; set; }

        /// <summary>
        /// The private key.
        /// </summary>
        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        /// <summary>
        /// The server certificate.
        /// </summary>
        [Input("serverCert", required: true)]
        public Input<string> ServerCert { get; set; } = null!;

        public ProxyLBCertificateAdditionalCertificatesGetArgs()
        {
        }
    }

    public sealed class ProxyLBCertificateArgs : Pulumi.ResourceArgs
    {
        [Input("additionalCertificates")]
        private InputList<ProxyLBCertificateAdditionalCertificatesArgs>? _additionalCertificates;

        /// <summary>
        /// Additional certificates.
        /// </summary>
        public InputList<ProxyLBCertificateAdditionalCertificatesArgs> AdditionalCertificates
        {
            get => _additionalCertificates ?? (_additionalCertificates = new InputList<ProxyLBCertificateAdditionalCertificatesArgs>());
            set => _additionalCertificates = value;
        }

        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        [Input("intermediateCert")]
        public Input<string>? IntermediateCert { get; set; }

        /// <summary>
        /// The private key.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The server certificate.
        /// </summary>
        [Input("serverCert")]
        public Input<string>? ServerCert { get; set; }

        public ProxyLBCertificateArgs()
        {
        }
    }

    public sealed class ProxyLBCertificateGetArgs : Pulumi.ResourceArgs
    {
        [Input("additionalCertificates")]
        private InputList<ProxyLBCertificateAdditionalCertificatesGetArgs>? _additionalCertificates;

        /// <summary>
        /// Additional certificates.
        /// </summary>
        public InputList<ProxyLBCertificateAdditionalCertificatesGetArgs> AdditionalCertificates
        {
            get => _additionalCertificates ?? (_additionalCertificates = new InputList<ProxyLBCertificateAdditionalCertificatesGetArgs>());
            set => _additionalCertificates = value;
        }

        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        [Input("intermediateCert")]
        public Input<string>? IntermediateCert { get; set; }

        /// <summary>
        /// The private key.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The server certificate.
        /// </summary>
        [Input("serverCert")]
        public Input<string>? ServerCert { get; set; }

        public ProxyLBCertificateGetArgs()
        {
        }
    }

    public sealed class ProxyLBHealthCheckArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Health check access interval (unit:`second`, default:`10`).
        /// </summary>
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// The request path used in http health check access.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "tcp" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public ProxyLBHealthCheckArgs()
        {
        }
    }

    public sealed class ProxyLBHealthCheckGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Health check access interval (unit:`second`, default:`10`).
        /// </summary>
        [Input("delayLoop")]
        public Input<int>? DelayLoop { get; set; }

        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// The request path used in http health check access.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "tcp" ]
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public ProxyLBHealthCheckGetArgs()
        {
        }
    }

    public sealed class ProxyLBServersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag for enable/disable the Real-Server (default:`true`).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IP address of the Real-Server.
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        public ProxyLBServersArgs()
        {
        }
    }

    public sealed class ProxyLBServersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag for enable/disable the Real-Server (default:`true`).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The IP address of the Real-Server.
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        public ProxyLBServersGetArgs()
        {
        }
    }

    public sealed class ProxyLBSorryServerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP address of the Real-Server.
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        public ProxyLBSorryServerArgs()
        {
        }
    }

    public sealed class ProxyLBSorryServerGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP address of the Real-Server.
        /// </summary>
        [Input("ipaddress", required: true)]
        public Input<string> Ipaddress { get; set; } = null!;

        /// <summary>
        /// Port number.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        public ProxyLBSorryServerGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ProxyLBBindPorts
    {
        /// <summary>
        /// Port number.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Proxy protocol.  
        /// Valid value is one of the following: [ "http" / "https"]
        /// </summary>
        public readonly string ProxyMode;
        /// <summary>
        /// The flag for enable to redirect to https.
        /// </summary>
        public readonly bool? RedirectToHttps;
        /// <summary>
        /// Additional response headers. It contains some attributes to Response Header.  
        /// </summary>
        public readonly ImmutableArray<ProxyLBBindPortsResponseHeaders> ResponseHeaders;
        /// <summary>
        /// The flag for enable to support HTTP/2.
        /// </summary>
        public readonly bool? SupportHttp2;

        [OutputConstructor]
        private ProxyLBBindPorts(
            int? port,
            string proxyMode,
            bool? redirectToHttps,
            ImmutableArray<ProxyLBBindPortsResponseHeaders> responseHeaders,
            bool? supportHttp2)
        {
            Port = port;
            ProxyMode = proxyMode;
            RedirectToHttps = redirectToHttps;
            ResponseHeaders = responseHeaders;
            SupportHttp2 = supportHttp2;
        }
    }

    [OutputType]
    public sealed class ProxyLBBindPortsResponseHeaders
    {
        /// <summary>
        /// The key of additional header.  
        /// </summary>
        public readonly string Header;
        /// <summary>
        /// The value of additional header.  
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private ProxyLBBindPortsResponseHeaders(
            string header,
            string value)
        {
            Header = header;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ProxyLBCertificate
    {
        /// <summary>
        /// Additional certificates.
        /// </summary>
        public readonly ImmutableArray<ProxyLBCertificateAdditionalCertificates> AdditionalCertificates;
        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        public readonly string IntermediateCert;
        /// <summary>
        /// The private key.
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// The server certificate.
        /// </summary>
        public readonly string ServerCert;

        [OutputConstructor]
        private ProxyLBCertificate(
            ImmutableArray<ProxyLBCertificateAdditionalCertificates> additionalCertificates,
            string intermediateCert,
            string privateKey,
            string serverCert)
        {
            AdditionalCertificates = additionalCertificates;
            IntermediateCert = intermediateCert;
            PrivateKey = privateKey;
            ServerCert = serverCert;
        }
    }

    [OutputType]
    public sealed class ProxyLBCertificateAdditionalCertificates
    {
        /// <summary>
        /// The intermediate certificate.
        /// </summary>
        public readonly string? IntermediateCert;
        /// <summary>
        /// The private key.
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// The server certificate.
        /// </summary>
        public readonly string ServerCert;

        [OutputConstructor]
        private ProxyLBCertificateAdditionalCertificates(
            string? intermediateCert,
            string privateKey,
            string serverCert)
        {
            IntermediateCert = intermediateCert;
            PrivateKey = privateKey;
            ServerCert = serverCert;
        }
    }

    [OutputType]
    public sealed class ProxyLBHealthCheck
    {
        /// <summary>
        /// Health check access interval (unit:`second`, default:`10`).
        /// </summary>
        public readonly int? DelayLoop;
        /// <summary>
        /// The value of `Host` header used in http/https health check access.
        /// </summary>
        public readonly string? HostHeader;
        /// <summary>
        /// The request path used in http health check access.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Protocol used in health check.  
        /// Valid value is one of the following: [ "http" / "tcp" ]
        /// </summary>
        public readonly string Protocol;

        [OutputConstructor]
        private ProxyLBHealthCheck(
            int? delayLoop,
            string? hostHeader,
            string? path,
            string protocol)
        {
            DelayLoop = delayLoop;
            HostHeader = hostHeader;
            Path = path;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class ProxyLBServers
    {
        /// <summary>
        /// The flag for enable/disable the Real-Server (default:`true`).
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The IP address of the Real-Server.
        /// </summary>
        public readonly string Ipaddress;
        /// <summary>
        /// Port number.
        /// </summary>
        public readonly int Port;

        [OutputConstructor]
        private ProxyLBServers(
            bool? enabled,
            string ipaddress,
            int port)
        {
            Enabled = enabled;
            Ipaddress = ipaddress;
            Port = port;
        }
    }

    [OutputType]
    public sealed class ProxyLBSorryServer
    {
        /// <summary>
        /// The IP address of the Real-Server.
        /// </summary>
        public readonly string Ipaddress;
        /// <summary>
        /// Port number.
        /// </summary>
        public readonly int? Port;

        [OutputConstructor]
        private ProxyLBSorryServer(
            string ipaddress,
            int? port)
        {
            Ipaddress = ipaddress;
            Port = port;
        }
    }
    }
}
