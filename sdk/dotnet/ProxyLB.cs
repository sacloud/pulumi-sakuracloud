// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    /// <summary>
    /// Manages a SakuraCloud ProxyLB.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Sakuracloud = Pulumi.Sakuracloud;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobarServer = new Sakuracloud.Server("foobarServer", new Sakuracloud.ServerArgs
    ///         {
    ///             NetworkInterfaces = 
    ///             {
    ///                 new Sakuracloud.Inputs.ServerNetworkInterfaceArgs
    ///                 {
    ///                     Upstream = "shared",
    ///                 },
    ///             },
    ///         });
    ///         var foobarProxyLB = new Sakuracloud.ProxyLB("foobarProxyLB", new Sakuracloud.ProxyLBArgs
    ///         {
    ///             Plan = 100,
    ///             VipFailover = true,
    ///             StickySession = true,
    ///             Gzip = true,
    ///             Timeout = 10,
    ///             Region = "is1",
    ///             HealthCheck = new Sakuracloud.Inputs.ProxyLBHealthCheckArgs
    ///             {
    ///                 Protocol = "http",
    ///                 DelayLoop = 10,
    ///                 HostHeader = "example.com",
    ///                 Path = "/",
    ///             },
    ///             SorryServer = new Sakuracloud.Inputs.ProxyLBSorryServerArgs
    ///             {
    ///                 IpAddress = "192.0.2.1",
    ///                 Port = 80,
    ///             },
    ///             BindPorts = 
    ///             {
    ///                 new Sakuracloud.Inputs.ProxyLBBindPortArgs
    ///                 {
    ///                     ProxyMode = "http",
    ///                     Port = 80,
    ///                     ResponseHeaders = 
    ///                     {
    ///                         new Sakuracloud.Inputs.ProxyLBBindPortResponseHeaderArgs
    ///                         {
    ///                             Header = "Cache-Control",
    ///                             Value = "public, max-age=10",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Servers = 
    ///             {
    ///                 new Sakuracloud.Inputs.ProxyLBServerArgs
    ///                 {
    ///                     IpAddress = foobarServer.IpAddress,
    ///                     Port = 80,
    ///                     Group = "group1",
    ///                 },
    ///             },
    ///             Rules = 
    ///             {
    ///                 new Sakuracloud.Inputs.ProxyLBRuleArgs
    ///                 {
    ///                     Host = "www.example.com",
    ///                     Path = "/",
    ///                     Group = "group1",
    ///                 },
    ///             },
    ///             Description = "description",
    ///             Tags = 
    ///             {
    ///                 "tag1",
    ///                 "tag2",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SakuracloudResourceType("sakuracloud:index/proxyLB:ProxyLB")]
    public partial class ProxyLB : Pulumi.CustomResource
    {
        /// <summary>
        /// One or more `bind_port` blocks as defined below.
        /// </summary>
        [Output("bindPorts")]
        public Output<ImmutableArray<Outputs.ProxyLBBindPort>> BindPorts { get; private set; } = null!;

        /// <summary>
        /// An `certificate` block as defined below.
        /// </summary>
        [Output("certificate")]
        public Output<Outputs.ProxyLBCertificate> Certificate { get; private set; } = null!;

        /// <summary>
        /// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record.
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// The flag to enable gzip compression.
        /// ---
        /// </summary>
        [Output("gzip")]
        public Output<bool?> Gzip { get; private set; } = null!;

        /// <summary>
        /// A `health_check` block as defined below.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.ProxyLBHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// The icon id to attach to the ProxyLB.
        /// </summary>
        [Output("iconId")]
        public Output<string?> IconId { get; private set; } = null!;

        /// <summary>
        /// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]. Default:`100`.
        /// </summary>
        [Output("plan")]
        public Output<int?> Plan { get; private set; } = null!;

        /// <summary>
        /// A list of CIDR block used by the ProxyLB to access the server.
        /// </summary>
        [Output("proxyNetworks")]
        public Output<ImmutableArray<string>> ProxyNetworks { get; private set; } = null!;

        /// <summary>
        /// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]. Changing this forces a new resource to be created. Default:`is1`.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// One or more `rule` blocks as defined below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.ProxyLBRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// One or more `server` blocks as defined below.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.ProxyLBServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// A `sorry_server` block as defined below.
        /// </summary>
        [Output("sorryServer")]
        public Output<Outputs.ProxyLBSorryServer?> SorryServer { get; private set; } = null!;

        /// <summary>
        /// The flag to enable sticky session.
        /// </summary>
        [Output("stickySession")]
        public Output<bool?> StickySession { get; private set; } = null!;

        /// <summary>
        /// Any tags to assign to the ProxyLB.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The timeout duration in seconds. Default:`10`.
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// The virtual IP address assigned to the ProxyLB.
        /// </summary>
        [Output("vip")]
        public Output<string> Vip { get; private set; } = null!;

        /// <summary>
        /// The flag to enable VIP fail-over. Changing this forces a new resource to be created.
        /// </summary>
        [Output("vipFailover")]
        public Output<bool?> VipFailover { get; private set; } = null!;


        /// <summary>
        /// Create a ProxyLB resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProxyLB(string name, ProxyLBArgs args, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLB:ProxyLB", name, args ?? new ProxyLBArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProxyLB(string name, Input<string> id, ProxyLBState? state = null, CustomResourceOptions? options = null)
            : base("sakuracloud:index/proxyLB:ProxyLB", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProxyLB resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProxyLB Get(string name, Input<string> id, ProxyLBState? state = null, CustomResourceOptions? options = null)
        {
            return new ProxyLB(name, id, state, options);
        }
    }

    public sealed class ProxyLBArgs : Pulumi.ResourceArgs
    {
        [Input("bindPorts", required: true)]
        private InputList<Inputs.ProxyLBBindPortArgs>? _bindPorts;

        /// <summary>
        /// One or more `bind_port` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ProxyLBBindPortArgs> BindPorts
        {
            get => _bindPorts ?? (_bindPorts = new InputList<Inputs.ProxyLBBindPortArgs>());
            set => _bindPorts = value;
        }

        /// <summary>
        /// An `certificate` block as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.ProxyLBCertificateArgs>? Certificate { get; set; }

        /// <summary>
        /// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The flag to enable gzip compression.
        /// ---
        /// </summary>
        [Input("gzip")]
        public Input<bool>? Gzip { get; set; }

        /// <summary>
        /// A `health_check` block as defined below.
        /// </summary>
        [Input("healthCheck", required: true)]
        public Input<Inputs.ProxyLBHealthCheckArgs> HealthCheck { get; set; } = null!;

        /// <summary>
        /// The icon id to attach to the ProxyLB.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]. Default:`100`.
        /// </summary>
        [Input("plan")]
        public Input<int>? Plan { get; set; }

        /// <summary>
        /// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]. Changing this forces a new resource to be created. Default:`is1`.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rules")]
        private InputList<Inputs.ProxyLBRuleArgs>? _rules;

        /// <summary>
        /// One or more `rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ProxyLBRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ProxyLBRuleArgs>());
            set => _rules = value;
        }

        [Input("servers")]
        private InputList<Inputs.ProxyLBServerArgs>? _servers;

        /// <summary>
        /// One or more `server` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ProxyLBServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ProxyLBServerArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// A `sorry_server` block as defined below.
        /// </summary>
        [Input("sorryServer")]
        public Input<Inputs.ProxyLBSorryServerArgs>? SorryServer { get; set; }

        /// <summary>
        /// The flag to enable sticky session.
        /// </summary>
        [Input("stickySession")]
        public Input<bool>? StickySession { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the ProxyLB.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The timeout duration in seconds. Default:`10`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The flag to enable VIP fail-over. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vipFailover")]
        public Input<bool>? VipFailover { get; set; }

        public ProxyLBArgs()
        {
        }
    }

    public sealed class ProxyLBState : Pulumi.ResourceArgs
    {
        [Input("bindPorts")]
        private InputList<Inputs.ProxyLBBindPortGetArgs>? _bindPorts;

        /// <summary>
        /// One or more `bind_port` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ProxyLBBindPortGetArgs> BindPorts
        {
            get => _bindPorts ?? (_bindPorts = new InputList<Inputs.ProxyLBBindPortGetArgs>());
            set => _bindPorts = value;
        }

        /// <summary>
        /// An `certificate` block as defined below.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.ProxyLBCertificateGetArgs>? Certificate { get; set; }

        /// <summary>
        /// The description of the ProxyLB. The length of this value must be in the range [`1`-`512`].
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// The flag to enable gzip compression.
        /// ---
        /// </summary>
        [Input("gzip")]
        public Input<bool>? Gzip { get; set; }

        /// <summary>
        /// A `health_check` block as defined below.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ProxyLBHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The icon id to attach to the ProxyLB.
        /// </summary>
        [Input("iconId")]
        public Input<string>? IconId { get; set; }

        /// <summary>
        /// The name of the ProxyLB. The length of this value must be in the range [`1`-`64`].
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]. Default:`100`.
        /// </summary>
        [Input("plan")]
        public Input<int>? Plan { get; set; }

        [Input("proxyNetworks")]
        private InputList<string>? _proxyNetworks;

        /// <summary>
        /// A list of CIDR block used by the ProxyLB to access the server.
        /// </summary>
        public InputList<string> ProxyNetworks
        {
            get => _proxyNetworks ?? (_proxyNetworks = new InputList<string>());
            set => _proxyNetworks = value;
        }

        /// <summary>
        /// The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]. Changing this forces a new resource to be created. Default:`is1`.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("rules")]
        private InputList<Inputs.ProxyLBRuleGetArgs>? _rules;

        /// <summary>
        /// One or more `rule` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ProxyLBRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.ProxyLBRuleGetArgs>());
            set => _rules = value;
        }

        [Input("servers")]
        private InputList<Inputs.ProxyLBServerGetArgs>? _servers;

        /// <summary>
        /// One or more `server` blocks as defined below.
        /// </summary>
        public InputList<Inputs.ProxyLBServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ProxyLBServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// A `sorry_server` block as defined below.
        /// </summary>
        [Input("sorryServer")]
        public Input<Inputs.ProxyLBSorryServerGetArgs>? SorryServer { get; set; }

        /// <summary>
        /// The flag to enable sticky session.
        /// </summary>
        [Input("stickySession")]
        public Input<bool>? StickySession { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Any tags to assign to the ProxyLB.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The timeout duration in seconds. Default:`10`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The virtual IP address assigned to the ProxyLB.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        /// <summary>
        /// The flag to enable VIP fail-over. Changing this forces a new resource to be created.
        /// </summary>
        [Input("vipFailover")]
        public Input<bool>? VipFailover { get; set; }

        public ProxyLBState()
        {
        }
    }
}
