// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static class GetInternet
    {
        /// <summary>
        /// Get information about an existing Switch+Router.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Sakuracloud = Pulumi.Sakuracloud;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foobar = Output.Create(Sakuracloud.GetInternet.InvokeAsync(new Sakuracloud.GetInternetArgs
        ///         {
        ///             Filter = new Sakuracloud.Inputs.GetInternetFilterArgs
        ///             {
        ///                 Names = 
        ///                 {
        ///                     "foobar",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInternetResult> InvokeAsync(GetInternetArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetInternetResult>("sakuracloud:index/getInternet:getInternet", args ?? new GetInternetArgs(), options.WithVersion());
    }


    public sealed class GetInternetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used for filtering, as defined below.
        /// </summary>
        [Input("filter")]
        public Inputs.GetInternetFilterArgs? Filter { get; set; }

        /// <summary>
        /// The name of zone that the Switch+Router is in (e.g. `is1a`, `tk1a`).
        /// </summary>
        [Input("zone")]
        public string? Zone { get; set; }

        public GetInternetArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetInternetResult
    {
        /// <summary>
        /// The bandwidth of the network connected to the Internet in Mbps.
        /// </summary>
        public readonly int BandWidth;
        /// <summary>
        /// The description of the Switch+Router.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The flag to enable IPv6.
        /// </summary>
        public readonly bool EnableIpv6;
        public readonly Outputs.GetInternetFilterResult? Filter;
        /// <summary>
        /// The IP address of the gateway used by Switch+Router.
        /// </summary>
        public readonly string Gateway;
        /// <summary>
        /// The icon id attached to the Switch+Router.
        /// </summary>
        public readonly string IconId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of assigned global address to the Switch+Router.
        /// </summary>
        public readonly ImmutableArray<string> IpAddresses;
        /// <summary>
        /// The IPv6 network address assigned to the Switch+Router.
        /// </summary>
        public readonly string Ipv6NetworkAddress;
        /// <summary>
        /// The network prefix of assigned IPv6 addresses to the Switch+Router.
        /// </summary>
        public readonly string Ipv6Prefix;
        /// <summary>
        /// The bit length of IPv6 network prefix.
        /// </summary>
        public readonly int Ipv6PrefixLen;
        /// <summary>
        /// Maximum IP address in assigned global addresses to the Switch+Router.
        /// </summary>
        public readonly string MaxIpAddress;
        /// <summary>
        /// Minimum IP address in assigned global addresses to the Switch+Router.
        /// </summary>
        public readonly string MinIpAddress;
        /// <summary>
        /// The name of the Switch+Router.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The bit length of the subnet assigned to the Switch+Router.
        /// </summary>
        public readonly int Netmask;
        /// <summary>
        /// The IPv4 network address assigned to the Switch+Router.
        /// </summary>
        public readonly string NetworkAddress;
        /// <summary>
        /// A list of the ID of Servers connected to the Switch+Router.
        /// </summary>
        public readonly ImmutableArray<string> ServerIds;
        /// <summary>
        /// The id of the switch connected from the Switch+Router.
        /// </summary>
        public readonly string SwitchId;
        /// <summary>
        /// Any tags assigned to the Switch+Router.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        public readonly string Zone;

        [OutputConstructor]
        private GetInternetResult(
            int bandWidth,

            string description,

            bool enableIpv6,

            Outputs.GetInternetFilterResult? filter,

            string gateway,

            string iconId,

            string id,

            ImmutableArray<string> ipAddresses,

            string ipv6NetworkAddress,

            string ipv6Prefix,

            int ipv6PrefixLen,

            string maxIpAddress,

            string minIpAddress,

            string name,

            int netmask,

            string networkAddress,

            ImmutableArray<string> serverIds,

            string switchId,

            ImmutableArray<string> tags,

            string zone)
        {
            BandWidth = bandWidth;
            Description = description;
            EnableIpv6 = enableIpv6;
            Filter = filter;
            Gateway = gateway;
            IconId = iconId;
            Id = id;
            IpAddresses = ipAddresses;
            Ipv6NetworkAddress = ipv6NetworkAddress;
            Ipv6Prefix = ipv6Prefix;
            Ipv6PrefixLen = ipv6PrefixLen;
            MaxIpAddress = maxIpAddress;
            MinIpAddress = minIpAddress;
            Name = name;
            Netmask = netmask;
            NetworkAddress = networkAddress;
            ServerIds = serverIds;
            SwitchId = switchId;
            Tags = tags;
            Zone = zone;
        }
    }
}
