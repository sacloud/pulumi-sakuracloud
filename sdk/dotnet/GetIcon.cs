// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sakuracloud
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a SakuraCloud Icon.
        /// 
        /// &gt; This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/icon.html.markdown.
        /// </summary>
        public static Task<GetIconResult> GetIcon(GetIconArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIconResult>("sakuracloud:index/getIcon:getIcon", args, options.WithVersion());
    }

    public sealed class GetIconArgs : Pulumi.ResourceArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetIconFiltersArgs>? _filters;

        /// <summary>
        /// The map of filter key and value.
        /// </summary>
        public InputList<Inputs.GetIconFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetIconFiltersArgs>());
            set => _filters = value;
        }

        [Input("nameSelectors")]
        private InputList<string>? _nameSelectors;

        /// <summary>
        /// The list of names to filtering.
        /// </summary>
        public InputList<string> NameSelectors
        {
            get => _nameSelectors ?? (_nameSelectors = new InputList<string>());
            set => _nameSelectors = value;
        }

        [Input("tagSelectors")]
        private InputList<string>? _tagSelectors;

        /// <summary>
        /// The list of tags to filtering.
        /// </summary>
        public InputList<string> TagSelectors
        {
            get => _tagSelectors ?? (_tagSelectors = new InputList<string>());
            set => _tagSelectors = value;
        }

        public GetIconArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetIconResult
    {
        /// <summary>
        /// Base64 encoded icon data (size:`small`).
        /// </summary>
        public readonly string Body;
        public readonly ImmutableArray<Outputs.GetIconFiltersResult> Filters;
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> NameSelectors;
        public readonly ImmutableArray<string> TagSelectors;
        /// <summary>
        /// The tag list of the resources.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// URL to access this resource.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetIconResult(
            string body,
            ImmutableArray<Outputs.GetIconFiltersResult> filters,
            string name,
            ImmutableArray<string> nameSelectors,
            ImmutableArray<string> tagSelectors,
            ImmutableArray<string> tags,
            string url,
            string id)
        {
            Body = body;
            Filters = filters;
            Name = name;
            NameSelectors = nameSelectors;
            TagSelectors = tagSelectors;
            Tags = tags;
            Url = url;
            Id = id;
        }
    }

    namespace Inputs
    {

    public sealed class GetIconFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GetIconFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetIconFiltersResult
    {
        /// <summary>
        /// The name of the resource.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetIconFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }
    }
}
