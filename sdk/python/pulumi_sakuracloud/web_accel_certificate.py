# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['WebAccelCertificate']


class WebAccelCertificate(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_chain: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a SakuraCloud sakuracloud_webaccel_certificate.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sakuracloud as sakuracloud

        site = sakuracloud.get_web_accel(name="your-site-name")
        foobar = sakuracloud.WebAccelCertificate("foobar",
            site_id=site.id,
            certificate_chain=(lambda path: open(path).read())("path/to/your/certificate/chain"),
            private_key=(lambda path: open(path).read())("path/to/your/private/key"))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_chain: .
        :param pulumi.Input[str] private_key: .
        :param pulumi.Input[str] site_id: .
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if certificate_chain is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_chain'")
            __props__['certificate_chain'] = certificate_chain
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__['private_key'] = private_key
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__['site_id'] = site_id
            __props__['dns_names'] = None
            __props__['issuer_common_name'] = None
            __props__['not_after'] = None
            __props__['not_before'] = None
            __props__['serial_number'] = None
            __props__['sha256_fingerprint'] = None
            __props__['subject_common_name'] = None
        super(WebAccelCertificate, __self__).__init__(
            'sakuracloud:index/webAccelCertificate:WebAccelCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_chain: Optional[pulumi.Input[str]] = None,
            dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            issuer_common_name: Optional[pulumi.Input[str]] = None,
            not_after: Optional[pulumi.Input[str]] = None,
            not_before: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            serial_number: Optional[pulumi.Input[str]] = None,
            sha256_fingerprint: Optional[pulumi.Input[str]] = None,
            site_id: Optional[pulumi.Input[str]] = None,
            subject_common_name: Optional[pulumi.Input[str]] = None) -> 'WebAccelCertificate':
        """
        Get an existing WebAccelCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_chain: .
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: .
        :param pulumi.Input[str] issuer_common_name: .
        :param pulumi.Input[str] not_after: .
        :param pulumi.Input[str] not_before: .
        :param pulumi.Input[str] private_key: .
        :param pulumi.Input[str] serial_number: .
        :param pulumi.Input[str] sha256_fingerprint: .
        :param pulumi.Input[str] site_id: .
        :param pulumi.Input[str] subject_common_name: .
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["certificate_chain"] = certificate_chain
        __props__["dns_names"] = dns_names
        __props__["issuer_common_name"] = issuer_common_name
        __props__["not_after"] = not_after
        __props__["not_before"] = not_before
        __props__["private_key"] = private_key
        __props__["serial_number"] = serial_number
        __props__["sha256_fingerprint"] = sha256_fingerprint
        __props__["site_id"] = site_id
        __props__["subject_common_name"] = subject_common_name
        return WebAccelCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "certificate_chain")

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> pulumi.Output[Sequence[str]]:
        """
        .
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter(name="issuerCommonName")
    def issuer_common_name(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "issuer_common_name")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="sha256Fingerprint")
    def sha256_fingerprint(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "sha256_fingerprint")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter(name="subjectCommonName")
    def subject_common_name(self) -> pulumi.Output[str]:
        """
        .
        """
        return pulumi.get(self, "subject_common_name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

