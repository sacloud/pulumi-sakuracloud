# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetPrivateHostResult:
    """
    A collection of values returned by getPrivateHost.
    """
    def __init__(__self__, assigned_core=None, assigned_memory=None, class_=None, description=None, filter=None, hostname=None, icon_id=None, id=None, name=None, tags=None, zone=None):
        if assigned_core and not isinstance(assigned_core, float):
            raise TypeError("Expected argument 'assigned_core' to be a float")
        __self__.assigned_core = assigned_core
        if assigned_memory and not isinstance(assigned_memory, float):
            raise TypeError("Expected argument 'assigned_memory' to be a float")
        __self__.assigned_memory = assigned_memory
        if class_ and not isinstance(class_, str):
            raise TypeError("Expected argument 'class_' to be a str")
        __self__.class_ = class_
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        __self__.filter = filter
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        __self__.hostname = hostname
        if icon_id and not isinstance(icon_id, str):
            raise TypeError("Expected argument 'icon_id' to be a str")
        __self__.icon_id = icon_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetPrivateHostResult(GetPrivateHostResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateHostResult(
            assigned_core=self.assigned_core,
            assigned_memory=self.assigned_memory,
            class_=self.class_,
            description=self.description,
            filter=self.filter,
            hostname=self.hostname,
            icon_id=self.icon_id,
            id=self.id,
            name=self.name,
            tags=self.tags,
            zone=self.zone)

def get_private_host(filter=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.


    The **filter** object supports the following:

      * `conditions` (`list`)
        * `name` (`str`)
        * `values` (`list`)

      * `id` (`str`)
      * `names` (`list`)
      * `tags` (`list`)
    """
    __args__ = dict()


    __args__['filter'] = filter
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getPrivateHost:getPrivateHost', __args__, opts=opts).value

    return AwaitableGetPrivateHostResult(
        assigned_core=__ret__.get('assignedCore'),
        assigned_memory=__ret__.get('assignedMemory'),
        class_=__ret__.get('class'),
        description=__ret__.get('description'),
        filter=__ret__.get('filter'),
        hostname=__ret__.get('hostname'),
        icon_id=__ret__.get('iconId'),
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        tags=__ret__.get('tags'),
        zone=__ret__.get('zone'))
