# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetBucketObjectResult:
    """
    A collection of values returned by getBucketObject.
    """
    def __init__(__self__, access_key=None, body=None, bucket=None, content_type=None, etag=None, http_cache_url=None, http_path_url=None, http_url=None, https_cache_url=None, https_path_url=None, https_url=None, key=None, last_modified=None, secret_key=None, size=None, id=None):
        if access_key and not isinstance(access_key, str):
            raise TypeError("Expected argument 'access_key' to be a str")
        __self__.access_key = access_key
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        __self__.body = body
        """
        String of the value of the bucket object. Set when Content-Type is `"text/*"` or `"application/json"`.
        """
        if bucket and not isinstance(bucket, str):
            raise TypeError("Expected argument 'bucket' to be a str")
        __self__.bucket = bucket
        if content_type and not isinstance(content_type, str):
            raise TypeError("Expected argument 'content_type' to be a str")
        __self__.content_type = content_type
        """
        Content-Type header value of the bucket object.
        """
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        __self__.etag = etag
        """
        ETag of the resource.
        """
        if http_cache_url and not isinstance(http_cache_url, str):
            raise TypeError("Expected argument 'http_cache_url' to be a str")
        __self__.http_cache_url = http_cache_url
        """
        URL for accessing the object via HTTP (type:`cache`).
        """
        if http_path_url and not isinstance(http_path_url, str):
            raise TypeError("Expected argument 'http_path_url' to be a str")
        __self__.http_path_url = http_path_url
        """
        URL for accessing the object via HTTP (type:`path`).
        """
        if http_url and not isinstance(http_url, str):
            raise TypeError("Expected argument 'http_url' to be a str")
        __self__.http_url = http_url
        """
        URL for accessing the object via HTTP (type:`subdomain`).
        """
        if https_cache_url and not isinstance(https_cache_url, str):
            raise TypeError("Expected argument 'https_cache_url' to be a str")
        __self__.https_cache_url = https_cache_url
        """
        URL for accessing the object via HTTPS (type:`cache`)..
        """
        if https_path_url and not isinstance(https_path_url, str):
            raise TypeError("Expected argument 'https_path_url' to be a str")
        __self__.https_path_url = https_path_url
        if https_url and not isinstance(https_url, str):
            raise TypeError("Expected argument 'https_url' to be a str")
        __self__.https_url = https_url
        """
        URL for accessing the object via HTTPS (type:`subdomain`).
        """
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        __self__.key = key
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        __self__.last_modified = last_modified
        """
        Update date of the resource.
        """
        if secret_key and not isinstance(secret_key, str):
            raise TypeError("Expected argument 'secret_key' to be a str")
        __self__.secret_key = secret_key
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        __self__.size = size
        """
        Size of the resource (unit:`byte`).
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
class AwaitableGetBucketObjectResult(GetBucketObjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBucketObjectResult(
            access_key=self.access_key,
            body=self.body,
            bucket=self.bucket,
            content_type=self.content_type,
            etag=self.etag,
            http_cache_url=self.http_cache_url,
            http_path_url=self.http_path_url,
            http_url=self.http_url,
            https_cache_url=self.https_cache_url,
            https_path_url=self.https_path_url,
            https_url=self.https_url,
            key=self.key,
            last_modified=self.last_modified,
            secret_key=self.secret_key,
            size=self.size,
            id=self.id)

def get_bucket_object(access_key=None,bucket=None,key=None,secret_key=None,opts=None):
    """
    Use this data source to retrieve information about a SakuraCloud Bucket Object.
    
    :param str access_key: The access key of bucket. It must be provided, but it can also be sourced from the `SACLOUD_OJS_ACCESS_KEY_ID` or `AWS_ACCESS_KEY_ID` environment variable.
    :param str bucket: The name of bucket.
    :param str key: The key of the bucket object.
    :param str secret_key: The secret key of bucket. It must be provided, but it can also be sourced from the `SACLOUD_OJS_SECRET_ACCESS_KEY` or `AWS_SECRET_ACCESS_KEY` environment variable.

    > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/bucket_object.html.markdown.
    """
    __args__ = dict()

    __args__['accessKey'] = access_key
    __args__['bucket'] = bucket
    __args__['key'] = key
    __args__['secretKey'] = secret_key
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getBucketObject:getBucketObject', __args__, opts=opts).value

    return AwaitableGetBucketObjectResult(
        access_key=__ret__.get('accessKey'),
        body=__ret__.get('body'),
        bucket=__ret__.get('bucket'),
        content_type=__ret__.get('contentType'),
        etag=__ret__.get('etag'),
        http_cache_url=__ret__.get('httpCacheUrl'),
        http_path_url=__ret__.get('httpPathUrl'),
        http_url=__ret__.get('httpUrl'),
        https_cache_url=__ret__.get('httpsCacheUrl'),
        https_path_url=__ret__.get('httpsPathUrl'),
        https_url=__ret__.get('httpsUrl'),
        key=__ret__.get('key'),
        last_modified=__ret__.get('lastModified'),
        secret_key=__ret__.get('secretKey'),
        size=__ret__.get('size'),
        id=__ret__.get('id'))
