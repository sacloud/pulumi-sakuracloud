# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetInternetResult:
    """
    A collection of values returned by getInternet.
    """
    def __init__(__self__, band_width=None, description=None, enable_ipv6=None, filter=None, gateway=None, icon_id=None, id=None, ip_addresses=None, ipv6_network_address=None, ipv6_prefix=None, ipv6_prefix_len=None, max_ip_address=None, min_ip_address=None, name=None, netmask=None, network_address=None, server_ids=None, switch_id=None, tags=None, zone=None):
        if band_width and not isinstance(band_width, float):
            raise TypeError("Expected argument 'band_width' to be a float")
        __self__.band_width = band_width
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if enable_ipv6 and not isinstance(enable_ipv6, bool):
            raise TypeError("Expected argument 'enable_ipv6' to be a bool")
        __self__.enable_ipv6 = enable_ipv6
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        __self__.filter = filter
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        __self__.gateway = gateway
        if icon_id and not isinstance(icon_id, str):
            raise TypeError("Expected argument 'icon_id' to be a str")
        __self__.icon_id = icon_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        __self__.ip_addresses = ip_addresses
        if ipv6_network_address and not isinstance(ipv6_network_address, str):
            raise TypeError("Expected argument 'ipv6_network_address' to be a str")
        __self__.ipv6_network_address = ipv6_network_address
        if ipv6_prefix and not isinstance(ipv6_prefix, str):
            raise TypeError("Expected argument 'ipv6_prefix' to be a str")
        __self__.ipv6_prefix = ipv6_prefix
        if ipv6_prefix_len and not isinstance(ipv6_prefix_len, float):
            raise TypeError("Expected argument 'ipv6_prefix_len' to be a float")
        __self__.ipv6_prefix_len = ipv6_prefix_len
        if max_ip_address and not isinstance(max_ip_address, str):
            raise TypeError("Expected argument 'max_ip_address' to be a str")
        __self__.max_ip_address = max_ip_address
        if min_ip_address and not isinstance(min_ip_address, str):
            raise TypeError("Expected argument 'min_ip_address' to be a str")
        __self__.min_ip_address = min_ip_address
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if netmask and not isinstance(netmask, float):
            raise TypeError("Expected argument 'netmask' to be a float")
        __self__.netmask = netmask
        if network_address and not isinstance(network_address, str):
            raise TypeError("Expected argument 'network_address' to be a str")
        __self__.network_address = network_address
        if server_ids and not isinstance(server_ids, list):
            raise TypeError("Expected argument 'server_ids' to be a list")
        __self__.server_ids = server_ids
        if switch_id and not isinstance(switch_id, str):
            raise TypeError("Expected argument 'switch_id' to be a str")
        __self__.switch_id = switch_id
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetInternetResult(GetInternetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInternetResult(
            band_width=self.band_width,
            description=self.description,
            enable_ipv6=self.enable_ipv6,
            filter=self.filter,
            gateway=self.gateway,
            icon_id=self.icon_id,
            id=self.id,
            ip_addresses=self.ip_addresses,
            ipv6_network_address=self.ipv6_network_address,
            ipv6_prefix=self.ipv6_prefix,
            ipv6_prefix_len=self.ipv6_prefix_len,
            max_ip_address=self.max_ip_address,
            min_ip_address=self.min_ip_address,
            name=self.name,
            netmask=self.netmask,
            network_address=self.network_address,
            server_ids=self.server_ids,
            switch_id=self.switch_id,
            tags=self.tags,
            zone=self.zone)

def get_internet(filter=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.


    The **filter** object supports the following:

      * `conditions` (`list`)
        * `name` (`str`)
        * `values` (`list`)

      * `id` (`str`)
      * `names` (`list`)
      * `tags` (`list`)
    """
    __args__ = dict()


    __args__['filter'] = filter
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getInternet:getInternet', __args__, opts=opts).value

    return AwaitableGetInternetResult(
        band_width=__ret__.get('bandWidth'),
        description=__ret__.get('description'),
        enable_ipv6=__ret__.get('enableIpv6'),
        filter=__ret__.get('filter'),
        gateway=__ret__.get('gateway'),
        icon_id=__ret__.get('iconId'),
        id=__ret__.get('id'),
        ip_addresses=__ret__.get('ipAddresses'),
        ipv6_network_address=__ret__.get('ipv6NetworkAddress'),
        ipv6_prefix=__ret__.get('ipv6Prefix'),
        ipv6_prefix_len=__ret__.get('ipv6PrefixLen'),
        max_ip_address=__ret__.get('maxIpAddress'),
        min_ip_address=__ret__.get('minIpAddress'),
        name=__ret__.get('name'),
        netmask=__ret__.get('netmask'),
        network_address=__ret__.get('networkAddress'),
        server_ids=__ret__.get('serverIds'),
        switch_id=__ret__.get('switchId'),
        tags=__ret__.get('tags'),
        zone=__ret__.get('zone'))
