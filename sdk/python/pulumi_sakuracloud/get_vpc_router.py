# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetVPCRouterResult:
    """
    A collection of values returned by getVPCRouter.
    """
    def __init__(__self__, aliases=None, description=None, dhcp_servers=None, dhcp_static_mappings=None, filters=None, firewalls=None, global_address=None, icon_id=None, interfaces=None, internet_connection=None, ipaddress1=None, ipaddress2=None, l2tps=None, name=None, name_selectors=None, plan=None, port_forwardings=None, pptps=None, site_to_site_vpns=None, static_nats=None, static_routes=None, switch_id=None, syslog_host=None, tag_selectors=None, tags=None, users=None, vip=None, vrid=None, zone=None, id=None):
        if aliases and not isinstance(aliases, list):
            raise TypeError("Expected argument 'aliases' to be a list")
        __self__.aliases = aliases
        """
        The IP address aliase list. Used when plan is in `premium` or `highspec`.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The description of the resource.
        """
        if dhcp_servers and not isinstance(dhcp_servers, list):
            raise TypeError("Expected argument 'dhcp_servers' to be a list")
        __self__.dhcp_servers = dhcp_servers
        if dhcp_static_mappings and not isinstance(dhcp_static_mappings, list):
            raise TypeError("Expected argument 'dhcp_static_mappings' to be a list")
        __self__.dhcp_static_mappings = dhcp_static_mappings
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        __self__.filters = filters
        if firewalls and not isinstance(firewalls, list):
            raise TypeError("Expected argument 'firewalls' to be a list")
        __self__.firewalls = firewalls
        if global_address and not isinstance(global_address, str):
            raise TypeError("Expected argument 'global_address' to be a str")
        __self__.global_address = global_address
        """
        Global IP address of the VPC Router.
        """
        if icon_id and not isinstance(icon_id, str):
            raise TypeError("Expected argument 'icon_id' to be a str")
        __self__.icon_id = icon_id
        """
        The ID of the icon of the resource.
        """
        if interfaces and not isinstance(interfaces, list):
            raise TypeError("Expected argument 'interfaces' to be a list")
        __self__.interfaces = interfaces
        if internet_connection and not isinstance(internet_connection, bool):
            raise TypeError("Expected argument 'internet_connection' to be a bool")
        __self__.internet_connection = internet_connection
        """
        The flag of enable/disable connection from the VPC Router to the Internet.
        """
        if ipaddress1 and not isinstance(ipaddress1, str):
            raise TypeError("Expected argument 'ipaddress1' to be a str")
        __self__.ipaddress1 = ipaddress1
        """
        The primary IP address of the VPC Router.
        """
        if ipaddress2 and not isinstance(ipaddress2, str):
            raise TypeError("Expected argument 'ipaddress2' to be a str")
        __self__.ipaddress2 = ipaddress2
        """
        The secondly IP address of the VPC Router. Used when plan is in `premium` or `highspec`.
        """
        if l2tps and not isinstance(l2tps, list):
            raise TypeError("Expected argument 'l2tps' to be a list")
        __self__.l2tps = l2tps
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if name_selectors and not isinstance(name_selectors, list):
            raise TypeError("Expected argument 'name_selectors' to be a list")
        __self__.name_selectors = name_selectors
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        __self__.plan = plan
        """
        The name of the resource plan. 
        """
        if port_forwardings and not isinstance(port_forwardings, list):
            raise TypeError("Expected argument 'port_forwardings' to be a list")
        __self__.port_forwardings = port_forwardings
        if pptps and not isinstance(pptps, list):
            raise TypeError("Expected argument 'pptps' to be a list")
        __self__.pptps = pptps
        if site_to_site_vpns and not isinstance(site_to_site_vpns, list):
            raise TypeError("Expected argument 'site_to_site_vpns' to be a list")
        __self__.site_to_site_vpns = site_to_site_vpns
        if static_nats and not isinstance(static_nats, list):
            raise TypeError("Expected argument 'static_nats' to be a list")
        __self__.static_nats = static_nats
        if static_routes and not isinstance(static_routes, list):
            raise TypeError("Expected argument 'static_routes' to be a list")
        __self__.static_routes = static_routes
        if switch_id and not isinstance(switch_id, str):
            raise TypeError("Expected argument 'switch_id' to be a str")
        __self__.switch_id = switch_id
        """
        The ID of the Switch connected to the VPC Router (eth0).
        """
        if syslog_host and not isinstance(syslog_host, str):
            raise TypeError("Expected argument 'syslog_host' to be a str")
        __self__.syslog_host = syslog_host
        """
        The destination HostName/IP address to send log.	
        """
        if tag_selectors and not isinstance(tag_selectors, list):
            raise TypeError("Expected argument 'tag_selectors' to be a list")
        __self__.tag_selectors = tag_selectors
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        """
        The tag list of the resources.
        """
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        __self__.users = users
        if vip and not isinstance(vip, str):
            raise TypeError("Expected argument 'vip' to be a str")
        __self__.vip = vip
        """
        Virtual IP address of the VPC Router. Used when plan is in `premium` or `highspec`.
        """
        if vrid and not isinstance(vrid, float):
            raise TypeError("Expected argument 'vrid' to be a float")
        __self__.vrid = vrid
        """
        VRID used when plan is in `premium` or `highspec`.
        """
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
        """
        The ID of the zone to which the resource belongs.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
class AwaitableGetVPCRouterResult(GetVPCRouterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVPCRouterResult(
            aliases=self.aliases,
            description=self.description,
            dhcp_servers=self.dhcp_servers,
            dhcp_static_mappings=self.dhcp_static_mappings,
            filters=self.filters,
            firewalls=self.firewalls,
            global_address=self.global_address,
            icon_id=self.icon_id,
            interfaces=self.interfaces,
            internet_connection=self.internet_connection,
            ipaddress1=self.ipaddress1,
            ipaddress2=self.ipaddress2,
            l2tps=self.l2tps,
            name=self.name,
            name_selectors=self.name_selectors,
            plan=self.plan,
            port_forwardings=self.port_forwardings,
            pptps=self.pptps,
            site_to_site_vpns=self.site_to_site_vpns,
            static_nats=self.static_nats,
            static_routes=self.static_routes,
            switch_id=self.switch_id,
            syslog_host=self.syslog_host,
            tag_selectors=self.tag_selectors,
            tags=self.tags,
            users=self.users,
            vip=self.vip,
            vrid=self.vrid,
            zone=self.zone,
            id=self.id)

def get_vpc_router(filters=None,name_selectors=None,tag_selectors=None,zone=None,opts=None):
    """
    Use this data source to retrieve information about a SakuraCloud VPC Router.
    
    :param list filters: The map of filter key and value.
    :param list name_selectors: The list of names to filtering.
    :param list tag_selectors: The list of tags to filtering.
    :param str zone: The ID of the zone.
    
    The **filters** object supports the following:
    
      * `name` (`str`) - The name of the resource.
      * `values` (`list`)

    > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/vpc_router.html.markdown.
    """
    __args__ = dict()

    __args__['filters'] = filters
    __args__['nameSelectors'] = name_selectors
    __args__['tagSelectors'] = tag_selectors
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getVPCRouter:getVPCRouter', __args__, opts=opts).value

    return AwaitableGetVPCRouterResult(
        aliases=__ret__.get('aliases'),
        description=__ret__.get('description'),
        dhcp_servers=__ret__.get('dhcpServers'),
        dhcp_static_mappings=__ret__.get('dhcpStaticMappings'),
        filters=__ret__.get('filters'),
        firewalls=__ret__.get('firewalls'),
        global_address=__ret__.get('globalAddress'),
        icon_id=__ret__.get('iconId'),
        interfaces=__ret__.get('interfaces'),
        internet_connection=__ret__.get('internetConnection'),
        ipaddress1=__ret__.get('ipaddress1'),
        ipaddress2=__ret__.get('ipaddress2'),
        l2tps=__ret__.get('l2tps'),
        name=__ret__.get('name'),
        name_selectors=__ret__.get('nameSelectors'),
        plan=__ret__.get('plan'),
        port_forwardings=__ret__.get('portForwardings'),
        pptps=__ret__.get('pptps'),
        site_to_site_vpns=__ret__.get('siteToSiteVpns'),
        static_nats=__ret__.get('staticNats'),
        static_routes=__ret__.get('staticRoutes'),
        switch_id=__ret__.get('switchId'),
        syslog_host=__ret__.get('syslogHost'),
        tag_selectors=__ret__.get('tagSelectors'),
        tags=__ret__.get('tags'),
        users=__ret__.get('users'),
        vip=__ret__.get('vip'),
        vrid=__ret__.get('vrid'),
        zone=__ret__.get('zone'),
        id=__ret__.get('id'))
