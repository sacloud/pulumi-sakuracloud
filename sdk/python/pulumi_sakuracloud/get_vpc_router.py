# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetVPCRouterResult:
    """
    A collection of values returned by getVPCRouter.
    """
    def __init__(__self__, description=None, dhcp_servers=None, dhcp_static_mappings=None, filter=None, firewalls=None, icon_id=None, id=None, internet_connection=None, l2tps=None, name=None, plan=None, port_forwardings=None, pptps=None, private_network_interfaces=None, public_ip=None, public_netmask=None, public_network_interfaces=None, site_to_site_vpns=None, static_nats=None, static_routes=None, syslog_host=None, tags=None, users=None, zone=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if dhcp_servers and not isinstance(dhcp_servers, list):
            raise TypeError("Expected argument 'dhcp_servers' to be a list")
        __self__.dhcp_servers = dhcp_servers
        if dhcp_static_mappings and not isinstance(dhcp_static_mappings, list):
            raise TypeError("Expected argument 'dhcp_static_mappings' to be a list")
        __self__.dhcp_static_mappings = dhcp_static_mappings
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        __self__.filter = filter
        if firewalls and not isinstance(firewalls, list):
            raise TypeError("Expected argument 'firewalls' to be a list")
        __self__.firewalls = firewalls
        if icon_id and not isinstance(icon_id, str):
            raise TypeError("Expected argument 'icon_id' to be a str")
        __self__.icon_id = icon_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if internet_connection and not isinstance(internet_connection, bool):
            raise TypeError("Expected argument 'internet_connection' to be a bool")
        __self__.internet_connection = internet_connection
        if l2tps and not isinstance(l2tps, list):
            raise TypeError("Expected argument 'l2tps' to be a list")
        __self__.l2tps = l2tps
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if plan and not isinstance(plan, str):
            raise TypeError("Expected argument 'plan' to be a str")
        __self__.plan = plan
        if port_forwardings and not isinstance(port_forwardings, list):
            raise TypeError("Expected argument 'port_forwardings' to be a list")
        __self__.port_forwardings = port_forwardings
        if pptps and not isinstance(pptps, list):
            raise TypeError("Expected argument 'pptps' to be a list")
        __self__.pptps = pptps
        if private_network_interfaces and not isinstance(private_network_interfaces, list):
            raise TypeError("Expected argument 'private_network_interfaces' to be a list")
        __self__.private_network_interfaces = private_network_interfaces
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        __self__.public_ip = public_ip
        if public_netmask and not isinstance(public_netmask, float):
            raise TypeError("Expected argument 'public_netmask' to be a float")
        __self__.public_netmask = public_netmask
        if public_network_interfaces and not isinstance(public_network_interfaces, list):
            raise TypeError("Expected argument 'public_network_interfaces' to be a list")
        __self__.public_network_interfaces = public_network_interfaces
        if site_to_site_vpns and not isinstance(site_to_site_vpns, list):
            raise TypeError("Expected argument 'site_to_site_vpns' to be a list")
        __self__.site_to_site_vpns = site_to_site_vpns
        if static_nats and not isinstance(static_nats, list):
            raise TypeError("Expected argument 'static_nats' to be a list")
        __self__.static_nats = static_nats
        if static_routes and not isinstance(static_routes, list):
            raise TypeError("Expected argument 'static_routes' to be a list")
        __self__.static_routes = static_routes
        if syslog_host and not isinstance(syslog_host, str):
            raise TypeError("Expected argument 'syslog_host' to be a str")
        __self__.syslog_host = syslog_host
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        __self__.users = users
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetVPCRouterResult(GetVPCRouterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVPCRouterResult(
            description=self.description,
            dhcp_servers=self.dhcp_servers,
            dhcp_static_mappings=self.dhcp_static_mappings,
            filter=self.filter,
            firewalls=self.firewalls,
            icon_id=self.icon_id,
            id=self.id,
            internet_connection=self.internet_connection,
            l2tps=self.l2tps,
            name=self.name,
            plan=self.plan,
            port_forwardings=self.port_forwardings,
            pptps=self.pptps,
            private_network_interfaces=self.private_network_interfaces,
            public_ip=self.public_ip,
            public_netmask=self.public_netmask,
            public_network_interfaces=self.public_network_interfaces,
            site_to_site_vpns=self.site_to_site_vpns,
            static_nats=self.static_nats,
            static_routes=self.static_routes,
            syslog_host=self.syslog_host,
            tags=self.tags,
            users=self.users,
            zone=self.zone)

def get_vpc_router(filter=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.


    The **filter** object supports the following:

      * `conditions` (`list`)
        * `name` (`str`)
        * `values` (`list`)

      * `id` (`str`)
      * `names` (`list`)
      * `tags` (`list`)
    """
    __args__ = dict()


    __args__['filter'] = filter
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getVPCRouter:getVPCRouter', __args__, opts=opts).value

    return AwaitableGetVPCRouterResult(
        description=__ret__.get('description'),
        dhcp_servers=__ret__.get('dhcpServers'),
        dhcp_static_mappings=__ret__.get('dhcpStaticMappings'),
        filter=__ret__.get('filter'),
        firewalls=__ret__.get('firewalls'),
        icon_id=__ret__.get('iconId'),
        id=__ret__.get('id'),
        internet_connection=__ret__.get('internetConnection'),
        l2tps=__ret__.get('l2tps'),
        name=__ret__.get('name'),
        plan=__ret__.get('plan'),
        port_forwardings=__ret__.get('portForwardings'),
        pptps=__ret__.get('pptps'),
        private_network_interfaces=__ret__.get('privateNetworkInterfaces'),
        public_ip=__ret__.get('publicIp'),
        public_netmask=__ret__.get('publicNetmask'),
        public_network_interfaces=__ret__.get('publicNetworkInterfaces'),
        site_to_site_vpns=__ret__.get('siteToSiteVpns'),
        static_nats=__ret__.get('staticNats'),
        static_routes=__ret__.get('staticRoutes'),
        syslog_host=__ret__.get('syslogHost'),
        tags=__ret__.get('tags'),
        users=__ret__.get('users'),
        zone=__ret__.get('zone'))
