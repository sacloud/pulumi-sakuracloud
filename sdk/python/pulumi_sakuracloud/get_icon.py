# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIconResult',
    'AwaitableGetIconResult',
    'get_icon',
    'get_icon_output',
]

@pulumi.output_type
class GetIconResult:
    """
    A collection of values returned by getIcon.
    """
    def __init__(__self__, filter=None, id=None, name=None, tags=None, url=None):
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetIconFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Icon.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        Any tags assigned to the Icon.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL for getting the icon's raw data.
        """
        return pulumi.get(self, "url")


class AwaitableGetIconResult(GetIconResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIconResult(
            filter=self.filter,
            id=self.id,
            name=self.name,
            tags=self.tags,
            url=self.url)


def get_icon(filter: Optional[pulumi.InputType['GetIconFilterArgs']] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIconResult:
    """
    Get information about an existing Icon.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sakuracloud as sakuracloud

    foobar = sakuracloud.get_icon(filter=sakuracloud.GetIconFilterArgs(
        names=["foobar"],
    ))
    ```


    :param pulumi.InputType['GetIconFilterArgs'] filter: One or more values used for filtering, as defined below.
    """
    __args__ = dict()
    __args__['filter'] = filter
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getIcon:getIcon', __args__, opts=opts, typ=GetIconResult).value

    return AwaitableGetIconResult(
        filter=__ret__.filter,
        id=__ret__.id,
        name=__ret__.name,
        tags=__ret__.tags,
        url=__ret__.url)


@_utilities.lift_output_func(get_icon)
def get_icon_output(filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetIconFilterArgs']]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIconResult]:
    """
    Get information about an existing Icon.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sakuracloud as sakuracloud

    foobar = sakuracloud.get_icon(filter=sakuracloud.GetIconFilterArgs(
        names=["foobar"],
    ))
    ```


    :param pulumi.InputType['GetIconFilterArgs'] filter: One or more values used for filtering, as defined below.
    """
    ...
