# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetProxyLBResult:
    """
    A collection of values returned by getProxyLB.
    """
    def __init__(__self__, bind_ports=None, certificates=None, description=None, filter=None, fqdn=None, health_checks=None, icon_id=None, id=None, name=None, plan=None, proxy_networks=None, region=None, rules=None, servers=None, sorry_servers=None, sticky_session=None, tags=None, timeout=None, vip=None, vip_failover=None):
        if bind_ports and not isinstance(bind_ports, list):
            raise TypeError("Expected argument 'bind_ports' to be a list")
        __self__.bind_ports = bind_ports
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        __self__.certificates = certificates
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        __self__.filter = filter
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        __self__.fqdn = fqdn
        if health_checks and not isinstance(health_checks, list):
            raise TypeError("Expected argument 'health_checks' to be a list")
        __self__.health_checks = health_checks
        if icon_id and not isinstance(icon_id, str):
            raise TypeError("Expected argument 'icon_id' to be a str")
        __self__.icon_id = icon_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if plan and not isinstance(plan, float):
            raise TypeError("Expected argument 'plan' to be a float")
        __self__.plan = plan
        if proxy_networks and not isinstance(proxy_networks, list):
            raise TypeError("Expected argument 'proxy_networks' to be a list")
        __self__.proxy_networks = proxy_networks
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        __self__.region = region
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        __self__.rules = rules
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        __self__.servers = servers
        if sorry_servers and not isinstance(sorry_servers, list):
            raise TypeError("Expected argument 'sorry_servers' to be a list")
        __self__.sorry_servers = sorry_servers
        if sticky_session and not isinstance(sticky_session, bool):
            raise TypeError("Expected argument 'sticky_session' to be a bool")
        __self__.sticky_session = sticky_session
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        if timeout and not isinstance(timeout, float):
            raise TypeError("Expected argument 'timeout' to be a float")
        __self__.timeout = timeout
        if vip and not isinstance(vip, str):
            raise TypeError("Expected argument 'vip' to be a str")
        __self__.vip = vip
        if vip_failover and not isinstance(vip_failover, bool):
            raise TypeError("Expected argument 'vip_failover' to be a bool")
        __self__.vip_failover = vip_failover
class AwaitableGetProxyLBResult(GetProxyLBResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxyLBResult(
            bind_ports=self.bind_ports,
            certificates=self.certificates,
            description=self.description,
            filter=self.filter,
            fqdn=self.fqdn,
            health_checks=self.health_checks,
            icon_id=self.icon_id,
            id=self.id,
            name=self.name,
            plan=self.plan,
            proxy_networks=self.proxy_networks,
            region=self.region,
            rules=self.rules,
            servers=self.servers,
            sorry_servers=self.sorry_servers,
            sticky_session=self.sticky_session,
            tags=self.tags,
            timeout=self.timeout,
            vip=self.vip,
            vip_failover=self.vip_failover)

def get_proxy_lb(filter=None,opts=None):
    """
    Use this data source to access information about an existing resource.


    The **filter** object supports the following:

      * `conditions` (`list`)
        * `name` (`str`)
        * `values` (`list`)

      * `id` (`str`)
      * `names` (`list`)
      * `tags` (`list`)
    """
    __args__ = dict()


    __args__['filter'] = filter
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getProxyLB:getProxyLB', __args__, opts=opts).value

    return AwaitableGetProxyLBResult(
        bind_ports=__ret__.get('bindPorts'),
        certificates=__ret__.get('certificates'),
        description=__ret__.get('description'),
        filter=__ret__.get('filter'),
        fqdn=__ret__.get('fqdn'),
        health_checks=__ret__.get('healthChecks'),
        icon_id=__ret__.get('iconId'),
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        plan=__ret__.get('plan'),
        proxy_networks=__ret__.get('proxyNetworks'),
        region=__ret__.get('region'),
        rules=__ret__.get('rules'),
        servers=__ret__.get('servers'),
        sorry_servers=__ret__.get('sorryServers'),
        sticky_session=__ret__.get('stickySession'),
        tags=__ret__.get('tags'),
        timeout=__ret__.get('timeout'),
        vip=__ret__.get('vip'),
        vip_failover=__ret__.get('vipFailover'))
