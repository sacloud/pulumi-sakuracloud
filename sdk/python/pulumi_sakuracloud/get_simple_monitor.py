# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetSimpleMonitorResult:
    """
    A collection of values returned by getSimpleMonitor.
    """
    def __init__(__self__, delay_loop=None, description=None, enabled=None, filter=None, health_checks=None, icon_id=None, id=None, notify_email_enabled=None, notify_email_html=None, notify_interval=None, notify_slack_enabled=None, notify_slack_webhook=None, tags=None, target=None):
        if delay_loop and not isinstance(delay_loop, float):
            raise TypeError("Expected argument 'delay_loop' to be a float")
        __self__.delay_loop = delay_loop
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        __self__.enabled = enabled
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        __self__.filter = filter
        if health_checks and not isinstance(health_checks, list):
            raise TypeError("Expected argument 'health_checks' to be a list")
        __self__.health_checks = health_checks
        if icon_id and not isinstance(icon_id, str):
            raise TypeError("Expected argument 'icon_id' to be a str")
        __self__.icon_id = icon_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if notify_email_enabled and not isinstance(notify_email_enabled, bool):
            raise TypeError("Expected argument 'notify_email_enabled' to be a bool")
        __self__.notify_email_enabled = notify_email_enabled
        if notify_email_html and not isinstance(notify_email_html, bool):
            raise TypeError("Expected argument 'notify_email_html' to be a bool")
        __self__.notify_email_html = notify_email_html
        if notify_interval and not isinstance(notify_interval, float):
            raise TypeError("Expected argument 'notify_interval' to be a float")
        __self__.notify_interval = notify_interval
        if notify_slack_enabled and not isinstance(notify_slack_enabled, bool):
            raise TypeError("Expected argument 'notify_slack_enabled' to be a bool")
        __self__.notify_slack_enabled = notify_slack_enabled
        if notify_slack_webhook and not isinstance(notify_slack_webhook, str):
            raise TypeError("Expected argument 'notify_slack_webhook' to be a str")
        __self__.notify_slack_webhook = notify_slack_webhook
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        __self__.tags = tags
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        __self__.target = target
class AwaitableGetSimpleMonitorResult(GetSimpleMonitorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSimpleMonitorResult(
            delay_loop=self.delay_loop,
            description=self.description,
            enabled=self.enabled,
            filter=self.filter,
            health_checks=self.health_checks,
            icon_id=self.icon_id,
            id=self.id,
            notify_email_enabled=self.notify_email_enabled,
            notify_email_html=self.notify_email_html,
            notify_interval=self.notify_interval,
            notify_slack_enabled=self.notify_slack_enabled,
            notify_slack_webhook=self.notify_slack_webhook,
            tags=self.tags,
            target=self.target)

def get_simple_monitor(filter=None,opts=None):
    """
    Use this data source to access information about an existing resource.


    The **filter** object supports the following:

      * `conditions` (`list`)
        * `name` (`str`)
        * `values` (`list`)

      * `id` (`str`)
      * `names` (`list`)
      * `tags` (`list`)
    """
    __args__ = dict()


    __args__['filter'] = filter
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getSimpleMonitor:getSimpleMonitor', __args__, opts=opts).value

    return AwaitableGetSimpleMonitorResult(
        delay_loop=__ret__.get('delayLoop'),
        description=__ret__.get('description'),
        enabled=__ret__.get('enabled'),
        filter=__ret__.get('filter'),
        health_checks=__ret__.get('healthChecks'),
        icon_id=__ret__.get('iconId'),
        id=__ret__.get('id'),
        notify_email_enabled=__ret__.get('notifyEmailEnabled'),
        notify_email_html=__ret__.get('notifyEmailHtml'),
        notify_interval=__ret__.get('notifyInterval'),
        notify_slack_enabled=__ret__.get('notifySlackEnabled'),
        notify_slack_webhook=__ret__.get('notifySlackWebhook'),
        tags=__ret__.get('tags'),
        target=__ret__.get('target'))
