# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['CertificateAuthority']


class CertificateAuthority(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityClientArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityServerArgs']]]]] = None,
                 subject: Optional[pulumi.Input[pulumi.InputType['CertificateAuthoritySubjectArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 validity_period_hours: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a SakuraCloud sakuracloud_certificate_authority.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityClientArgs']]]] clients: One or more `client` blocks as defined below.
        :param pulumi.Input[str] description: The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].
        :param pulumi.Input[str] icon_id: The icon id to attach to the Certificate Authority.
        :param pulumi.Input[str] name: The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityServerArgs']]]] servers: One or more `server` blocks as defined below.
        :param pulumi.Input[pulumi.InputType['CertificateAuthoritySubjectArgs']] subject: A `subject` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Any tags to assign to the Certificate Authority.
        :param pulumi.Input[int] validity_period_hours: The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['clients'] = clients
            __props__['description'] = description
            __props__['icon_id'] = icon_id
            __props__['name'] = name
            __props__['servers'] = servers
            if subject is None and not opts.urn:
                raise TypeError("Missing required property 'subject'")
            __props__['subject'] = subject
            __props__['tags'] = tags
            if validity_period_hours is None and not opts.urn:
                raise TypeError("Missing required property 'validity_period_hours'")
            __props__['validity_period_hours'] = validity_period_hours
            __props__['certificate'] = None
            __props__['crl_url'] = None
            __props__['not_after'] = None
            __props__['not_before'] = None
            __props__['serial_number'] = None
        super(CertificateAuthority, __self__).__init__(
            'sakuracloud:index/certificateAuthority:CertificateAuthority',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityClientArgs']]]]] = None,
            crl_url: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            icon_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            not_after: Optional[pulumi.Input[str]] = None,
            not_before: Optional[pulumi.Input[str]] = None,
            serial_number: Optional[pulumi.Input[str]] = None,
            servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityServerArgs']]]]] = None,
            subject: Optional[pulumi.Input[pulumi.InputType['CertificateAuthoritySubjectArgs']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            validity_period_hours: Optional[pulumi.Input[int]] = None) -> 'CertificateAuthority':
        """
        Get an existing CertificateAuthority resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: The body of the CA's certificate in PEM format.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityClientArgs']]]] clients: One or more `client` blocks as defined below.
        :param pulumi.Input[str] crl_url: The URL of the CRL.
        :param pulumi.Input[str] description: The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].
        :param pulumi.Input[str] icon_id: The icon id to attach to the Certificate Authority.
        :param pulumi.Input[str] name: The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].
        :param pulumi.Input[str] not_after: The date on which the certificate validity period ends, in RFC3339 format.
        :param pulumi.Input[str] not_before: The date on which the certificate validity period begins, in RFC3339 format.
        :param pulumi.Input[str] serial_number: The body of the CA's certificate in PEM format.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateAuthorityServerArgs']]]] servers: One or more `server` blocks as defined below.
        :param pulumi.Input[pulumi.InputType['CertificateAuthoritySubjectArgs']] subject: A `subject` block as defined below. Changing this forces a new resource to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Any tags to assign to the Certificate Authority.
        :param pulumi.Input[int] validity_period_hours: The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["certificate"] = certificate
        __props__["clients"] = clients
        __props__["crl_url"] = crl_url
        __props__["description"] = description
        __props__["icon_id"] = icon_id
        __props__["name"] = name
        __props__["not_after"] = not_after
        __props__["not_before"] = not_before
        __props__["serial_number"] = serial_number
        __props__["servers"] = servers
        __props__["subject"] = subject
        __props__["tags"] = tags
        __props__["validity_period_hours"] = validity_period_hours
        return CertificateAuthority(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        The body of the CA's certificate in PEM format.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def clients(self) -> pulumi.Output[Optional[Sequence['outputs.CertificateAuthorityClient']]]:
        """
        One or more `client` blocks as defined below.
        """
        return pulumi.get(self, "clients")

    @property
    @pulumi.getter(name="crlUrl")
    def crl_url(self) -> pulumi.Output[str]:
        """
        The URL of the CRL.
        """
        return pulumi.get(self, "crl_url")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="iconId")
    def icon_id(self) -> pulumi.Output[Optional[str]]:
        """
        The icon id to attach to the Certificate Authority.
        """
        return pulumi.get(self, "icon_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> pulumi.Output[str]:
        """
        The date on which the certificate validity period ends, in RFC3339 format.
        """
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> pulumi.Output[str]:
        """
        The date on which the certificate validity period begins, in RFC3339 format.
        """
        return pulumi.get(self, "not_before")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> pulumi.Output[str]:
        """
        The body of the CA's certificate in PEM format.
        """
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Optional[Sequence['outputs.CertificateAuthorityServer']]]:
        """
        One or more `server` blocks as defined below.
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Output['outputs.CertificateAuthoritySubject']:
        """
        A `subject` block as defined below. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Any tags to assign to the Certificate Authority.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="validityPeriodHours")
    def validity_period_hours(self) -> pulumi.Output[int]:
        """
        The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.
        """
        return pulumi.get(self, "validity_period_hours")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

