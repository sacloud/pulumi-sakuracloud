# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetSubnetResult:
    """
    A collection of values returned by getSubnet.
    """
    def __init__(__self__, id=None, index=None, internet_id=None, ip_addresses=None, max_ip_address=None, min_ip_address=None, netmask=None, network_address=None, next_hop=None, switch_id=None, zone=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
        if index and not isinstance(index, float):
            raise TypeError("Expected argument 'index' to be a float")
        __self__.index = index
        if internet_id and not isinstance(internet_id, str):
            raise TypeError("Expected argument 'internet_id' to be a str")
        __self__.internet_id = internet_id
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        __self__.ip_addresses = ip_addresses
        if max_ip_address and not isinstance(max_ip_address, str):
            raise TypeError("Expected argument 'max_ip_address' to be a str")
        __self__.max_ip_address = max_ip_address
        if min_ip_address and not isinstance(min_ip_address, str):
            raise TypeError("Expected argument 'min_ip_address' to be a str")
        __self__.min_ip_address = min_ip_address
        if netmask and not isinstance(netmask, float):
            raise TypeError("Expected argument 'netmask' to be a float")
        __self__.netmask = netmask
        if network_address and not isinstance(network_address, str):
            raise TypeError("Expected argument 'network_address' to be a str")
        __self__.network_address = network_address
        if next_hop and not isinstance(next_hop, str):
            raise TypeError("Expected argument 'next_hop' to be a str")
        __self__.next_hop = next_hop
        if switch_id and not isinstance(switch_id, str):
            raise TypeError("Expected argument 'switch_id' to be a str")
        __self__.switch_id = switch_id
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
class AwaitableGetSubnetResult(GetSubnetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubnetResult(
            id=self.id,
            index=self.index,
            internet_id=self.internet_id,
            ip_addresses=self.ip_addresses,
            max_ip_address=self.max_ip_address,
            min_ip_address=self.min_ip_address,
            netmask=self.netmask,
            network_address=self.network_address,
            next_hop=self.next_hop,
            switch_id=self.switch_id,
            zone=self.zone)

def get_subnet(index=None,internet_id=None,zone=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['index'] = index
    __args__['internetId'] = internet_id
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getSubnet:getSubnet', __args__, opts=opts).value

    return AwaitableGetSubnetResult(
        id=__ret__.get('id'),
        index=__ret__.get('index'),
        internet_id=__ret__.get('internetId'),
        ip_addresses=__ret__.get('ipAddresses'),
        max_ip_address=__ret__.get('maxIpAddress'),
        min_ip_address=__ret__.get('minIpAddress'),
        netmask=__ret__.get('netmask'),
        network_address=__ret__.get('networkAddress'),
        next_hop=__ret__.get('nextHop'),
        switch_id=__ret__.get('switchId'),
        zone=__ret__.get('zone'))
