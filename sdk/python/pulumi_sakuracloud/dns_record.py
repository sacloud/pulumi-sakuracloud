# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class DNSRecord(pulumi.CustomResource):
    dns_id: pulumi.Output[str]
    """
    The ID of DNS zones to which the Record belongs.
    """
    name: pulumi.Output[str]
    """
    The hostname of target Record. If "@" is specified, it indicates own zone.
    """
    port: pulumi.Output[float]
    """
    The port number used when `type` is `SRV`. 
    """
    priority: pulumi.Output[float]
    """
    The priority used when `type` is `MX` or `SRV`.
    """
    ttl: pulumi.Output[float]
    """
    The ttl value of the Record (unit:`second`). 
    """
    type: pulumi.Output[str]
    """
    The Record type.  
    Valid value is one of the following: [ "A" / "AAAA" / "CNAME" / "NS" / "MX" / "TXT" / "SRV" / "CAA"]
    """
    value: pulumi.Output[str]
    """
    The value of the Record. 
    """
    weight: pulumi.Output[float]
    """
    The weight used when `type` is `SRV`.
    """
    def __init__(__self__, resource_name, opts=None, dns_id=None, name=None, port=None, priority=None, ttl=None, type=None, value=None, weight=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a SakuraCloud DNS Record resource. This can be used to create and delete DNS Records.
        
        ## Import (not supported)
        
        Import of DNS Record is not supported.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dns_id: The ID of DNS zones to which the Record belongs.
        :param pulumi.Input[str] name: The hostname of target Record. If "@" is specified, it indicates own zone.
        :param pulumi.Input[float] port: The port number used when `type` is `SRV`. 
        :param pulumi.Input[float] priority: The priority used when `type` is `MX` or `SRV`.
        :param pulumi.Input[float] ttl: The ttl value of the Record (unit:`second`). 
        :param pulumi.Input[str] type: The Record type.  
               Valid value is one of the following: [ "A" / "AAAA" / "CNAME" / "NS" / "MX" / "TXT" / "SRV" / "CAA"]
        :param pulumi.Input[str] value: The value of the Record. 
        :param pulumi.Input[float] weight: The weight used when `type` is `SRV`.

        > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/dns_record.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if dns_id is None:
                raise TypeError("Missing required property 'dns_id'")
            __props__['dns_id'] = dns_id
            __props__['name'] = name
            __props__['port'] = port
            __props__['priority'] = priority
            __props__['ttl'] = ttl
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            if value is None:
                raise TypeError("Missing required property 'value'")
            __props__['value'] = value
            __props__['weight'] = weight
        super(DNSRecord, __self__).__init__(
            'sakuracloud:index/dNSRecord:DNSRecord',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, dns_id=None, name=None, port=None, priority=None, ttl=None, type=None, value=None, weight=None):
        """
        Get an existing DNSRecord resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dns_id: The ID of DNS zones to which the Record belongs.
        :param pulumi.Input[str] name: The hostname of target Record. If "@" is specified, it indicates own zone.
        :param pulumi.Input[float] port: The port number used when `type` is `SRV`. 
        :param pulumi.Input[float] priority: The priority used when `type` is `MX` or `SRV`.
        :param pulumi.Input[float] ttl: The ttl value of the Record (unit:`second`). 
        :param pulumi.Input[str] type: The Record type.  
               Valid value is one of the following: [ "A" / "AAAA" / "CNAME" / "NS" / "MX" / "TXT" / "SRV" / "CAA"]
        :param pulumi.Input[str] value: The value of the Record. 
        :param pulumi.Input[float] weight: The weight used when `type` is `SRV`.

        > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/dns_record.html.markdown.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["dns_id"] = dns_id
        __props__["name"] = name
        __props__["port"] = port
        __props__["priority"] = priority
        __props__["ttl"] = ttl
        __props__["type"] = type
        __props__["value"] = value
        __props__["weight"] = weight
        return DNSRecord(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

