# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetPacketFilterResult:
    """
    A collection of values returned by getPacketFilter.
    """
    def __init__(__self__, description=None, expressions=None, filters=None, name=None, name_selectors=None, zone=None, id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        The description of the expression.
        """
        if expressions and not isinstance(expressions, list):
            raise TypeError("Expected argument 'expressions' to be a list")
        __self__.expressions = expressions
        """
        List of filter-expression. It contains some attributes to Filter Expressions.
        """
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        __self__.filters = filters
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the resource.
        """
        if name_selectors and not isinstance(name_selectors, list):
            raise TypeError("Expected argument 'name_selectors' to be a list")
        __self__.name_selectors = name_selectors
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        __self__.zone = zone
        """
        The ID of the zone to which the resource belongs.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """
class AwaitableGetPacketFilterResult(GetPacketFilterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPacketFilterResult(
            description=self.description,
            expressions=self.expressions,
            filters=self.filters,
            name=self.name,
            name_selectors=self.name_selectors,
            zone=self.zone,
            id=self.id)

def get_packet_filter(expressions=None,filters=None,name_selectors=None,zone=None,opts=None):
    """
    Use this data source to retrieve information about a SakuraCloud Packet Filter.
    
    :param list filters: The map of filter key and value.
    :param list name_selectors: The list of names to filtering.
    :param str zone: The ID of the zone.
    
    The **expressions** object supports the following:
    
      * `allow` (`bool`) - The flag to allow packets. Default value is `true`. 
      * `description` (`str`) - The description of the expression.
      * `dest_port` (`str`) - The destination port (range).
      * `protocol` (`str`) - The target protocol.
      * `source_nw` (`str`) - The source network address (range).
      * `source_port` (`str`) - The source port (range).
    
    The **filters** object supports the following:
    
      * `name` (`str`) - The name of the resource.
      * `values` (`list`)

    > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/d/packet_filter.html.markdown.
    """
    __args__ = dict()

    __args__['expressions'] = expressions
    __args__['filters'] = filters
    __args__['nameSelectors'] = name_selectors
    __args__['zone'] = zone
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('sakuracloud:index/getPacketFilter:getPacketFilter', __args__, opts=opts).value

    return AwaitableGetPacketFilterResult(
        description=__ret__.get('description'),
        expressions=__ret__.get('expressions'),
        filters=__ret__.get('filters'),
        name=__ret__.get('name'),
        name_selectors=__ret__.get('nameSelectors'),
        zone=__ret__.get('zone'),
        id=__ret__.get('id'))
