# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

# Export this package's modules as members:
from .archive import *
from .archive_share import *
from .auto_backup import *
from .bridge import *
from .bucket_object import *
from .cdrom import *
from .container_registry import *
from .database import *
from .database_read_replica import *
from .disk import *
from .dns import *
from .dns_record import *
from .esme import *
from .get_archive import *
from .get_bridge import *
from .get_bucket_object import *
from .get_cdrom import *
from .get_container_registry import *
from .get_database import *
from .get_disk import *
from .get_dns import *
from .get_esme import *
from .get_gslb import *
from .get_icon import *
from .get_internet import *
from .get_load_balancer import *
from .get_local_router import *
from .get_nfs import *
from .get_note import *
from .get_packet_filter import *
from .get_private_host import *
from .get_proxy_lb import *
from .get_server import *
from .get_server_vnc_info import *
from .get_simple_monitor import *
from .get_ssh_key import *
from .get_subnet import *
from .get_switch import *
from .get_vpc_router import *
from .get_web_accel import *
from .get_zone import *
from .gslb import *
from .i_pv4_ptr import *
from .icon import *
from .internet import *
from .load_balancer import *
from .local_router import *
from .mobile_gateway import *
from .nfs import *
from .note import *
from .packet_filter import *
from .packet_filter_rule import *
from .private_host import *
from .provider import *
from .proxy_lb import *
from .proxy_lbacme import *
from .server import *
from .sim import *
from .simple_monitor import *
from .ssh_key import *
from .ssh_key_gen import *
from .subnet import *
from .switch import *
from .vpc_router import *
from .web_accel_certificate import *
from ._inputs import *
from . import outputs

# Make subpackages available:
from . import (
    config,
)

def _register_module():
    import pulumi
    from . import _utilities


    class Module(pulumi.runtime.ResourceModule):
        _version = _utilities.get_semver_version()

        def version(self):
            return Module._version

        def construct(self, name: str, typ: str, urn: str) -> pulumi.Resource:
            if typ == "sakuracloud:index/archive:Archive":
                return Archive(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/archiveShare:ArchiveShare":
                return ArchiveShare(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/autoBackup:AutoBackup":
                return AutoBackup(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/bridge:Bridge":
                return Bridge(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/bucketObject:BucketObject":
                return BucketObject(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/cDROM:CDROM":
                return CDROM(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/containerRegistry:ContainerRegistry":
                return ContainerRegistry(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/dNS:DNS":
                return DNS(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/dNSRecord:DNSRecord":
                return DNSRecord(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/database:Database":
                return Database(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/databaseReadReplica:DatabaseReadReplica":
                return DatabaseReadReplica(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/disk:Disk":
                return Disk(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/eSME:ESME":
                return ESME(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/gSLB:GSLB":
                return GSLB(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/iPv4Ptr:IPv4Ptr":
                return IPv4Ptr(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/icon:Icon":
                return Icon(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/internet:Internet":
                return Internet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/loadBalancer:LoadBalancer":
                return LoadBalancer(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/localRouter:LocalRouter":
                return LocalRouter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/mobileGateway:MobileGateway":
                return MobileGateway(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/nFS:NFS":
                return NFS(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/note:Note":
                return Note(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/packetFilter:PacketFilter":
                return PacketFilter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/packetFilterRule:PacketFilterRule":
                return PacketFilterRule(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/privateHost:PrivateHost":
                return PrivateHost(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/proxyLB:ProxyLB":
                return ProxyLB(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/proxyLBACME:ProxyLBACME":
                return ProxyLBACME(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/sIM:SIM":
                return SIM(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/sSHKey:SSHKey":
                return SSHKey(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/sSHKeyGen:SSHKeyGen":
                return SSHKeyGen(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/server:Server":
                return Server(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/simpleMonitor:SimpleMonitor":
                return SimpleMonitor(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/subnet:Subnet":
                return Subnet(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/switch:Switch":
                return Switch(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/vPCRouter:VPCRouter":
                return VPCRouter(name, pulumi.ResourceOptions(urn=urn))
            elif typ == "sakuracloud:index/webAccelCertificate:WebAccelCertificate":
                return WebAccelCertificate(name, pulumi.ResourceOptions(urn=urn))
            else:
                raise Exception(f"unknown resource type {typ}")


    _module_instance = Module()
    pulumi.runtime.register_resource_module("sakuracloud", "index/archive", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/archiveShare", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/autoBackup", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/bridge", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/bucketObject", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/cDROM", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/containerRegistry", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/dNS", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/dNSRecord", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/database", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/databaseReadReplica", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/disk", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/eSME", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/gSLB", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/iPv4Ptr", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/icon", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/internet", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/loadBalancer", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/localRouter", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/mobileGateway", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/nFS", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/note", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/packetFilter", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/packetFilterRule", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/privateHost", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/proxyLB", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/proxyLBACME", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/sIM", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/sSHKey", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/sSHKeyGen", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/server", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/simpleMonitor", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/subnet", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/switch", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/vPCRouter", _module_instance)
    pulumi.runtime.register_resource_module("sakuracloud", "index/webAccelCertificate", _module_instance)


    class Package(pulumi.runtime.ResourcePackage):
        _version = _utilities.get_semver_version()

        def version(self):
            return Package._version

        def construct_provider(self, name: str, typ: str, urn: str) -> pulumi.ProviderResource:
            if typ != "pulumi:providers:sakuracloud":
                raise Exception(f"unknown provider type {typ}")
            return Provider(name, pulumi.ResourceOptions(urn=urn))


    pulumi.runtime.register_resource_package("sakuracloud", Package())

_register_module()
