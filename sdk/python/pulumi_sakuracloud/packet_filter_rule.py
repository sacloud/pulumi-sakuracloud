# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class PacketFilterRule(pulumi.CustomResource):
    allow: pulumi.Output[bool]
    """
    The flag for allow/deny packets (default:`true`).
    """
    description: pulumi.Output[str]
    """
    The description of the expression.
    """
    dest_port: pulumi.Output[str]
    """
    Target destination port.
    Valid format is one of the following:
    * Number: `"0"` - `"65535"`
    * Range: `"xx-yy"`
    * Range (hex): `"0xPPPP/0xMMMM"`
    """
    order: pulumi.Output[float]
    """
    The order of the expression (default:`1000`).
    """
    packet_filter_id: pulumi.Output[str]
    """
    The ID of the Packet Filter to which the resource belongs.
    """
    protocol: pulumi.Output[str]
    """
    Protocol used in health check.  
    Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "fragment" / "ip" ]
    """
    source_nw: pulumi.Output[str]
    """
    Target source network IP address or CIDR or range.  
    Valid format is one of the following:
    * IP address: `"xxx.xxx.xxx.xxx"`
    * CIDR: `"xxx.xxx.xxx.xxx/nn"`
    * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
    """
    source_port: pulumi.Output[str]
    """
    Target source port.
    Valid format is one of the following:
    * Number: `"0"` - `"65535"`
    * Range: `"xx-yy"`
    * Range (hex): `"0xPPPP/0xMMMM"`
    """
    zone: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, allow=None, description=None, dest_port=None, order=None, packet_filter_id=None, protocol=None, source_nw=None, source_port=None, zone=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a SakuraCloud Packet Filter Rule resource. This can be used to create, update, and delete Packet Filter Rules.
        
        ## Import (not supported)
        
        Import of Packet Filter Rule is not supported.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow: The flag for allow/deny packets (default:`true`).
        :param pulumi.Input[str] description: The description of the expression.
        :param pulumi.Input[str] dest_port: Target destination port.
               Valid format is one of the following:
               * Number: `"0"` - `"65535"`
               * Range: `"xx-yy"`
               * Range (hex): `"0xPPPP/0xMMMM"`
        :param pulumi.Input[float] order: The order of the expression (default:`1000`).
        :param pulumi.Input[str] packet_filter_id: The ID of the Packet Filter to which the resource belongs.
        :param pulumi.Input[str] protocol: Protocol used in health check.  
               Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "fragment" / "ip" ]
        :param pulumi.Input[str] source_nw: Target source network IP address or CIDR or range.  
               Valid format is one of the following:
               * IP address: `"xxx.xxx.xxx.xxx"`
               * CIDR: `"xxx.xxx.xxx.xxx/nn"`
               * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        :param pulumi.Input[str] source_port: Target source port.
               Valid format is one of the following:
               * Number: `"0"` - `"65535"`
               * Range: `"xx-yy"`
               * Range (hex): `"0xPPPP/0xMMMM"`

        > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/packet_filter_rule.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow'] = allow
            __props__['description'] = description
            __props__['dest_port'] = dest_port
            __props__['order'] = order
            if packet_filter_id is None:
                raise TypeError("Missing required property 'packet_filter_id'")
            __props__['packet_filter_id'] = packet_filter_id
            if protocol is None:
                raise TypeError("Missing required property 'protocol'")
            __props__['protocol'] = protocol
            __props__['source_nw'] = source_nw
            __props__['source_port'] = source_port
            __props__['zone'] = zone
        super(PacketFilterRule, __self__).__init__(
            'sakuracloud:index/packetFilterRule:PacketFilterRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, allow=None, description=None, dest_port=None, order=None, packet_filter_id=None, protocol=None, source_nw=None, source_port=None, zone=None):
        """
        Get an existing PacketFilterRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow: The flag for allow/deny packets (default:`true`).
        :param pulumi.Input[str] description: The description of the expression.
        :param pulumi.Input[str] dest_port: Target destination port.
               Valid format is one of the following:
               * Number: `"0"` - `"65535"`
               * Range: `"xx-yy"`
               * Range (hex): `"0xPPPP/0xMMMM"`
        :param pulumi.Input[float] order: The order of the expression (default:`1000`).
        :param pulumi.Input[str] packet_filter_id: The ID of the Packet Filter to which the resource belongs.
        :param pulumi.Input[str] protocol: Protocol used in health check.  
               Valid value is one of the following: [ "tcp" / "udp" / "icmp" / "fragment" / "ip" ]
        :param pulumi.Input[str] source_nw: Target source network IP address or CIDR or range.  
               Valid format is one of the following:
               * IP address: `"xxx.xxx.xxx.xxx"`
               * CIDR: `"xxx.xxx.xxx.xxx/nn"`
               * Range: `"xxx.xxx.xxx.xxx/yyy.yyy.yyy.yyy"`
        :param pulumi.Input[str] source_port: Target source port.
               Valid format is one of the following:
               * Number: `"0"` - `"65535"`
               * Range: `"xx-yy"`
               * Range (hex): `"0xPPPP/0xMMMM"`

        > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/packet_filter_rule.html.markdown.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["allow"] = allow
        __props__["description"] = description
        __props__["dest_port"] = dest_port
        __props__["order"] = order
        __props__["packet_filter_id"] = packet_filter_id
        __props__["protocol"] = protocol
        __props__["source_nw"] = source_nw
        __props__["source_port"] = source_port
        __props__["zone"] = zone
        return PacketFilterRule(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

