# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class AutoBackup(pulumi.CustomResource):
    description: pulumi.Output[str]
    """
    The description of the resource.
    """
    disk_id: pulumi.Output[str]
    """
    The ID of the target disk. 
    """
    icon_id: pulumi.Output[str]
    """
    The ID of the icon.
    """
    max_backup_num: pulumi.Output[float]
    """
    Max number of backups to keep.
    """
    name: pulumi.Output[str]
    """
    The name of the resource.
    """
    tags: pulumi.Output[list]
    """
    The tag list of the resources.
    """
    weekdays: pulumi.Output[list]
    """
    Day of the week to get backup.  
    Valid values are the following: ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
    """
    zone: pulumi.Output[str]
    """
    The ID of the zone to which the resource belongs.  
    Valid value is one of the following: ["is1b" / "tk1a" / "is1a"]
    """
    def __init__(__self__, resource_name, opts=None, description=None, disk_id=None, icon_id=None, max_backup_num=None, name=None, tags=None, weekdays=None, zone=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a SakuraCloud Auto Backup resource. This can be used to create, update, and delete Auto Backups.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the resource.
        :param pulumi.Input[str] disk_id: The ID of the target disk. 
        :param pulumi.Input[str] icon_id: The ID of the icon.
        :param pulumi.Input[float] max_backup_num: Max number of backups to keep.
        :param pulumi.Input[str] name: The name of the resource.
        :param pulumi.Input[list] tags: The tag list of the resources.
        :param pulumi.Input[list] weekdays: Day of the week to get backup.  
               Valid values are the following: ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
        :param pulumi.Input[str] zone: The ID of the zone to which the resource belongs.  
               Valid value is one of the following: ["is1b" / "tk1a" / "is1a"]

        > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/auto_backup.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            if disk_id is None:
                raise TypeError("Missing required property 'disk_id'")
            __props__['disk_id'] = disk_id
            __props__['icon_id'] = icon_id
            __props__['max_backup_num'] = max_backup_num
            __props__['name'] = name
            __props__['tags'] = tags
            if weekdays is None:
                raise TypeError("Missing required property 'weekdays'")
            __props__['weekdays'] = weekdays
            __props__['zone'] = zone
        super(AutoBackup, __self__).__init__(
            'sakuracloud:index/autoBackup:AutoBackup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, description=None, disk_id=None, icon_id=None, max_backup_num=None, name=None, tags=None, weekdays=None, zone=None):
        """
        Get an existing AutoBackup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the resource.
        :param pulumi.Input[str] disk_id: The ID of the target disk. 
        :param pulumi.Input[str] icon_id: The ID of the icon.
        :param pulumi.Input[float] max_backup_num: Max number of backups to keep.
        :param pulumi.Input[str] name: The name of the resource.
        :param pulumi.Input[list] tags: The tag list of the resources.
        :param pulumi.Input[list] weekdays: Day of the week to get backup.  
               Valid values are the following: ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
        :param pulumi.Input[str] zone: The ID of the zone to which the resource belongs.  
               Valid value is one of the following: ["is1b" / "tk1a" / "is1a"]

        > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/auto_backup.html.markdown.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["description"] = description
        __props__["disk_id"] = disk_id
        __props__["icon_id"] = icon_id
        __props__["max_backup_num"] = max_backup_num
        __props__["name"] = name
        __props__["tags"] = tags
        __props__["weekdays"] = weekdays
        __props__["zone"] = zone
        return AutoBackup(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

