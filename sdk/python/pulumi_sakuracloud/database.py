# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Database(pulumi.CustomResource):
    backup: pulumi.Output[dict]
    database_type: pulumi.Output[str]
    """
    The type of the database. This must be one of [`mariadb`/`postgres`]
    """
    description: pulumi.Output[str]
    """
    The description of the Database. The length of this value must be in the range [`1`-`512`]
    """
    icon_id: pulumi.Output[str]
    """
    The icon id to attach to the Database
    """
    name: pulumi.Output[str]
    """
    The name of the Database. The length of this value must be in the range [`1`-`64`]
    """
    network_interface: pulumi.Output[dict]
    password: pulumi.Output[str]
    """
    The password of default user on the database
    """
    plan: pulumi.Output[str]
    """
    The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]
    """
    replica_password: pulumi.Output[str]
    """
    The password of user that processing a replication
    """
    replica_user: pulumi.Output[str]
    """
    The name of user that processing a replication
    """
    tags: pulumi.Output[list]
    """
    Any tags to assign to the Database
    """
    username: pulumi.Output[str]
    """
    The name of default user on the database. The length of this value must be in the range [`3`-`20`]
    """
    zone: pulumi.Output[str]
    """
    The name of zone that the Database will be created (e.g. `is1a`, `tk1a`)
    """
    def __init__(__self__, resource_name, opts=None, backup=None, database_type=None, description=None, icon_id=None, name=None, network_interface=None, password=None, plan=None, replica_password=None, replica_user=None, tags=None, username=None, zone=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Database resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database_type: The type of the database. This must be one of [`mariadb`/`postgres`]
        :param pulumi.Input[str] description: The description of the Database. The length of this value must be in the range [`1`-`512`]
        :param pulumi.Input[str] icon_id: The icon id to attach to the Database
        :param pulumi.Input[str] name: The name of the Database. The length of this value must be in the range [`1`-`64`]
        :param pulumi.Input[str] password: The password of default user on the database
        :param pulumi.Input[str] plan: The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]
        :param pulumi.Input[str] replica_password: The password of user that processing a replication
        :param pulumi.Input[str] replica_user: The name of user that processing a replication
        :param pulumi.Input[list] tags: Any tags to assign to the Database
        :param pulumi.Input[str] username: The name of default user on the database. The length of this value must be in the range [`3`-`20`]
        :param pulumi.Input[str] zone: The name of zone that the Database will be created (e.g. `is1a`, `tk1a`)

        The **backup** object supports the following:

          * `time` (`pulumi.Input[str]`)
          * `weekdays` (`pulumi.Input[list]`)

        The **network_interface** object supports the following:

          * `gateway` (`pulumi.Input[str]`)
          * `ip_address` (`pulumi.Input[str]`)
          * `netmask` (`pulumi.Input[float]`)
          * `port` (`pulumi.Input[float]`)
          * `sourceRanges` (`pulumi.Input[list]`)
          * `switch_id` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['backup'] = backup
            __props__['database_type'] = database_type
            __props__['description'] = description
            __props__['icon_id'] = icon_id
            __props__['name'] = name
            if network_interface is None:
                raise TypeError("Missing required property 'network_interface'")
            __props__['network_interface'] = network_interface
            if password is None:
                raise TypeError("Missing required property 'password'")
            __props__['password'] = password
            __props__['plan'] = plan
            __props__['replica_password'] = replica_password
            __props__['replica_user'] = replica_user
            __props__['tags'] = tags
            if username is None:
                raise TypeError("Missing required property 'username'")
            __props__['username'] = username
            __props__['zone'] = zone
        super(Database, __self__).__init__(
            'sakuracloud:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, backup=None, database_type=None, description=None, icon_id=None, name=None, network_interface=None, password=None, plan=None, replica_password=None, replica_user=None, tags=None, username=None, zone=None):
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database_type: The type of the database. This must be one of [`mariadb`/`postgres`]
        :param pulumi.Input[str] description: The description of the Database. The length of this value must be in the range [`1`-`512`]
        :param pulumi.Input[str] icon_id: The icon id to attach to the Database
        :param pulumi.Input[str] name: The name of the Database. The length of this value must be in the range [`1`-`64`]
        :param pulumi.Input[str] password: The password of default user on the database
        :param pulumi.Input[str] plan: The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]
        :param pulumi.Input[str] replica_password: The password of user that processing a replication
        :param pulumi.Input[str] replica_user: The name of user that processing a replication
        :param pulumi.Input[list] tags: Any tags to assign to the Database
        :param pulumi.Input[str] username: The name of default user on the database. The length of this value must be in the range [`3`-`20`]
        :param pulumi.Input[str] zone: The name of zone that the Database will be created (e.g. `is1a`, `tk1a`)

        The **backup** object supports the following:

          * `time` (`pulumi.Input[str]`)
          * `weekdays` (`pulumi.Input[list]`)

        The **network_interface** object supports the following:

          * `gateway` (`pulumi.Input[str]`)
          * `ip_address` (`pulumi.Input[str]`)
          * `netmask` (`pulumi.Input[float]`)
          * `port` (`pulumi.Input[float]`)
          * `sourceRanges` (`pulumi.Input[list]`)
          * `switch_id` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["backup"] = backup
        __props__["database_type"] = database_type
        __props__["description"] = description
        __props__["icon_id"] = icon_id
        __props__["name"] = name
        __props__["network_interface"] = network_interface
        __props__["password"] = password
        __props__["plan"] = plan
        __props__["replica_password"] = replica_password
        __props__["replica_user"] = replica_user
        __props__["tags"] = tags
        __props__["username"] = username
        __props__["zone"] = zone
        return Database(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

