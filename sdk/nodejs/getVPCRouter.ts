// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVPCRouter(args?: GetVPCRouterArgs, opts?: pulumi.InvokeOptions): Promise<GetVPCRouterResult> & GetVPCRouterResult {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise: Promise<GetVPCRouterResult> = pulumi.runtime.invoke("sakuracloud:index/getVPCRouter:getVPCRouter", {
        "filter": args.filter,
        "zone": args.zone,
    }, opts);

    return pulumi.utils.liftProperties(promise, opts);
}

/**
 * A collection of arguments for invoking getVPCRouter.
 */
export interface GetVPCRouterArgs {
    readonly filter?: inputs.GetVPCRouterFilter;
    readonly zone?: string;
}

/**
 * A collection of values returned by getVPCRouter.
 */
export interface GetVPCRouterResult {
    readonly description: string;
    readonly dhcpServers: outputs.GetVPCRouterDhcpServer[];
    readonly dhcpStaticMappings: outputs.GetVPCRouterDhcpStaticMapping[];
    readonly filter?: outputs.GetVPCRouterFilter;
    readonly firewalls: outputs.GetVPCRouterFirewall[];
    readonly iconId: string;
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly internetConnection: boolean;
    readonly l2tps: outputs.GetVPCRouterL2tp[];
    readonly name: string;
    readonly plan: string;
    readonly portForwardings: outputs.GetVPCRouterPortForwarding[];
    readonly pptps: outputs.GetVPCRouterPptp[];
    readonly privateNetworkInterfaces: outputs.GetVPCRouterPrivateNetworkInterface[];
    readonly publicIp: string;
    readonly publicNetmask: number;
    readonly publicNetworkInterfaces: outputs.GetVPCRouterPublicNetworkInterface[];
    readonly siteToSiteVpns: outputs.GetVPCRouterSiteToSiteVpn[];
    readonly staticNats: outputs.GetVPCRouterStaticNat[];
    readonly staticRoutes: outputs.GetVPCRouterStaticRoute[];
    readonly syslogHost: string;
    readonly tags: string[];
    readonly users: outputs.GetVPCRouterUser[];
    readonly zone: string;
}
