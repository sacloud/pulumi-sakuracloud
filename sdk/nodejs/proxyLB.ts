// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a SakuraCloud ProxyLB(Enhanced-LoadBalancer) resource. This can be used to create, update, and delete ProxyLBs.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@pulumi/sakuracloud";
 * 
 * const foobar = new sakuracloud.ProxyLB("foobar", {
 *     bindPorts: [{
 *         port: 443,
 *         proxyMode: "https",
 *         supportHttp2: true,
 *     }],
 *     certificate: {
 *         additionalCertificates: [{
 *             file: [
 *                 {},
 *                 {},
 *             ],
 *             privateKey: "",
 *             "server2.crt": [{}],
 *             "server2.key": [{}], // intermediateCert = file("intermediate2.crt")
 *             serverCert: "",
 *         }],
 *         file: [
 *             {},
 *             {},
 *         ],
 *         privateKey: "",
 *         "server.crt": [{}],
 *         "server.key": [{}], // intermediateCert = file("intermediate.crt")
 *         serverCert: "",
 *     },
 *     healthCheck: {
 *         delayLoop: 10,
 *         hostHeader: "example.com",
 *         path: "/",
 *         protocol: "http",
 *     },
 *     plan: 1000,
 *     servers: [
 *         {
 *             ipaddress: "133.242.0.3",
 *             port: 80,
 *         },
 *         {
 *             ipaddress: "133.242.0.4",
 *             port: 80,
 *         },
 *     ],
 *     sorryServer: {
 *         ipaddress: "192.2.0.1",
 *         port: 80,
 *         redirectToHttps: true,
 *     },
 *     stickySession: false,
 *     timeout: 10,
 *     vipFailover: false,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/r/proxylb.html.markdown.
 */
export class ProxyLB extends pulumi.CustomResource {
    /**
     * Get an existing ProxyLB resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProxyLBState, opts?: pulumi.CustomResourceOptions): ProxyLB {
        return new ProxyLB(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/proxyLB:ProxyLB';

    /**
     * Returns true if the given object is an instance of ProxyLB.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProxyLB {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProxyLB.__pulumiType;
    }

    /**
     * The external listen ports. It contains some attributes to Bind Ports.
     */
    public readonly bindPorts!: pulumi.Output<outputs.ProxyLBBindPort[]>;
    /**
     * Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
     */
    public readonly certificate!: pulumi.Output<outputs.ProxyLBCertificate>;
    /**
     * The description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The FQDN that was assigned. This attribute only valid when `vipFailover` is set to `true`.  
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * The health check rules. It contains some attributes to Health Check.
     */
    public readonly healthCheck!: pulumi.Output<outputs.ProxyLBHealthCheck>;
    /**
     * The ID of the icon.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.  
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plan of the resource.
     * Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
     */
    public readonly plan!: pulumi.Output<number | undefined>;
    /**
     * ProxyLB network address.   
     */
    public /*out*/ readonly proxyNetworks!: pulumi.Output<string[]>;
    /**
     * Real servers. It contains some attributes to Servers.
     */
    public readonly servers!: pulumi.Output<outputs.ProxyLBServer[] | undefined>;
    /**
     * The pair of IPAddress and port number of sorry-server.
     */
    public readonly sorryServer!: pulumi.Output<outputs.ProxyLBSorryServer | undefined>;
    /**
     * The flag of enable Sticky-Session.  
     */
    public readonly stickySession!: pulumi.Output<boolean | undefined>;
    /**
     * The tag list of the resources.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Timeout seconds.  
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * The VirtualIPAddress that was assigned. This attribute only valid when `vipFailover` is set to `false`.  
     */
    public /*out*/ readonly vip!: pulumi.Output<string>;
    /**
     * The flag of enable VIP Fail-Over.  
     */
    public readonly vipFailover!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ProxyLB resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProxyLBArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProxyLBArgs | ProxyLBState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProxyLBState | undefined;
            inputs["bindPorts"] = state ? state.bindPorts : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["proxyNetworks"] = state ? state.proxyNetworks : undefined;
            inputs["servers"] = state ? state.servers : undefined;
            inputs["sorryServer"] = state ? state.sorryServer : undefined;
            inputs["stickySession"] = state ? state.stickySession : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
            inputs["vip"] = state ? state.vip : undefined;
            inputs["vipFailover"] = state ? state.vipFailover : undefined;
        } else {
            const args = argsOrState as ProxyLBArgs | undefined;
            if (!args || args.bindPorts === undefined) {
                throw new Error("Missing required property 'bindPorts'");
            }
            if (!args || args.healthCheck === undefined) {
                throw new Error("Missing required property 'healthCheck'");
            }
            inputs["bindPorts"] = args ? args.bindPorts : undefined;
            inputs["certificate"] = args ? args.certificate : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["servers"] = args ? args.servers : undefined;
            inputs["sorryServer"] = args ? args.sorryServer : undefined;
            inputs["stickySession"] = args ? args.stickySession : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["vipFailover"] = args ? args.vipFailover : undefined;
            inputs["fqdn"] = undefined /*out*/;
            inputs["proxyNetworks"] = undefined /*out*/;
            inputs["vip"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProxyLB.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProxyLB resources.
 */
export interface ProxyLBState {
    /**
     * The external listen ports. It contains some attributes to Bind Ports.
     */
    readonly bindPorts?: pulumi.Input<pulumi.Input<inputs.ProxyLBBindPort>[]>;
    /**
     * Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
     */
    readonly certificate?: pulumi.Input<inputs.ProxyLBCertificate>;
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The FQDN that was assigned. This attribute only valid when `vipFailover` is set to `true`.  
     */
    readonly fqdn?: pulumi.Input<string>;
    /**
     * The health check rules. It contains some attributes to Health Check.
     */
    readonly healthCheck?: pulumi.Input<inputs.ProxyLBHealthCheck>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the resource.  
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan of the resource.
     * Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
     */
    readonly plan?: pulumi.Input<number>;
    /**
     * ProxyLB network address.   
     */
    readonly proxyNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Real servers. It contains some attributes to Servers.
     */
    readonly servers?: pulumi.Input<pulumi.Input<inputs.ProxyLBServer>[]>;
    /**
     * The pair of IPAddress and port number of sorry-server.
     */
    readonly sorryServer?: pulumi.Input<inputs.ProxyLBSorryServer>;
    /**
     * The flag of enable Sticky-Session.  
     */
    readonly stickySession?: pulumi.Input<boolean>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timeout seconds.  
     */
    readonly timeout?: pulumi.Input<number>;
    /**
     * The VirtualIPAddress that was assigned. This attribute only valid when `vipFailover` is set to `false`.  
     */
    readonly vip?: pulumi.Input<string>;
    /**
     * The flag of enable VIP Fail-Over.  
     */
    readonly vipFailover?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ProxyLB resource.
 */
export interface ProxyLBArgs {
    /**
     * The external listen ports. It contains some attributes to Bind Ports.
     */
    readonly bindPorts: pulumi.Input<pulumi.Input<inputs.ProxyLBBindPort>[]>;
    /**
     * Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
     */
    readonly certificate?: pulumi.Input<inputs.ProxyLBCertificate>;
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The health check rules. It contains some attributes to Health Check.
     */
    readonly healthCheck: pulumi.Input<inputs.ProxyLBHealthCheck>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the resource.  
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan of the resource.
     * Valid value is one of the following: [ 1000 (default) / 5000 / 10000 / 50000 / 100000 / 400000]
     */
    readonly plan?: pulumi.Input<number>;
    /**
     * Real servers. It contains some attributes to Servers.
     */
    readonly servers?: pulumi.Input<pulumi.Input<inputs.ProxyLBServer>[]>;
    /**
     * The pair of IPAddress and port number of sorry-server.
     */
    readonly sorryServer?: pulumi.Input<inputs.ProxyLBSorryServer>;
    /**
     * The flag of enable Sticky-Session.  
     */
    readonly stickySession?: pulumi.Input<boolean>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timeout seconds.  
     */
    readonly timeout?: pulumi.Input<number>;
    /**
     * The flag of enable VIP Fail-Over.  
     */
    readonly vipFailover?: pulumi.Input<boolean>;
}
