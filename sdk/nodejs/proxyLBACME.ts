// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a SakuraCloud ProxyLB(Enhanced-LoadBalancer) resource. This can be used to create, update, and delete ProxyLBs.
 *
 * > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/proxylb_acme.html.markdown.
 */
export class ProxyLBACME extends pulumi.CustomResource {
    /**
     * Get an existing ProxyLBACME resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProxyLBACMEState, opts?: pulumi.CustomResourceOptions): ProxyLBACME {
        return new ProxyLBACME(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/proxyLBACME:ProxyLBACME';

    /**
     * Returns true if the given object is an instance of ProxyLBACME.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProxyLBACME {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProxyLBACME.__pulumiType;
    }

    /**
     * The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
     */
    public readonly acceptTos!: pulumi.Output<boolean>;
    /**
     * Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
     */
    public /*out*/ readonly certificates!: pulumi.Output<outputs.ProxyLBACMECertificate[]>;
    /**
     * The FQDN of target domain.  
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * The ID of target ProxyLB resource.  
     */
    public readonly proxylbId!: pulumi.Output<string>;
    /**
     * The wait time for update settings.
     */
    public readonly updateDelaySec!: pulumi.Output<number | undefined>;

    /**
     * Create a ProxyLBACME resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProxyLBACMEArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProxyLBACMEArgs | ProxyLBACMEState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProxyLBACMEState | undefined;
            inputs["acceptTos"] = state ? state.acceptTos : undefined;
            inputs["certificates"] = state ? state.certificates : undefined;
            inputs["commonName"] = state ? state.commonName : undefined;
            inputs["proxylbId"] = state ? state.proxylbId : undefined;
            inputs["updateDelaySec"] = state ? state.updateDelaySec : undefined;
        } else {
            const args = argsOrState as ProxyLBACMEArgs | undefined;
            if (!args || args.acceptTos === undefined) {
                throw new Error("Missing required property 'acceptTos'");
            }
            if (!args || args.commonName === undefined) {
                throw new Error("Missing required property 'commonName'");
            }
            if (!args || args.proxylbId === undefined) {
                throw new Error("Missing required property 'proxylbId'");
            }
            inputs["acceptTos"] = args ? args.acceptTos : undefined;
            inputs["commonName"] = args ? args.commonName : undefined;
            inputs["proxylbId"] = args ? args.proxylbId : undefined;
            inputs["updateDelaySec"] = args ? args.updateDelaySec : undefined;
            inputs["certificates"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProxyLBACME.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProxyLBACME resources.
 */
export interface ProxyLBACMEState {
    /**
     * The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
     */
    readonly acceptTos?: pulumi.Input<boolean>;
    /**
     * Certificate used to terminate SSL/TSL. It contains some attributes to Certificate.
     */
    readonly certificates?: pulumi.Input<pulumi.Input<inputs.ProxyLBACMECertificate>[]>;
    /**
     * The FQDN of target domain.  
     */
    readonly commonName?: pulumi.Input<string>;
    /**
     * The ID of target ProxyLB resource.  
     */
    readonly proxylbId?: pulumi.Input<string>;
    /**
     * The wait time for update settings.
     */
    readonly updateDelaySec?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ProxyLBACME resource.
 */
export interface ProxyLBACMEArgs {
    /**
     * The flag for accept Let's Encrypt's [Terms of Service](https://letsencrypt.org/repository/).  
     */
    readonly acceptTos: pulumi.Input<boolean>;
    /**
     * The FQDN of target domain.  
     */
    readonly commonName: pulumi.Input<string>;
    /**
     * The ID of target ProxyLB resource.  
     */
    readonly proxylbId: pulumi.Input<string>;
    /**
     * The wait time for update settings.
     */
    readonly updateDelaySec?: pulumi.Input<number>;
}
