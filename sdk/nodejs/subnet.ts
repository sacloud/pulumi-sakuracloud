// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a SakuraCloud Subnet resource. This can be used to create, update, and delete Subnets.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@sacloud/pulumi_sakuracloud";
 * 
 * // Create a new Subnet
 * const foobar = new sakuracloud.Subnet("foobar", {
 *     description: "description",
 *     name: "foobar",
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 * });
 * ```
 *
 * > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/subnet.html.markdown.
 */
export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * The ID of the Internet resource.
     */
    public readonly internetId!: pulumi.Output<string>;
    /**
     * Global IP address list.
     */
    public /*out*/ readonly ipaddresses!: pulumi.Output<string[]>;
    /**
     * Max global IP address.
     */
    public /*out*/ readonly maxIpaddress!: pulumi.Output<string>;
    /**
     * Min global IP address.
     */
    public /*out*/ readonly minIpaddress!: pulumi.Output<string>;
    /**
     * The next hop IP address.
     */
    public readonly nextHop!: pulumi.Output<string>;
    /**
     * The network address.
     */
    public /*out*/ readonly nwAddress!: pulumi.Output<string>;
    /**
     * Network mask length.  
     * Valid value is one of the following: [ 28 (default) / 27 / 26 ]
     */
    public readonly nwMaskLen!: pulumi.Output<number | undefined>;
    public /*out*/ readonly switchId!: pulumi.Output<string>;
    /**
     * The ID of the zone to which the resource belongs.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SubnetState | undefined;
            inputs["internetId"] = state ? state.internetId : undefined;
            inputs["ipaddresses"] = state ? state.ipaddresses : undefined;
            inputs["maxIpaddress"] = state ? state.maxIpaddress : undefined;
            inputs["minIpaddress"] = state ? state.minIpaddress : undefined;
            inputs["nextHop"] = state ? state.nextHop : undefined;
            inputs["nwAddress"] = state ? state.nwAddress : undefined;
            inputs["nwMaskLen"] = state ? state.nwMaskLen : undefined;
            inputs["switchId"] = state ? state.switchId : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if (!args || args.internetId === undefined) {
                throw new Error("Missing required property 'internetId'");
            }
            if (!args || args.nextHop === undefined) {
                throw new Error("Missing required property 'nextHop'");
            }
            inputs["internetId"] = args ? args.internetId : undefined;
            inputs["nextHop"] = args ? args.nextHop : undefined;
            inputs["nwMaskLen"] = args ? args.nwMaskLen : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["ipaddresses"] = undefined /*out*/;
            inputs["maxIpaddress"] = undefined /*out*/;
            inputs["minIpaddress"] = undefined /*out*/;
            inputs["nwAddress"] = undefined /*out*/;
            inputs["switchId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Subnet.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * The ID of the Internet resource.
     */
    readonly internetId?: pulumi.Input<string>;
    /**
     * Global IP address list.
     */
    readonly ipaddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Max global IP address.
     */
    readonly maxIpaddress?: pulumi.Input<string>;
    /**
     * Min global IP address.
     */
    readonly minIpaddress?: pulumi.Input<string>;
    /**
     * The next hop IP address.
     */
    readonly nextHop?: pulumi.Input<string>;
    /**
     * The network address.
     */
    readonly nwAddress?: pulumi.Input<string>;
    /**
     * Network mask length.  
     * Valid value is one of the following: [ 28 (default) / 27 / 26 ]
     */
    readonly nwMaskLen?: pulumi.Input<number>;
    readonly switchId?: pulumi.Input<string>;
    /**
     * The ID of the zone to which the resource belongs.
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * The ID of the Internet resource.
     */
    readonly internetId: pulumi.Input<string>;
    /**
     * The next hop IP address.
     */
    readonly nextHop: pulumi.Input<string>;
    /**
     * Network mask length.  
     * Valid value is one of the following: [ 28 (default) / 27 / 26 ]
     */
    readonly nwMaskLen?: pulumi.Input<number>;
    /**
     * The ID of the zone to which the resource belongs.
     */
    readonly zone?: pulumi.Input<string>;
}
