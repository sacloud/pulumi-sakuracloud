// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a SakuraCloud Simple Monitor resource. This can be used to create, update, and delete Simple Monitors.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@sacloud/pulumi_sakuracloud";
 * 
 * // Create a new Simple Monitor(protocol: sslcertificate)
 * const cert = new sakuracloud.SimpleMonitor("cert", {
 *     healthCheck: {
 *         protocol: "sslcertificate",
 *         remainingDays: 30,
 *     },
 *     target: "www.example.com",
 * });
 * // Create a new Simple Monitor(protocol: https)
 * const foobar = new sakuracloud.SimpleMonitor("foobar", {
 *     description: "description",
 *     healthCheck: {
 *         delayLoop: 60,
 *         hostHeader: "hostname.example.com",
 *         path: "/",
 *         protocol: "https",
 *         sni: true,
 *         status: "200",
 *     },
 *     notifyEmailEnabled: true,
 *     notifyEmailHtml: true,
 *     notifyInterval: 7200,
 *     notifySlackEnabled: true,
 *     notifySlackWebhook: "https://hooks.slack.com/services/XXX/XXX/XXXXXX",
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 *     target: "www.example.com",
 * });
 * ```
 *
 * > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/simple_monitor.html.markdown.
 */
export class SimpleMonitor extends pulumi.CustomResource {
    /**
     * Get an existing SimpleMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SimpleMonitorState, opts?: pulumi.CustomResourceOptions): SimpleMonitor {
        return new SimpleMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/simpleMonitor:SimpleMonitor';

    /**
     * Returns true if the given object is an instance of SimpleMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SimpleMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SimpleMonitor.__pulumiType;
    }

    /**
     * The description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The flag of enable/disable monitoring.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Health check rules. It contains some attributes to Health Check.
     */
    public readonly healthCheck!: pulumi.Output<outputs.SimpleMonitorHealthCheck>;
    /**
     * The ID of the icon of the resource.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The flag of enable/disable notification by E-mail.
     */
    public readonly notifyEmailEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The flag of enable/disable HTML format for E-mail.
     */
    public readonly notifyEmailHtml!: pulumi.Output<boolean | undefined>;
    /**
     * The intervals of notify (unit:`second`).  
     */
    public readonly notifyInterval!: pulumi.Output<number | undefined>;
    /**
     * The flag of enable/disable notification by slack.
     */
    public readonly notifySlackEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The webhook URL of destination of slack notification.
     */
    public readonly notifySlackWebhook!: pulumi.Output<string | undefined>;
    /**
     * The tag list of the resources.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * The HostName or IP address of monitoring target.
     */
    public readonly target!: pulumi.Output<string>;

    /**
     * Create a SimpleMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SimpleMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SimpleMonitorArgs | SimpleMonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SimpleMonitorState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["notifyEmailEnabled"] = state ? state.notifyEmailEnabled : undefined;
            inputs["notifyEmailHtml"] = state ? state.notifyEmailHtml : undefined;
            inputs["notifyInterval"] = state ? state.notifyInterval : undefined;
            inputs["notifySlackEnabled"] = state ? state.notifySlackEnabled : undefined;
            inputs["notifySlackWebhook"] = state ? state.notifySlackWebhook : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as SimpleMonitorArgs | undefined;
            if (!args || args.healthCheck === undefined) {
                throw new Error("Missing required property 'healthCheck'");
            }
            if (!args || args.target === undefined) {
                throw new Error("Missing required property 'target'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["notifyEmailEnabled"] = args ? args.notifyEmailEnabled : undefined;
            inputs["notifyEmailHtml"] = args ? args.notifyEmailHtml : undefined;
            inputs["notifyInterval"] = args ? args.notifyInterval : undefined;
            inputs["notifySlackEnabled"] = args ? args.notifySlackEnabled : undefined;
            inputs["notifySlackWebhook"] = args ? args.notifySlackWebhook : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["target"] = args ? args.target : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SimpleMonitor.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SimpleMonitor resources.
 */
export interface SimpleMonitorState {
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The flag of enable/disable monitoring.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Health check rules. It contains some attributes to Health Check.
     */
    readonly healthCheck?: pulumi.Input<inputs.SimpleMonitorHealthCheck>;
    /**
     * The ID of the icon of the resource.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The flag of enable/disable notification by E-mail.
     */
    readonly notifyEmailEnabled?: pulumi.Input<boolean>;
    /**
     * The flag of enable/disable HTML format for E-mail.
     */
    readonly notifyEmailHtml?: pulumi.Input<boolean>;
    /**
     * The intervals of notify (unit:`second`).  
     */
    readonly notifyInterval?: pulumi.Input<number>;
    /**
     * The flag of enable/disable notification by slack.
     */
    readonly notifySlackEnabled?: pulumi.Input<boolean>;
    /**
     * The webhook URL of destination of slack notification.
     */
    readonly notifySlackWebhook?: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HostName or IP address of monitoring target.
     */
    readonly target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SimpleMonitor resource.
 */
export interface SimpleMonitorArgs {
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The flag of enable/disable monitoring.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Health check rules. It contains some attributes to Health Check.
     */
    readonly healthCheck: pulumi.Input<inputs.SimpleMonitorHealthCheck>;
    /**
     * The ID of the icon of the resource.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The flag of enable/disable notification by E-mail.
     */
    readonly notifyEmailEnabled?: pulumi.Input<boolean>;
    /**
     * The flag of enable/disable HTML format for E-mail.
     */
    readonly notifyEmailHtml?: pulumi.Input<boolean>;
    /**
     * The intervals of notify (unit:`second`).  
     */
    readonly notifyInterval?: pulumi.Input<number>;
    /**
     * The flag of enable/disable notification by slack.
     */
    readonly notifySlackEnabled?: pulumi.Input<boolean>;
    /**
     * The webhook URL of destination of slack notification.
     */
    readonly notifySlackWebhook?: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The HostName or IP address of monitoring target.
     */
    readonly target: pulumi.Input<string>;
}
