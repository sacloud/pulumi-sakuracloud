// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages a SakuraCloud Local Router.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@pulumi/sakuracloud";
 *
 * const foobarSwitch = new sakuracloud.Switch("foobarSwitch", {});
 * const peer = sakuracloud.getLocalRouter({
 *     filter: {
 *         names: ["peer"],
 *     },
 * });
 * const foobarLocalRouter = new sakuracloud.LocalRouter("foobarLocalRouter", {
 *     description: "descriptio",
 *     tags: [
 *         "tag1",
 *         "tag2",
 *     ],
 *     "switch": {
 *         code: foobarSwitch.id,
 *         category: "cloud",
 *         zoneId: "is1a",
 *     },
 *     networkInterface: {
 *         vip: "192.168.11.1",
 *         ipAddresses: [
 *             "192.168.11.11",
 *             "192.168.11.12",
 *         ],
 *         netmask: 24,
 *         vrid: 101,
 *     },
 *     staticRoutes: [
 *         {
 *             prefix: "10.0.0.0/24",
 *             nextHop: "192.168.11.2",
 *         },
 *         {
 *             prefix: "172.16.0.0/16",
 *             nextHop: "192.168.11.3",
 *         },
 *     ],
 *     peers: [{
 *         peerId: peer.then(peer => peer.id),
 *         secretKey: peer.then(peer => peer.secretKeys?[0]),
 *         description: "description",
 *     }],
 * });
 * ```
 */
export class LocalRouter extends pulumi.CustomResource {
    /**
     * Get an existing LocalRouter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocalRouterState, opts?: pulumi.CustomResourceOptions): LocalRouter {
        return new LocalRouter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/localRouter:LocalRouter';

    /**
     * Returns true if the given object is an instance of LocalRouter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocalRouter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocalRouter.__pulumiType;
    }

    /**
     * The description of the LocalRouter. The length of this value must be in the range [`1`-`512`].
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The icon id to attach to the LoadBalancer.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the LocalRouter. The length of this value must be in the range [`1`-`64`].
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An `networkInterface` block as defined below.
     */
    public readonly networkInterface!: pulumi.Output<outputs.LocalRouterNetworkInterface>;
    /**
     * One or more `peer` blocks as defined below.
     */
    public readonly peers!: pulumi.Output<outputs.LocalRouterPeer[] | undefined>;
    /**
     * A list of secret key used for peering from other LocalRouters.
     */
    public /*out*/ readonly secretKeys!: pulumi.Output<string[]>;
    /**
     * One or more `staticRoute` blocks as defined below.
     */
    public readonly staticRoutes!: pulumi.Output<outputs.LocalRouterStaticRoute[] | undefined>;
    /**
     * A `switch` block as defined below.
     */
    public readonly switch!: pulumi.Output<outputs.LocalRouterSwitch>;
    /**
     * Any tags to assign to the LoadBalancer.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a LocalRouter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocalRouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocalRouterArgs | LocalRouterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocalRouterState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkInterface"] = state ? state.networkInterface : undefined;
            inputs["peers"] = state ? state.peers : undefined;
            inputs["secretKeys"] = state ? state.secretKeys : undefined;
            inputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            inputs["switch"] = state ? state.switch : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LocalRouterArgs | undefined;
            if ((!args || args.networkInterface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterface'");
            }
            if ((!args || args.switch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switch'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkInterface"] = args ? args.networkInterface : undefined;
            inputs["peers"] = args ? args.peers : undefined;
            inputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            inputs["switch"] = args ? args.switch : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["secretKeys"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LocalRouter.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LocalRouter resources.
 */
export interface LocalRouterState {
    /**
     * The description of the LocalRouter. The length of this value must be in the range [`1`-`512`].
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the LoadBalancer.
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the LocalRouter. The length of this value must be in the range [`1`-`64`].
     */
    name?: pulumi.Input<string>;
    /**
     * An `networkInterface` block as defined below.
     */
    networkInterface?: pulumi.Input<inputs.LocalRouterNetworkInterface>;
    /**
     * One or more `peer` blocks as defined below.
     */
    peers?: pulumi.Input<pulumi.Input<inputs.LocalRouterPeer>[]>;
    /**
     * A list of secret key used for peering from other LocalRouters.
     */
    secretKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more `staticRoute` blocks as defined below.
     */
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.LocalRouterStaticRoute>[]>;
    /**
     * A `switch` block as defined below.
     */
    switch?: pulumi.Input<inputs.LocalRouterSwitch>;
    /**
     * Any tags to assign to the LoadBalancer.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LocalRouter resource.
 */
export interface LocalRouterArgs {
    /**
     * The description of the LocalRouter. The length of this value must be in the range [`1`-`512`].
     */
    description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the LoadBalancer.
     */
    iconId?: pulumi.Input<string>;
    /**
     * The name of the LocalRouter. The length of this value must be in the range [`1`-`64`].
     */
    name?: pulumi.Input<string>;
    /**
     * An `networkInterface` block as defined below.
     */
    networkInterface: pulumi.Input<inputs.LocalRouterNetworkInterface>;
    /**
     * One or more `peer` blocks as defined below.
     */
    peers?: pulumi.Input<pulumi.Input<inputs.LocalRouterPeer>[]>;
    /**
     * One or more `staticRoute` blocks as defined below.
     */
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.LocalRouterStaticRoute>[]>;
    /**
     * A `switch` block as defined below.
     */
    switch: pulumi.Input<inputs.LocalRouterSwitch>;
    /**
     * Any tags to assign to the LoadBalancer.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
