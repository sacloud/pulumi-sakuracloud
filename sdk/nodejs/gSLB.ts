// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a SakuraCloud GSLB resource. This can be used to create, update, and delete GSLBs.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@sacloud/pulumi_sakuracloud";
 * 
 * // Create a new GSLB
 * const foobar = new sakuracloud.GSLB("foobar", {
 *     description: "description",
 *     healthCheck: {
 *         delayLoop: 20,
 *         hostHeader: "example.com",
 *         path: "/",
 *         protocol: "https",
 *         status: "200",
 *     },
 *     servers: [
 *         {
 *             ipaddress: "192.0.2.1",
 *         },
 *         {
 *             ipaddress: "192.0.2.2",
 *         },
 *     ],
 *     sorryServer: "192.2.0.1",
 *     tags: [
 *         "foo",
 *         "bar",
 *     ],
 * });
 * ```
 *
 * > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/gslb.html.markdown.
 */
export class GSLB extends pulumi.CustomResource {
    /**
     * Get an existing GSLB resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GSLBState, opts?: pulumi.CustomResourceOptions): GSLB {
        return new GSLB(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/gSLB:GSLB';

    /**
     * Returns true if the given object is an instance of GSLB.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GSLB {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GSLB.__pulumiType;
    }

    /**
     * The description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * FQDN to access this resource.
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * Health check rules. It contains some attributes to Health Check.
     */
    public readonly healthCheck!: pulumi.Output<outputs.GSLBHealthCheck>;
    /**
     * The ID of the icon.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Real servers. It contains some attributes to Servers.
     */
    public readonly servers!: pulumi.Output<outputs.GSLBServer[]>;
    /**
     * The hostname or IP address of sorry server.
     */
    public readonly sorryServer!: pulumi.Output<string | undefined>;
    /**
     * The tag list of the resources.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * The flag for enable/disable weighting (default:`true`).
     */
    public readonly weighted!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GSLB resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GSLBArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GSLBArgs | GSLBState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GSLBState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["servers"] = state ? state.servers : undefined;
            inputs["sorryServer"] = state ? state.sorryServer : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["weighted"] = state ? state.weighted : undefined;
        } else {
            const args = argsOrState as GSLBArgs | undefined;
            if (!args || args.healthCheck === undefined) {
                throw new Error("Missing required property 'healthCheck'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["servers"] = args ? args.servers : undefined;
            inputs["sorryServer"] = args ? args.sorryServer : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["weighted"] = args ? args.weighted : undefined;
            inputs["fqdn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(GSLB.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GSLB resources.
 */
export interface GSLBState {
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * FQDN to access this resource.
     */
    readonly fqdn?: pulumi.Input<string>;
    /**
     * Health check rules. It contains some attributes to Health Check.
     */
    readonly healthCheck?: pulumi.Input<inputs.GSLBHealthCheck>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Real servers. It contains some attributes to Servers.
     */
    readonly servers?: pulumi.Input<pulumi.Input<inputs.GSLBServer>[]>;
    /**
     * The hostname or IP address of sorry server.
     */
    readonly sorryServer?: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The flag for enable/disable weighting (default:`true`).
     */
    readonly weighted?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GSLB resource.
 */
export interface GSLBArgs {
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Health check rules. It contains some attributes to Health Check.
     */
    readonly healthCheck: pulumi.Input<inputs.GSLBHealthCheck>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Real servers. It contains some attributes to Servers.
     */
    readonly servers?: pulumi.Input<pulumi.Input<inputs.GSLBServer>[]>;
    /**
     * The hostname or IP address of sorry server.
     */
    readonly sorryServer?: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The flag for enable/disable weighting (default:`true`).
     */
    readonly weighted?: pulumi.Input<boolean>;
}
