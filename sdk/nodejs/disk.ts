// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a SakuraCloud Disk resource. This can be used to create, update, and delete Disks.
 *
 * > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/disk.html.markdown.
 */
export class Disk extends pulumi.CustomResource {
    /**
     * Get an existing Disk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DiskState, opts?: pulumi.CustomResourceOptions): Disk {
        return new Disk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/disk:Disk';

    /**
     * Returns true if the given object is an instance of Disk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Disk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Disk.__pulumiType;
    }

    public readonly connector!: pulumi.Output<string | undefined>;
    /**
     * The description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID list of the Disks isolated from Disk.
     */
    public readonly distantFroms!: pulumi.Output<string[] | undefined>;
    /**
     * The wait time (seconds) to do graceful shutdown the server connected to the resource.
     */
    public readonly gracefulShutdownTimeout!: pulumi.Output<number | undefined>;
    /**
     * The ID of the icon.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plan of the resource.  
     * Valid value is one of the following: [ "ssd" (default) / "hdd"]
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * The ID of the server connected to the disk.
     */
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    /**
     * Size of the resource (unit:`GB`).
     */
    public readonly size!: pulumi.Output<number | undefined>;
    /**
     * The ID of source Archive.
     */
    public readonly sourceArchiveId!: pulumi.Output<string | undefined>;
    /**
     * The ID of source Disk.
     */
    public readonly sourceDiskId!: pulumi.Output<string | undefined>;
    /**
     * The tag list of the resources.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * The ID of the zone to which the resource belongs.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Disk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DiskArgs | DiskState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DiskState | undefined;
            inputs["connector"] = state ? state.connector : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["distantFroms"] = state ? state.distantFroms : undefined;
            inputs["gracefulShutdownTimeout"] = state ? state.gracefulShutdownTimeout : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["serverId"] = state ? state.serverId : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["sourceArchiveId"] = state ? state.sourceArchiveId : undefined;
            inputs["sourceDiskId"] = state ? state.sourceDiskId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DiskArgs | undefined;
            inputs["connector"] = args ? args.connector : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["distantFroms"] = args ? args.distantFroms : undefined;
            inputs["gracefulShutdownTimeout"] = args ? args.gracefulShutdownTimeout : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["sourceArchiveId"] = args ? args.sourceArchiveId : undefined;
            inputs["sourceDiskId"] = args ? args.sourceDiskId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["serverId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Disk.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Disk resources.
 */
export interface DiskState {
    readonly connector?: pulumi.Input<string>;
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The ID list of the Disks isolated from Disk.
     */
    readonly distantFroms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The wait time (seconds) to do graceful shutdown the server connected to the resource.
     */
    readonly gracefulShutdownTimeout?: pulumi.Input<number>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan of the resource.  
     * Valid value is one of the following: [ "ssd" (default) / "hdd"]
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * The ID of the server connected to the disk.
     */
    readonly serverId?: pulumi.Input<string>;
    /**
     * Size of the resource (unit:`GB`).
     */
    readonly size?: pulumi.Input<number>;
    /**
     * The ID of source Archive.
     */
    readonly sourceArchiveId?: pulumi.Input<string>;
    /**
     * The ID of source Disk.
     */
    readonly sourceDiskId?: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the zone to which the resource belongs.
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Disk resource.
 */
export interface DiskArgs {
    readonly connector?: pulumi.Input<string>;
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The ID list of the Disks isolated from Disk.
     */
    readonly distantFroms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The wait time (seconds) to do graceful shutdown the server connected to the resource.
     */
    readonly gracefulShutdownTimeout?: pulumi.Input<number>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan of the resource.  
     * Valid value is one of the following: [ "ssd" (default) / "hdd"]
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * Size of the resource (unit:`GB`).
     */
    readonly size?: pulumi.Input<number>;
    /**
     * The ID of source Archive.
     */
    readonly sourceArchiveId?: pulumi.Input<string>;
    /**
     * The ID of source Disk.
     */
    readonly sourceDiskId?: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the zone to which the resource belongs.
     */
    readonly zone?: pulumi.Input<string>;
}
