// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Note extends pulumi.CustomResource {
    /**
     * Get an existing Note resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NoteState, opts?: pulumi.CustomResourceOptions): Note {
        return new Note(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/note:Note';

    /**
     * Returns true if the given object is an instance of Note.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Note {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Note.__pulumiType;
    }

    /**
     * The class of the Note. This must be one of `shell`/`yaml_cloud_config`
     */
    public readonly class!: pulumi.Output<string | undefined>;
    /**
     * The content of the Note. This must be specified as a shell script or as a cloud-config
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * The description of the Note. This will be computed from special tags within body of `content`
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The icon id to attach to the Note
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the Note. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Any tags to assign to the Note
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Note resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NoteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NoteArgs | NoteState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as NoteState | undefined;
            inputs["class"] = state ? state.class : undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NoteArgs | undefined;
            if (!args || args.content === undefined) {
                throw new Error("Missing required property 'content'");
            }
            inputs["class"] = args ? args.class : undefined;
            inputs["content"] = args ? args.content : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["description"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Note.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Note resources.
 */
export interface NoteState {
    /**
     * The class of the Note. This must be one of `shell`/`yaml_cloud_config`
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The content of the Note. This must be specified as a shell script or as a cloud-config
     */
    readonly content?: pulumi.Input<string>;
    /**
     * The description of the Note. This will be computed from special tags within body of `content`
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the Note
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the Note. The length of this value must be in the range [`1`-`64`]
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Any tags to assign to the Note
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Note resource.
 */
export interface NoteArgs {
    /**
     * The class of the Note. This must be one of `shell`/`yaml_cloud_config`
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The content of the Note. This must be specified as a shell script or as a cloud-config
     */
    readonly content: pulumi.Input<string>;
    /**
     * The icon id to attach to the Note
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the Note. The length of this value must be in the range [`1`-`64`]
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Any tags to assign to the Note
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
