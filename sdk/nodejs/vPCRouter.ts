// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages a SakuraCloud VPC Router.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@pulumi/sakuracloud";
 *
 * const standard = new sakuracloud.VPCRouter("standard", {
 *     description: "description",
 *     tags: [
 *         "tag1",
 *         "tag2",
 *     ],
 *     internetConnection: true,
 * });
 * const foobarInternet = new sakuracloud.Internet("foobarInternet", {});
 * const foobarSwitch = new sakuracloud.Switch("foobarSwitch", {});
 * const premium = new sakuracloud.VPCRouter("premium", {
 *     description: "description",
 *     tags: [
 *         "tag1",
 *         "tag2",
 *     ],
 *     plan: "premium",
 *     internetConnection: true,
 *     publicNetworkInterface: {
 *         switchId: foobarInternet.switchId,
 *         vip: foobarInternet.ipAddresses[0],
 *         ipAddresses: [
 *             foobarInternet.ipAddresses[1],
 *             foobarInternet.ipAddresses[2],
 *         ],
 *         aliases: [foobarInternet.ipAddresses[3]],
 *         vrid: 1,
 *     },
 *     privateNetworkInterfaces: [{
 *         index: 1,
 *         switchId: foobarSwitch.id,
 *         vip: "192.168.11.1",
 *         ipAddresses: [
 *             "192.168.11.2",
 *             "192.168.11.3",
 *         ],
 *         netmask: 24,
 *     }],
 *     dhcpServers: [{
 *         interfaceIndex: 1,
 *         rangeStart: "192.168.11.11",
 *         rangeStop: "192.168.11.20",
 *         dnsServers: [
 *             "8.8.8.8",
 *             "8.8.4.4",
 *         ],
 *     }],
 *     dhcpStaticMappings: [{
 *         ipAddress: "192.168.11.10",
 *         macAddress: "aa:bb:cc:aa:bb:cc",
 *     }],
 *     firewalls: [{
 *         interfaceIndex: 1,
 *         direction: "send",
 *         expressions: [
 *             {
 *                 protocol: "tcp",
 *                 sourceNetwork: "",
 *                 sourcePort: "80",
 *                 destinationNetwork: "",
 *                 destinationPort: "",
 *                 allow: true,
 *                 logging: true,
 *                 description: "desc",
 *             },
 *             {
 *                 protocol: "ip",
 *                 sourceNetwork: "",
 *                 sourcePort: "",
 *                 destinationNetwork: "",
 *                 destinationPort: "",
 *                 allow: false,
 *                 logging: true,
 *                 description: "desc",
 *             },
 *         ],
 *     }],
 *     l2tp: {
 *         preSharedSecret: "example",
 *         rangeStart: "192.168.11.21",
 *         rangeStop: "192.168.11.30",
 *     },
 *     portForwardings: [{
 *         protocol: "udp",
 *         publicPort: 10022,
 *         privateIp: "192.168.11.11",
 *         privatePort: 22,
 *         description: "desc",
 *     }],
 *     pptp: {
 *         rangeStart: "192.168.11.31",
 *         rangeStop: "192.168.11.40",
 *     },
 *     siteToSiteVpns: [{
 *         peer: "10.0.0.1",
 *         remoteId: "10.0.0.1",
 *         preSharedSecret: "example",
 *         routes: ["10.0.0.0/8"],
 *         localPrefixes: ["192.168.21.0/24"],
 *     }],
 *     staticNats: [{
 *         publicIp: foobarInternet.ipAddresses[3],
 *         privateIp: "192.168.11.12",
 *         description: "desc",
 *     }],
 *     staticRoutes: [{
 *         prefix: "172.16.0.0/16",
 *         nextHop: "192.168.11.99",
 *     }],
 *     users: [{
 *         name: "username",
 *         password: "password",
 *     }],
 * });
 * ```
 */
export class VPCRouter extends pulumi.CustomResource {
    /**
     * Get an existing VPCRouter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VPCRouterState, opts?: pulumi.CustomResourceOptions): VPCRouter {
        return new VPCRouter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/vPCRouter:VPCRouter';

    /**
     * Returns true if the given object is an instance of VPCRouter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VPCRouter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VPCRouter.__pulumiType;
    }

    /**
     * The description of the expression. The length of this value must be in the range [`0`-`512`].
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * One or more `dhcpServer` blocks as defined below.
     */
    public readonly dhcpServers!: pulumi.Output<outputs.VPCRouterDhcpServer[] | undefined>;
    /**
     * One or more `dhcpStaticMapping` blocks as defined below.
     */
    public readonly dhcpStaticMappings!: pulumi.Output<outputs.VPCRouterDhcpStaticMapping[] | undefined>;
    /**
     * One or more `firewall` blocks as defined below.
     */
    public readonly firewalls!: pulumi.Output<outputs.VPCRouterFirewall[] | undefined>;
    /**
     * The icon id to attach to the VPCRouter.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
     */
    public readonly internetConnection!: pulumi.Output<boolean | undefined>;
    /**
     * A `l2tp` block as defined below.
     */
    public readonly l2tp!: pulumi.Output<outputs.VPCRouterL2tp | undefined>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * One or more `portForwarding` blocks as defined below.
     */
    public readonly portForwardings!: pulumi.Output<outputs.VPCRouterPortForwarding[] | undefined>;
    /**
     * A `pptp` block as defined below.
     */
    public readonly pptp!: pulumi.Output<outputs.VPCRouterPptp | undefined>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting.
     */
    public readonly privateNetworkInterfaces!: pulumi.Output<outputs.VPCRouterPrivateNetworkInterface[] | undefined>;
    /**
     * The public IP address used for the static NAT.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * The bit length of the subnet to assign to the public network interface.
     */
    public /*out*/ readonly publicNetmask!: pulumi.Output<number>;
    /**
     * An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
     */
    public readonly publicNetworkInterface!: pulumi.Output<outputs.VPCRouterPublicNetworkInterface | undefined>;
    /**
     * One or more `siteToSiteVpn` blocks as defined below.
     */
    public readonly siteToSiteVpns!: pulumi.Output<outputs.VPCRouterSiteToSiteVpn[] | undefined>;
    /**
     * One or more `staticNat` blocks as defined below.
     */
    public readonly staticNats!: pulumi.Output<outputs.VPCRouterStaticNat[] | undefined>;
    /**
     * One or more `staticRoute` blocks as defined below.
     */
    public readonly staticRoutes!: pulumi.Output<outputs.VPCRouterStaticRoute[] | undefined>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs.
     */
    public readonly syslogHost!: pulumi.Output<string | undefined>;
    /**
     * Any tags to assign to the VPCRouter.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * One or more `user` blocks as defined below.
     */
    public readonly users!: pulumi.Output<outputs.VPCRouterUser[] | undefined>;
    /**
     * The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
     */
    public readonly version!: pulumi.Output<number | undefined>;
    /**
     * The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a VPCRouter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VPCRouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VPCRouterArgs | VPCRouterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VPCRouterState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dhcpServers"] = state ? state.dhcpServers : undefined;
            inputs["dhcpStaticMappings"] = state ? state.dhcpStaticMappings : undefined;
            inputs["firewalls"] = state ? state.firewalls : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["internetConnection"] = state ? state.internetConnection : undefined;
            inputs["l2tp"] = state ? state.l2tp : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["portForwardings"] = state ? state.portForwardings : undefined;
            inputs["pptp"] = state ? state.pptp : undefined;
            inputs["privateNetworkInterfaces"] = state ? state.privateNetworkInterfaces : undefined;
            inputs["publicIp"] = state ? state.publicIp : undefined;
            inputs["publicNetmask"] = state ? state.publicNetmask : undefined;
            inputs["publicNetworkInterface"] = state ? state.publicNetworkInterface : undefined;
            inputs["siteToSiteVpns"] = state ? state.siteToSiteVpns : undefined;
            inputs["staticNats"] = state ? state.staticNats : undefined;
            inputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            inputs["syslogHost"] = state ? state.syslogHost : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["users"] = state ? state.users : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as VPCRouterArgs | undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dhcpServers"] = args ? args.dhcpServers : undefined;
            inputs["dhcpStaticMappings"] = args ? args.dhcpStaticMappings : undefined;
            inputs["firewalls"] = args ? args.firewalls : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["internetConnection"] = args ? args.internetConnection : undefined;
            inputs["l2tp"] = args ? args.l2tp : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["portForwardings"] = args ? args.portForwardings : undefined;
            inputs["pptp"] = args ? args.pptp : undefined;
            inputs["privateNetworkInterfaces"] = args ? args.privateNetworkInterfaces : undefined;
            inputs["publicNetworkInterface"] = args ? args.publicNetworkInterface : undefined;
            inputs["siteToSiteVpns"] = args ? args.siteToSiteVpns : undefined;
            inputs["staticNats"] = args ? args.staticNats : undefined;
            inputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            inputs["syslogHost"] = args ? args.syslogHost : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["publicIp"] = undefined /*out*/;
            inputs["publicNetmask"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VPCRouter.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VPCRouter resources.
 */
export interface VPCRouterState {
    /**
     * The description of the expression. The length of this value must be in the range [`0`-`512`].
     */
    readonly description?: pulumi.Input<string>;
    /**
     * One or more `dhcpServer` blocks as defined below.
     */
    readonly dhcpServers?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpServer>[]>;
    /**
     * One or more `dhcpStaticMapping` blocks as defined below.
     */
    readonly dhcpStaticMappings?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpStaticMapping>[]>;
    /**
     * One or more `firewall` blocks as defined below.
     */
    readonly firewalls?: pulumi.Input<pulumi.Input<inputs.VPCRouterFirewall>[]>;
    /**
     * The icon id to attach to the VPCRouter.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
     */
    readonly internetConnection?: pulumi.Input<boolean>;
    /**
     * A `l2tp` block as defined below.
     */
    readonly l2tp?: pulumi.Input<inputs.VPCRouterL2tp>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * One or more `portForwarding` blocks as defined below.
     */
    readonly portForwardings?: pulumi.Input<pulumi.Input<inputs.VPCRouterPortForwarding>[]>;
    /**
     * A `pptp` block as defined below.
     */
    readonly pptp?: pulumi.Input<inputs.VPCRouterPptp>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting.
     */
    readonly privateNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.VPCRouterPrivateNetworkInterface>[]>;
    /**
     * The public IP address used for the static NAT.
     */
    readonly publicIp?: pulumi.Input<string>;
    /**
     * The bit length of the subnet to assign to the public network interface.
     */
    readonly publicNetmask?: pulumi.Input<number>;
    /**
     * An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
     */
    readonly publicNetworkInterface?: pulumi.Input<inputs.VPCRouterPublicNetworkInterface>;
    /**
     * One or more `siteToSiteVpn` blocks as defined below.
     */
    readonly siteToSiteVpns?: pulumi.Input<pulumi.Input<inputs.VPCRouterSiteToSiteVpn>[]>;
    /**
     * One or more `staticNat` blocks as defined below.
     */
    readonly staticNats?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticNat>[]>;
    /**
     * One or more `staticRoute` blocks as defined below.
     */
    readonly staticRoutes?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticRoute>[]>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs.
     */
    readonly syslogHost?: pulumi.Input<string>;
    /**
     * Any tags to assign to the VPCRouter.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more `user` blocks as defined below.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.VPCRouterUser>[]>;
    /**
     * The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
     */
    readonly version?: pulumi.Input<number>;
    /**
     * The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VPCRouter resource.
 */
export interface VPCRouterArgs {
    /**
     * The description of the expression. The length of this value must be in the range [`0`-`512`].
     */
    readonly description?: pulumi.Input<string>;
    /**
     * One or more `dhcpServer` blocks as defined below.
     */
    readonly dhcpServers?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpServer>[]>;
    /**
     * One or more `dhcpStaticMapping` blocks as defined below.
     */
    readonly dhcpStaticMappings?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpStaticMapping>[]>;
    /**
     * One or more `firewall` blocks as defined below.
     */
    readonly firewalls?: pulumi.Input<pulumi.Input<inputs.VPCRouterFirewall>[]>;
    /**
     * The icon id to attach to the VPCRouter.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router. Default:`true`.
     */
    readonly internetConnection?: pulumi.Input<boolean>;
    /**
     * A `l2tp` block as defined below.
     */
    readonly l2tp?: pulumi.Input<inputs.VPCRouterL2tp>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.
     */
    readonly plan?: pulumi.Input<string>;
    /**
     * One or more `portForwarding` blocks as defined below.
     */
    readonly portForwardings?: pulumi.Input<pulumi.Input<inputs.VPCRouterPortForwarding>[]>;
    /**
     * A `pptp` block as defined below.
     */
    readonly pptp?: pulumi.Input<inputs.VPCRouterPptp>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting.
     */
    readonly privateNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.VPCRouterPrivateNetworkInterface>[]>;
    /**
     * An `publicNetworkInterface` block as defined below. This block is required when `plan` is not `standard`.
     */
    readonly publicNetworkInterface?: pulumi.Input<inputs.VPCRouterPublicNetworkInterface>;
    /**
     * One or more `siteToSiteVpn` blocks as defined below.
     */
    readonly siteToSiteVpns?: pulumi.Input<pulumi.Input<inputs.VPCRouterSiteToSiteVpn>[]>;
    /**
     * One or more `staticNat` blocks as defined below.
     */
    readonly staticNats?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticNat>[]>;
    /**
     * One or more `staticRoute` blocks as defined below.
     */
    readonly staticRoutes?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticRoute>[]>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs.
     */
    readonly syslogHost?: pulumi.Input<string>;
    /**
     * Any tags to assign to the VPCRouter.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more `user` blocks as defined below.
     */
    readonly users?: pulumi.Input<pulumi.Input<inputs.VPCRouterUser>[]>;
    /**
     * The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.
     */
    readonly version?: pulumi.Input<number>;
    /**
     * The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
     */
    readonly zone?: pulumi.Input<string>;
}
