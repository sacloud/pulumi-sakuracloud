// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VPCRouter extends pulumi.CustomResource {
    /**
     * Get an existing VPCRouter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VPCRouterState, opts?: pulumi.CustomResourceOptions): VPCRouter {
        return new VPCRouter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/vPCRouter:VPCRouter';

    /**
     * Returns true if the given object is an instance of VPCRouter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VPCRouter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VPCRouter.__pulumiType;
    }

    /**
     * The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dhcpServers!: pulumi.Output<outputs.VPCRouterDhcpServer[] | undefined>;
    public readonly dhcpStaticMappings!: pulumi.Output<outputs.VPCRouterDhcpStaticMapping[] | undefined>;
    public readonly firewalls!: pulumi.Output<outputs.VPCRouterFirewall[] | undefined>;
    /**
     * The icon id to attach to the VPCRouter
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router
     */
    public readonly internetConnection!: pulumi.Output<boolean | undefined>;
    public readonly l2tp!: pulumi.Output<outputs.VPCRouterL2tp | undefined>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    public readonly portForwardings!: pulumi.Output<outputs.VPCRouterPortForwarding[] | undefined>;
    public readonly pptp!: pulumi.Output<outputs.VPCRouterPptp | undefined>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting
     */
    public readonly privateNetworkInterfaces!: pulumi.Output<outputs.VPCRouterPrivateNetworkInterface[] | undefined>;
    /**
     * The public ip address of the VPC Router
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * The bit length of the subnet to assign to the public network interface
     */
    public /*out*/ readonly publicNetmask!: pulumi.Output<number>;
    public readonly publicNetworkInterface!: pulumi.Output<outputs.VPCRouterPublicNetworkInterface | undefined>;
    public readonly siteToSiteVpns!: pulumi.Output<outputs.VPCRouterSiteToSiteVpn[] | undefined>;
    public readonly staticNats!: pulumi.Output<outputs.VPCRouterStaticNat[] | undefined>;
    public readonly staticRoutes!: pulumi.Output<outputs.VPCRouterStaticRoute[] | undefined>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs
     */
    public readonly syslogHost!: pulumi.Output<string | undefined>;
    /**
     * Any tags to assign to the VPCRouter
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly users!: pulumi.Output<outputs.VPCRouterUser[] | undefined>;
    /**
     * The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a VPCRouter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VPCRouterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VPCRouterArgs | VPCRouterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VPCRouterState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dhcpServers"] = state ? state.dhcpServers : undefined;
            inputs["dhcpStaticMappings"] = state ? state.dhcpStaticMappings : undefined;
            inputs["firewalls"] = state ? state.firewalls : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["internetConnection"] = state ? state.internetConnection : undefined;
            inputs["l2tp"] = state ? state.l2tp : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["portForwardings"] = state ? state.portForwardings : undefined;
            inputs["pptp"] = state ? state.pptp : undefined;
            inputs["privateNetworkInterfaces"] = state ? state.privateNetworkInterfaces : undefined;
            inputs["publicIp"] = state ? state.publicIp : undefined;
            inputs["publicNetmask"] = state ? state.publicNetmask : undefined;
            inputs["publicNetworkInterface"] = state ? state.publicNetworkInterface : undefined;
            inputs["siteToSiteVpns"] = state ? state.siteToSiteVpns : undefined;
            inputs["staticNats"] = state ? state.staticNats : undefined;
            inputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            inputs["syslogHost"] = state ? state.syslogHost : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["users"] = state ? state.users : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as VPCRouterArgs | undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dhcpServers"] = args ? args.dhcpServers : undefined;
            inputs["dhcpStaticMappings"] = args ? args.dhcpStaticMappings : undefined;
            inputs["firewalls"] = args ? args.firewalls : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["internetConnection"] = args ? args.internetConnection : undefined;
            inputs["l2tp"] = args ? args.l2tp : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["portForwardings"] = args ? args.portForwardings : undefined;
            inputs["pptp"] = args ? args.pptp : undefined;
            inputs["privateNetworkInterfaces"] = args ? args.privateNetworkInterfaces : undefined;
            inputs["publicNetworkInterface"] = args ? args.publicNetworkInterface : undefined;
            inputs["siteToSiteVpns"] = args ? args.siteToSiteVpns : undefined;
            inputs["staticNats"] = args ? args.staticNats : undefined;
            inputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            inputs["syslogHost"] = args ? args.syslogHost : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["publicIp"] = undefined /*out*/;
            inputs["publicNetmask"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VPCRouter.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VPCRouter resources.
 */
export interface VPCRouterState {
    /**
     * The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
     */
    readonly description?: pulumi.Input<string>;
    readonly dhcpServers?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpServer>[]>;
    readonly dhcpStaticMappings?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpStaticMapping>[]>;
    readonly firewalls?: pulumi.Input<pulumi.Input<inputs.VPCRouterFirewall>[]>;
    /**
     * The icon id to attach to the VPCRouter
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router
     */
    readonly internetConnection?: pulumi.Input<boolean>;
    readonly l2tp?: pulumi.Input<inputs.VPCRouterL2tp>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
     */
    readonly plan?: pulumi.Input<string>;
    readonly portForwardings?: pulumi.Input<pulumi.Input<inputs.VPCRouterPortForwarding>[]>;
    readonly pptp?: pulumi.Input<inputs.VPCRouterPptp>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting
     */
    readonly privateNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.VPCRouterPrivateNetworkInterface>[]>;
    /**
     * The public ip address of the VPC Router
     */
    readonly publicIp?: pulumi.Input<string>;
    /**
     * The bit length of the subnet to assign to the public network interface
     */
    readonly publicNetmask?: pulumi.Input<number>;
    readonly publicNetworkInterface?: pulumi.Input<inputs.VPCRouterPublicNetworkInterface>;
    readonly siteToSiteVpns?: pulumi.Input<pulumi.Input<inputs.VPCRouterSiteToSiteVpn>[]>;
    readonly staticNats?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticNat>[]>;
    readonly staticRoutes?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticRoute>[]>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs
     */
    readonly syslogHost?: pulumi.Input<string>;
    /**
     * Any tags to assign to the VPCRouter
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly users?: pulumi.Input<pulumi.Input<inputs.VPCRouterUser>[]>;
    /**
     * The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VPCRouter resource.
 */
export interface VPCRouterArgs {
    /**
     * The description of the VPCRouter. The length of this value must be in the range [`1`-`512`]
     */
    readonly description?: pulumi.Input<string>;
    readonly dhcpServers?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpServer>[]>;
    readonly dhcpStaticMappings?: pulumi.Input<pulumi.Input<inputs.VPCRouterDhcpStaticMapping>[]>;
    readonly firewalls?: pulumi.Input<pulumi.Input<inputs.VPCRouterFirewall>[]>;
    /**
     * The icon id to attach to the VPCRouter
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The flag to enable connecting to the Internet from the VPC Router
     */
    readonly internetConnection?: pulumi.Input<boolean>;
    readonly l2tp?: pulumi.Input<inputs.VPCRouterL2tp>;
    /**
     * The name of the VPCRouter. The length of this value must be in the range [`1`-`64`]
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]
     */
    readonly plan?: pulumi.Input<string>;
    readonly portForwardings?: pulumi.Input<pulumi.Input<inputs.VPCRouterPortForwarding>[]>;
    readonly pptp?: pulumi.Input<inputs.VPCRouterPptp>;
    /**
     * A list of additional network interface setting. This doesn't include primary network interface setting
     */
    readonly privateNetworkInterfaces?: pulumi.Input<pulumi.Input<inputs.VPCRouterPrivateNetworkInterface>[]>;
    readonly publicNetworkInterface?: pulumi.Input<inputs.VPCRouterPublicNetworkInterface>;
    readonly siteToSiteVpns?: pulumi.Input<pulumi.Input<inputs.VPCRouterSiteToSiteVpn>[]>;
    readonly staticNats?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticNat>[]>;
    readonly staticRoutes?: pulumi.Input<pulumi.Input<inputs.VPCRouterStaticRoute>[]>;
    /**
     * The ip address of the syslog host to which the VPC Router sends logs
     */
    readonly syslogHost?: pulumi.Input<string>;
    /**
     * Any tags to assign to the VPCRouter
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly users?: pulumi.Input<pulumi.Input<inputs.VPCRouterUser>[]>;
    /**
     * The name of zone that the VPCRouter will be created (e.g. `is1a`, `tk1a`)
     */
    readonly zone?: pulumi.Input<string>;
}
