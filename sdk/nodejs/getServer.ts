// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about a SakuraCloud Server.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@pulumi/sakuracloud";
 * 
 * const foobar = sakuracloud.getServer({
 *     nameSelectors: ["foobar"],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-sakuracloud/blob/master/website/docs/d/server.html.markdown.
 */
export function getServer(args?: GetServerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerResult> & GetServerResult {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise: Promise<GetServerResult> = pulumi.runtime.invoke("sakuracloud:index/getServer:getServer", {
        "filters": args.filters,
        "nameSelectors": args.nameSelectors,
        "tagSelectors": args.tagSelectors,
        "zone": args.zone,
    }, opts);

    return pulumi.utils.liftProperties(promise, opts);
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerArgs {
    /**
     * The map of filter key and value.
     */
    readonly filters?: inputs.GetServerFilter[];
    /**
     * The list of names to filtering.
     */
    readonly nameSelectors?: string[];
    /**
     * The list of tags to filtering.
     */
    readonly tagSelectors?: string[];
    /**
     * The ID of the zone.
     */
    readonly zone?: string;
}

/**
 * A collection of values returned by getServer.
 */
export interface GetServerResult {
    /**
     * The display IP address list of the NICs (excluding primary NIC) of Server.  
     */
    readonly additionalDisplayIpaddresses: string[];
    /**
     * The ID list of the Switches connected to NICs (excluding primary NIC) of Server.
     */
    readonly additionalNics: string[];
    /**
     * The ID of the CD-ROM inserted to Server.
     */
    readonly cdromId: string;
    /**
     * The plan of assignment of CPU to VM.
     */
    readonly commitment: string;
    /**
     * The number of cores.
     */
    readonly core: number;
    /**
     * The description of the resource.
     */
    readonly description: string;
    /**
     * The ID list of the Disks connected to Server.
     */
    readonly disks: string[];
    /**
     * The IP address of NIC for display.
     */
    readonly displayIpaddress: string;
    /**
     * List of default DNS servers for the zone to which the Server belongs.
     */
    readonly dnsServers: string[];
    readonly filters?: outputs.GetServerFilter[];
    /**
     * Default gateway address of the Server.	 
     */
    readonly gateway: string;
    /**
     * The ID of the icon of the resource.
     */
    readonly iconId: string;
    /**
     * The name of network interface driver.
     */
    readonly interfaceDriver: string;
    /**
     * The IP address of primary NIC.
     */
    readonly ipaddress: string;
    /**
     * The MAC address list of NICs connected to Server.
     */
    readonly macaddresses: string[];
    /**
     * The size of memory (unit:`GB`).
     */
    readonly memory: number;
    /**
     * The name of the resource.
     */
    readonly name: string;
    readonly nameSelectors?: string[];
    /**
     * The primary NIC's connection destination.
     */
    readonly nic: string;
    /**
     * The network address of the Server.
     */
    readonly nwAddress: string;
    /**
     * Network mask length of the Server.
     */
    readonly nwMaskLen: string;
    /**
     * The ID list of the Packet Filter connected to Server.
     */
    readonly packetFilterIds: string[];
    /**
     * The ID of the Private Host to which the Server belongs.
     */
    readonly privateHostId: string;
    /**
     * The name of the Private Host to which the Server belongs.
     */
    readonly privateHostName: string;
    readonly tagSelectors?: string[];
    /**
     * The tag list of the resources.
     */
    readonly tags: string[];
    /**
     * The hostname of VNC server.
     */
    readonly vncHost: string;
    /**
     * The password of VNC server.
     */
    readonly vncPassword: string;
    /**
     * The port number of VNC server.
     */
    readonly vncPort: number;
    /**
     * The ID of the zone to which the resource belongs.
     */
    readonly zone: string;
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
