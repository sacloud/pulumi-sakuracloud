// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a SakuraCloud Private Host.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sakuracloud from "@pulumi/sakuracloud";
 *
 * const foobar = new sakuracloud.PrivateHost("foobar", {
 *     description: "description",
 *     tags: [
 *         "tag1",
 *         "tag2",
 *     ],
 * });
 * ```
 */
export class PrivateHost extends pulumi.CustomResource {
    /**
     * Get an existing PrivateHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateHostState, opts?: pulumi.CustomResourceOptions): PrivateHost {
        return new PrivateHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/privateHost:PrivateHost';

    /**
     * Returns true if the given object is an instance of PrivateHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateHost.__pulumiType;
    }

    /**
     * The total number of CPUs assigned to servers on the private host.
     */
    public /*out*/ readonly assignedCore!: pulumi.Output<number>;
    /**
     * The total size of memory assigned to servers on the private host.
     */
    public /*out*/ readonly assignedMemory!: pulumi.Output<number>;
    /**
     * The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
     */
    public readonly class!: pulumi.Output<string | undefined>;
    /**
     * The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The hostname of the private host.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The icon id to attach to the PrivateHost.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Any tags to assign to the PrivateHost.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a PrivateHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PrivateHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateHostArgs | PrivateHostState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateHostState | undefined;
            inputs["assignedCore"] = state ? state.assignedCore : undefined;
            inputs["assignedMemory"] = state ? state.assignedMemory : undefined;
            inputs["class"] = state ? state.class : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as PrivateHostArgs | undefined;
            inputs["class"] = args ? args.class : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["assignedCore"] = undefined /*out*/;
            inputs["assignedMemory"] = undefined /*out*/;
            inputs["hostname"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(PrivateHost.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateHost resources.
 */
export interface PrivateHostState {
    /**
     * The total number of CPUs assigned to servers on the private host.
     */
    readonly assignedCore?: pulumi.Input<number>;
    /**
     * The total size of memory assigned to servers on the private host.
     */
    readonly assignedMemory?: pulumi.Input<number>;
    /**
     * The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The hostname of the private host.
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * The icon id to attach to the PrivateHost.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Any tags to assign to the PrivateHost.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrivateHost resource.
 */
export interface PrivateHostArgs {
    /**
     * The class of the PrivateHost. This will be one of [`dynamic`/`msWindows`]. Default:`dynamic`.
     */
    readonly class?: pulumi.Input<string>;
    /**
     * The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The icon id to attach to the PrivateHost.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Any tags to assign to the PrivateHost.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.
     */
    readonly zone?: pulumi.Input<string>;
}
