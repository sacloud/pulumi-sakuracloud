// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./archive";
export * from "./archiveShare";
export * from "./autoBackup";
export * from "./bridge";
export * from "./cdrom";
export * from "./certificateAuthority";
export * from "./containerRegistry";
export * from "./database";
export * from "./databaseReadReplica";
export * from "./disk";
export * from "./dns";
export * from "./dnsrecord";
export * from "./enhancedDB";
export * from "./esme";
export * from "./getArchive";
export * from "./getBridge";
export * from "./getCDROM";
export * from "./getCertificateAuthority";
export * from "./getContainerRegistry";
export * from "./getDNS";
export * from "./getDatabase";
export * from "./getDisk";
export * from "./getESME";
export * from "./getEnhancedDB";
export * from "./getGSLB";
export * from "./getIcon";
export * from "./getInternet";
export * from "./getLoadBalancer";
export * from "./getLocalRouter";
export * from "./getNFS";
export * from "./getNote";
export * from "./getPacketFilter";
export * from "./getPrivateHost";
export * from "./getProxyLB";
export * from "./getSSHKey";
export * from "./getServer";
export * from "./getServerVNCInfo";
export * from "./getSimpleMonitor";
export * from "./getSubnet";
export * from "./getSwitch";
export * from "./getVPCRouter";
export * from "./getWebAccel";
export * from "./getZone";
export * from "./gslb";
export * from "./icon";
export * from "./internet";
export * from "./ipv4Ptr";
export * from "./loadBalancer";
export * from "./localRouter";
export * from "./mobileGateway";
export * from "./nfs";
export * from "./note";
export * from "./packetFilter";
export * from "./packetFilterRule";
export * from "./privateHost";
export * from "./provider";
export * from "./proxyLB";
export * from "./proxyLBACME";
export * from "./server";
export * from "./sim";
export * from "./simpleMonitor";
export * from "./sshkey";
export * from "./sshkeyGen";
export * from "./subnet";
export * from "./switch";
export * from "./vpcrouter";
export * from "./webAccelCertificate";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Archive } from "./archive";
import { ArchiveShare } from "./archiveShare";
import { AutoBackup } from "./autoBackup";
import { Bridge } from "./bridge";
import { CDROM } from "./cdrom";
import { CertificateAuthority } from "./certificateAuthority";
import { ContainerRegistry } from "./containerRegistry";
import { DNS } from "./dns";
import { DNSRecord } from "./dnsrecord";
import { Database } from "./database";
import { DatabaseReadReplica } from "./databaseReadReplica";
import { Disk } from "./disk";
import { ESME } from "./esme";
import { EnhancedDB } from "./enhancedDB";
import { GSLB } from "./gslb";
import { IPv4Ptr } from "./ipv4Ptr";
import { Icon } from "./icon";
import { Internet } from "./internet";
import { LoadBalancer } from "./loadBalancer";
import { LocalRouter } from "./localRouter";
import { MobileGateway } from "./mobileGateway";
import { NFS } from "./nfs";
import { Note } from "./note";
import { PacketFilter } from "./packetFilter";
import { PacketFilterRule } from "./packetFilterRule";
import { PrivateHost } from "./privateHost";
import { ProxyLB } from "./proxyLB";
import { ProxyLBACME } from "./proxyLBACME";
import { SIM } from "./sim";
import { SSHKey } from "./sshkey";
import { SSHKeyGen } from "./sshkeyGen";
import { Server } from "./server";
import { SimpleMonitor } from "./simpleMonitor";
import { Subnet } from "./subnet";
import { Switch } from "./switch";
import { VPCRouter } from "./vpcrouter";
import { WebAccelCertificate } from "./webAccelCertificate";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sakuracloud:index/archive:Archive":
                return new Archive(name, <any>undefined, { urn })
            case "sakuracloud:index/archiveShare:ArchiveShare":
                return new ArchiveShare(name, <any>undefined, { urn })
            case "sakuracloud:index/autoBackup:AutoBackup":
                return new AutoBackup(name, <any>undefined, { urn })
            case "sakuracloud:index/bridge:Bridge":
                return new Bridge(name, <any>undefined, { urn })
            case "sakuracloud:index/cDROM:CDROM":
                return new CDROM(name, <any>undefined, { urn })
            case "sakuracloud:index/certificateAuthority:CertificateAuthority":
                return new CertificateAuthority(name, <any>undefined, { urn })
            case "sakuracloud:index/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "sakuracloud:index/dNS:DNS":
                return new DNS(name, <any>undefined, { urn })
            case "sakuracloud:index/dNSRecord:DNSRecord":
                return new DNSRecord(name, <any>undefined, { urn })
            case "sakuracloud:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "sakuracloud:index/databaseReadReplica:DatabaseReadReplica":
                return new DatabaseReadReplica(name, <any>undefined, { urn })
            case "sakuracloud:index/disk:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "sakuracloud:index/eSME:ESME":
                return new ESME(name, <any>undefined, { urn })
            case "sakuracloud:index/enhancedDB:EnhancedDB":
                return new EnhancedDB(name, <any>undefined, { urn })
            case "sakuracloud:index/gSLB:GSLB":
                return new GSLB(name, <any>undefined, { urn })
            case "sakuracloud:index/iPv4Ptr:IPv4Ptr":
                return new IPv4Ptr(name, <any>undefined, { urn })
            case "sakuracloud:index/icon:Icon":
                return new Icon(name, <any>undefined, { urn })
            case "sakuracloud:index/internet:Internet":
                return new Internet(name, <any>undefined, { urn })
            case "sakuracloud:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "sakuracloud:index/localRouter:LocalRouter":
                return new LocalRouter(name, <any>undefined, { urn })
            case "sakuracloud:index/mobileGateway:MobileGateway":
                return new MobileGateway(name, <any>undefined, { urn })
            case "sakuracloud:index/nFS:NFS":
                return new NFS(name, <any>undefined, { urn })
            case "sakuracloud:index/note:Note":
                return new Note(name, <any>undefined, { urn })
            case "sakuracloud:index/packetFilter:PacketFilter":
                return new PacketFilter(name, <any>undefined, { urn })
            case "sakuracloud:index/packetFilterRule:PacketFilterRule":
                return new PacketFilterRule(name, <any>undefined, { urn })
            case "sakuracloud:index/privateHost:PrivateHost":
                return new PrivateHost(name, <any>undefined, { urn })
            case "sakuracloud:index/proxyLB:ProxyLB":
                return new ProxyLB(name, <any>undefined, { urn })
            case "sakuracloud:index/proxyLBACME:ProxyLBACME":
                return new ProxyLBACME(name, <any>undefined, { urn })
            case "sakuracloud:index/sIM:SIM":
                return new SIM(name, <any>undefined, { urn })
            case "sakuracloud:index/sSHKey:SSHKey":
                return new SSHKey(name, <any>undefined, { urn })
            case "sakuracloud:index/sSHKeyGen:SSHKeyGen":
                return new SSHKeyGen(name, <any>undefined, { urn })
            case "sakuracloud:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "sakuracloud:index/simpleMonitor:SimpleMonitor":
                return new SimpleMonitor(name, <any>undefined, { urn })
            case "sakuracloud:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "sakuracloud:index/switch:Switch":
                return new Switch(name, <any>undefined, { urn })
            case "sakuracloud:index/vPCRouter:VPCRouter":
                return new VPCRouter(name, <any>undefined, { urn })
            case "sakuracloud:index/webAccelCertificate:WebAccelCertificate":
                return new WebAccelCertificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sakuracloud", "index/archive", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/archiveShare", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/autoBackup", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/bridge", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/cDROM", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/certificateAuthority", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/containerRegistry", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/dNS", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/dNSRecord", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/database", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/databaseReadReplica", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/disk", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/eSME", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/enhancedDB", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/gSLB", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/iPv4Ptr", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/icon", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/internet", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/localRouter", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/mobileGateway", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/nFS", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/note", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/packetFilter", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/packetFilterRule", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/privateHost", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/proxyLB", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/proxyLBACME", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/sIM", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/sSHKey", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/sSHKeyGen", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/server", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/simpleMonitor", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/subnet", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/switch", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/vPCRouter", _module)
pulumi.runtime.registerResourceModule("sakuracloud", "index/webAccelCertificate", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("sakuracloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sakuracloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
