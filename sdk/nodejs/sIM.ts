// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a SakuraCloud SIM resource. This can be used to create, update, and delete SIMs.
 *
 * > This content is derived from https://github.com/sacloud/terraform-provider-sakuracloud/blob/master/website/docs/r/sim.html.markdown.
 */
export class SIM extends pulumi.CustomResource {
    /**
     * Get an existing SIM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SIMState, opts?: pulumi.CustomResourceOptions): SIM {
        return new SIM(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sakuracloud:index/sIM:SIM';

    /**
     * Returns true if the given object is an instance of SIM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SIM {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SIM.__pulumiType;
    }

    /**
     * The list of Carrier name.  
     * Valid values are in followings: [ "docomo" / "kddi" / "softbank"]
     */
    public readonly carriers!: pulumi.Output<string[]>;
    /**
     * The description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The flag of enable/disable the Server.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ICCID of the SIM.  
     */
    public readonly iccid!: pulumi.Output<string>;
    /**
     * The ID of the icon.
     */
    public readonly iconId!: pulumi.Output<string | undefined>;
    /**
     * The IMEI of the device that allows communication.
     */
    public readonly imei!: pulumi.Output<string | undefined>;
    /**
     * The IP address of the SIM. Used when connect to mobile gateway.
     */
    public readonly ipaddress!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Mobile Gateway to which the SIM belongs.
     */
    public readonly mobileGatewayId!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Passcode of the SIM.  
     */
    public readonly passcode!: pulumi.Output<string>;
    /**
     * The tag list of the resources.
     */
    public readonly tags!: pulumi.Output<string[]>;

    /**
     * Create a SIM resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SIMArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SIMArgs | SIMState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as SIMState | undefined;
            inputs["carriers"] = state ? state.carriers : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["iccid"] = state ? state.iccid : undefined;
            inputs["iconId"] = state ? state.iconId : undefined;
            inputs["imei"] = state ? state.imei : undefined;
            inputs["ipaddress"] = state ? state.ipaddress : undefined;
            inputs["mobileGatewayId"] = state ? state.mobileGatewayId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["passcode"] = state ? state.passcode : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SIMArgs | undefined;
            if (!args || args.carriers === undefined) {
                throw new Error("Missing required property 'carriers'");
            }
            if (!args || args.iccid === undefined) {
                throw new Error("Missing required property 'iccid'");
            }
            if (!args || args.passcode === undefined) {
                throw new Error("Missing required property 'passcode'");
            }
            inputs["carriers"] = args ? args.carriers : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["iccid"] = args ? args.iccid : undefined;
            inputs["iconId"] = args ? args.iconId : undefined;
            inputs["imei"] = args ? args.imei : undefined;
            inputs["ipaddress"] = args ? args.ipaddress : undefined;
            inputs["mobileGatewayId"] = args ? args.mobileGatewayId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["passcode"] = args ? args.passcode : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SIM.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SIM resources.
 */
export interface SIMState {
    /**
     * The list of Carrier name.  
     * Valid values are in followings: [ "docomo" / "kddi" / "softbank"]
     */
    readonly carriers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The flag of enable/disable the Server.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The ICCID of the SIM.  
     */
    readonly iccid?: pulumi.Input<string>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The IMEI of the device that allows communication.
     */
    readonly imei?: pulumi.Input<string>;
    /**
     * The IP address of the SIM. Used when connect to mobile gateway.
     */
    readonly ipaddress?: pulumi.Input<string>;
    /**
     * The ID of the Mobile Gateway to which the SIM belongs.
     */
    readonly mobileGatewayId?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The Passcode of the SIM.  
     */
    readonly passcode?: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SIM resource.
 */
export interface SIMArgs {
    /**
     * The list of Carrier name.  
     * Valid values are in followings: [ "docomo" / "kddi" / "softbank"]
     */
    readonly carriers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the resource.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The flag of enable/disable the Server.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The ICCID of the SIM.  
     */
    readonly iccid: pulumi.Input<string>;
    /**
     * The ID of the icon.
     */
    readonly iconId?: pulumi.Input<string>;
    /**
     * The IMEI of the device that allows communication.
     */
    readonly imei?: pulumi.Input<string>;
    /**
     * The IP address of the SIM. Used when connect to mobile gateway.
     */
    readonly ipaddress?: pulumi.Input<string>;
    /**
     * The ID of the Mobile Gateway to which the SIM belongs.
     */
    readonly mobileGatewayId?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The Passcode of the SIM.  
     */
    readonly passcode: pulumi.Input<string>;
    /**
     * The tag list of the resources.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
