{
    "name": "sakuracloud",
    "description": "A Pulumi package for creating and managing SakuraCloud resources.",
    "keywords": [
        "pulumi",
        "sakuracloud"
    ],
    "homepage": "https://github.com/sacloud/pulumi-sakuracloud",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`sakuracloud` Terraform Provider](https://github.com/sacloud/terraform-provider-sakuracloud).",
    "repository": "https://github.com/sacloud/pulumi-sakuracloud",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "acceptLanguage": {
                "type": "string",
                "description": "The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the\n`SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "apiRequestRateLimit": {
                "type": "integer",
                "description": "The maximum number of SakuraCloud API calls per second. It can also be sourced from the `SAKURACLOUD_RATE_LIMIT`\nenvironment variables, or via a shared credentials file if `profile` is specified. Default:`10`\n"
            },
            "apiRequestTimeout": {
                "type": "integer",
                "description": "The timeout seconds for each SakuraCloud API call. It can also be sourced from the `SAKURACLOUD_API_REQUEST_TIMEOUT`\nenvironment variables, or via a shared credentials file if `profile` is specified. Default:`300`\n"
            },
            "apiRootUrl": {
                "type": "string",
                "description": "The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment variables, or\nvia a shared credentials file if `profile` is specified. Default:`https://secure.sakura.ad.jp/cloud/zone`\n"
            },
            "defaultZone": {
                "type": "string",
                "description": "The name of zone to use as default for global resources. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_DEFAULT_ZONE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "fakeMode": {
                "type": "string",
                "description": "The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can also be sourced\nfrom the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "fakeStorePath": {
                "type": "string",
                "description": "The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping the\nprovider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared credentials file if\n`profile` is specified\n"
            },
            "profile": {
                "type": "string",
                "description": "The profile name of your SakuraCloud account. Default:`default`\n",
                "default": "default",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_PROFILE"
                    ]
                }
            },
            "retryMax": {
                "type": "integer",
                "description": "The maximum number of API call retries used when SakuraCloud API returns status code `423` or `503`. It can also be\nsourced from the `SAKURACLOUD_RETRY_MAX` environment variables, or via a shared credentials file if `profile` is\nspecified. Default:`100`\n"
            },
            "retryWaitMax": {
                "type": "integer",
                "description": "The maximum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or\n`503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MAX` environment variables, or via a shared credentials\nfile if `profile` is specified\n"
            },
            "retryWaitMin": {
                "type": "integer",
                "description": "The minimum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or\n`503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MIN` environment variables, or via a shared credentials\nfile if `profile` is specified\n"
            },
            "secret": {
                "type": "string",
                "description": "The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is specified\n",
                "default": "",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_ACCESS_TOKEN_SECRET"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified\n",
                "default": "",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_ACCESS_TOKEN"
                    ]
                }
            },
            "trace": {
                "type": "string",
                "description": "The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment variables, or via a\nshared credentials file if `profile` is specified\n"
            },
            "zone": {
                "type": "string",
                "description": "The name of zone to use as default. It must be provided, but it can also be sourced from the `SAKURACLOUD_ZONE`\nenvironment variables, or via a shared credentials file if `profile` is specified\n",
                "default": "is1b",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_ZONE"
                    ]
                }
            },
            "zones": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of available SakuraCloud zone name. It can also be sourced via a shared credentials file if `profile` is\nspecified. Default:[`is1a`, `is1b`, `tk1a`, `tk1v`]\n"
            }
        }
    },
    "types": {
        "sakuracloud:index/CertificateAuthorityClient:CertificateAuthorityClient": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "csr": {
                    "type": "string",
                    "description": "Input for issuing a certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "email": {
                    "type": "string",
                    "description": "Input for issuing a certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hold": {
                    "type": "boolean",
                    "description": "Flag to suspend/hold the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueState": {
                    "type": "string",
                    "description": "Current state of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notAfter": {
                    "type": "string",
                    "description": "The date on which the certificate validity period ends, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notBefore": {
                    "type": "string",
                    "description": "The date on which the certificate validity period begins, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "Input for issuing a certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serialNumber": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "$ref": "#/types/sakuracloud:index/CertificateAuthorityClientSubject:CertificateAuthorityClientSubject",
                    "description": "A `subject` block as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL for issuing the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "The number of hours after initial issuing that the certificate will become invalid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subject",
                "validityPeriodHours"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificate",
                        "id",
                        "issueState",
                        "notAfter",
                        "notBefore",
                        "serialNumber",
                        "subject",
                        "url",
                        "validityPeriodHours"
                    ]
                }
            }
        },
        "sakuracloud:index/CertificateAuthorityClientSubject:CertificateAuthorityClientSubject": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationUnits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonName",
                "country",
                "organization"
            ]
        },
        "sakuracloud:index/CertificateAuthorityServer:CertificateAuthorityServer": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "csr": {
                    "type": "string",
                    "description": "Input for issuing a certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hold": {
                    "type": "boolean",
                    "description": "Flag to suspend/hold the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueState": {
                    "type": "string",
                    "description": "Current state of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notAfter": {
                    "type": "string",
                    "description": "The date on which the certificate validity period ends, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notBefore": {
                    "type": "string",
                    "description": "The date on which the certificate validity period begins, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "Input for issuing a certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serialNumber": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "$ref": "#/types/sakuracloud:index/CertificateAuthorityServerSubject:CertificateAuthorityServerSubject",
                    "description": "A `subject` block as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "The number of hours after initial issuing that the certificate will become invalid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subject",
                "validityPeriodHours"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificate",
                        "id",
                        "issueState",
                        "notAfter",
                        "notBefore",
                        "serialNumber",
                        "subject",
                        "validityPeriodHours"
                    ]
                }
            }
        },
        "sakuracloud:index/CertificateAuthorityServerSubject:CertificateAuthorityServerSubject": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationUnits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonName",
                "country",
                "organization"
            ]
        },
        "sakuracloud:index/CertificateAuthoritySubject:CertificateAuthoritySubject": {
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organization": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "organizationUnits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commonName",
                "country",
                "organization"
            ]
        },
        "sakuracloud:index/ContainerRegistryUser:ContainerRegistryUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The user name used to authenticate remote access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password used to authenticate remote access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "The level of access that allow to the user. This must be one of [`all`/`readwrite`/`readonly`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password",
                "permission"
            ]
        },
        "sakuracloud:index/DNSRecord:DNSRecord": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the DNS Record. The length of this value must be in the range [`1`-`64`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The number of port. This must be in the range [`1`-`65535`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of target DNS Record. This must be in the range [`0`-`65535`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "The number of the TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS Record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of target DNS Record. This must be in the range [`0`-`65535`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "sakuracloud:index/DatabaseBackup:DatabaseBackup": {
            "properties": {
                "time": {
                    "type": "string",
                    "description": "The time to take backup. This must be formatted with `HH:mm`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of weekdays to backed up. The values in the list must be in [`sun`/`mon`/`tue`/`wed`/`thu`/`fri`/`sat`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/DatabaseNetworkInterface:DatabaseNetworkInterface": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by Database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to assign to the Database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the Database. This must be in the range [`8`-`29`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The number of the listening port. This must be in the range [`1024`-`65535`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The range of source IP addresses that allow to access to the Database via network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch to which the Database connects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "ipAddress",
                "netmask",
                "switchId"
            ]
        },
        "sakuracloud:index/DatabaseReadReplicaNetworkInterface:DatabaseReadReplicaNetworkInterface": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by read-replica database. If `gateway` isn't specified, it will be set to the same value of the master database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to assign to the read-replica database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the read-replica database. This must be in the range [`8`-`29`]. If `netmask` isn't specified, it will be set to the same value of the master database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The range of source IP addresses that allow to access to the read-replica database via network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch to which the read-replica database connects. If `switch_id` isn't specified, it will be set to the same value of the master database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gateway",
                        "ipAddress",
                        "netmask",
                        "switchId"
                    ]
                }
            }
        },
        "sakuracloud:index/GSLBHealthCheck:GSLBHealthCheck": {
            "properties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks. This must be in the range [`10`-`60`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The value of host header send when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port number used when checking by TCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This must be one of [`http`/`https`/`tcp`/`ping`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The response-code to expect when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "sakuracloud:index/GSLBServer:GSLBServer": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable as destination of load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight used when weighted load balancing is enabled. This must be in the range [`1`-`10000`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "sakuracloud:index/LoadBalancerNetworkInterface:LoadBalancerNetworkInterface": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by LoadBalancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address to assign to the LoadBalancer. .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the LoadBalancer. This must be in the range [`8`-`29`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch to which the LoadBalancer connects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrid": {
                    "type": "integer",
                    "description": "The Virtual Router Identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddresses",
                "netmask",
                "switchId",
                "vrid"
            ]
        },
        "sakuracloud:index/LoadBalancerVip:LoadBalancerVip": {
            "properties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks. This must be in the range [`10`-`2147483647`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VIP. The length of this value must be in the range [`1`-`512`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The target port number for load-balancing. This must be in the range [`1`-`65535`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/LoadBalancerVipServer:LoadBalancerVipServer"
                    },
                    "description": "One or more `server` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sorryServer": {
                    "type": "string",
                    "description": "The IP address of the SorryServer. This will be used when all servers under this VIP are down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port",
                "vip"
            ]
        },
        "sakuracloud:index/LoadBalancerVipServer:LoadBalancerVipServer": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable as destination of load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the destination server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This must be one of [`http`/`https`/`tcp`/`ping`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The response code to expect when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "protocol"
            ]
        },
        "sakuracloud:index/LocalRouterNetworkInterface:LocalRouterNetworkInterface": {
            "properties": {
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address to assign to the LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the LocalRouter. This must be in the range [`8`-`29`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrid": {
                    "type": "integer",
                    "description": "The Virtual Router Identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddresses",
                "netmask",
                "vip",
                "vrid"
            ]
        },
        "sakuracloud:index/LocalRouterPeer:LocalRouterPeer": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the LocalRouter. The length of this value must be in the range [`1`-`512`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable the LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerId": {
                    "type": "string",
                    "description": "The ID of the peer LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the peer LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "peerId",
                "secretKey"
            ]
        },
        "sakuracloud:index/LocalRouterStaticRoute:LocalRouterStaticRoute": {
            "properties": {
                "nextHop": {
                    "type": "string",
                    "description": "The IP address of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "The CIDR block of destination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nextHop",
                "prefix"
            ]
        },
        "sakuracloud:index/LocalRouterSwitch:LocalRouterSwitch": {
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The category name of connected services (e.g. `cloud`, `vps`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "code": {
                    "type": "string",
                    "description": "The resource ID of the Switch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the Zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "code",
                "zoneId"
            ]
        },
        "sakuracloud:index/MobileGatewayPrivateNetworkInterface:MobileGatewayPrivateNetworkInterface": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to assign to the MobileGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the MobileGateway. This must be in the range [`8`-`29`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch to which the MobileGateway connects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "netmask",
                "switchId"
            ]
        },
        "sakuracloud:index/MobileGatewaySim:MobileGatewaySim": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to assign to the SIM.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "simId": {
                    "type": "string",
                    "description": "The id of the Switch connected to the MobileGateway.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "simId"
            ]
        },
        "sakuracloud:index/MobileGatewaySimRoute:MobileGatewaySimRoute": {
            "properties": {
                "prefix": {
                    "type": "string",
                    "description": "The destination network prefix used by the sim routing. This must be specified by CIDR block formatted string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "simId": {
                    "type": "string",
                    "description": "The id of the routing destination SIM.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "prefix",
                "simId"
            ]
        },
        "sakuracloud:index/MobileGatewayStaticRoute:MobileGatewayStaticRoute": {
            "properties": {
                "nextHop": {
                    "type": "string",
                    "description": "The IP address of next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "The destination network prefix used by static routing. This must be specified by CIDR block formatted string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nextHop",
                "prefix"
            ]
        },
        "sakuracloud:index/MobileGatewayTrafficControl:MobileGatewayTrafficControl": {
            "properties": {
                "autoTrafficShaping": {
                    "type": "boolean",
                    "description": "The flag to enable the traffic shaping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bandWidthLimit": {
                    "type": "integer",
                    "description": "The bandwidth allowed when the traffic shaping is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableEmail": {
                    "type": "boolean",
                    "description": "The flag to enable email notification when the traffic shaping is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableSlack": {
                    "type": "boolean",
                    "description": "The flag to enable slack notification when the traffic shaping is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quota": {
                    "type": "integer",
                    "description": "The threshold of monthly traffic usage to enable to the traffic shaping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackWebhook": {
                    "type": "string",
                    "description": "The webhook URL used when sends notification. It will only used when `enable_slack` is set `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "quota"
            ]
        },
        "sakuracloud:index/NFSNetworkInterface:NFSNetworkInterface": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by NFS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to assign to the NFS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the NFS. This must be in the range [`8`-`29`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch to which the NFS connects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "netmask",
                "switchId"
            ]
        },
        "sakuracloud:index/PacketFilterExpression:PacketFilterExpression": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "The flag to allow the packet through the filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the packetFilter. The length of this value must be in the range [`1`-`512`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationPort": {
                    "type": "string",
                    "description": "A destination port number or port range used for filtering (e.g. `1024`, `1024-2048`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for filtering. This must be one of [`http`/`https`/`tcp`/`udp`/`icmp`/`fragment`/`ip`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceNetwork": {
                    "type": "string",
                    "description": "A source IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "description": "A source port number or port range used for filtering (e.g. `1024`, `1024-2048`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "sakuracloud:index/PacketFilterRuleExpression:PacketFilterRuleExpression": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "The flag to allow the packet through the filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationPort": {
                    "type": "string",
                    "description": "A destination port number or port range used for filtering (e.g. `1024`, `1024-2048`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for filtering. This must be one of [`http`/`https`/`tcp`/`udp`/`icmp`/`fragment`/`ip`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceNetwork": {
                    "type": "string",
                    "description": "A source IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "description": "A source port number or port range used for filtering (e.g. `1024`, `1024-2048`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "sakuracloud:index/ProxyLBACMECertificate:ProxyLBACMECertificate": {
            "properties": {
                "additionalCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBACMECertificateAdditionalCertificate:ProxyLBACMECertificateAdditionalCertificate"
                    },
                    "description": "A list of `additional_certificate` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commonName": {
                    "type": "string",
                    "description": "The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intermediateCert": {
                    "type": "string",
                    "description": "The intermediate certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCert": {
                    "type": "string",
                    "description": "The certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAltNames": {
                    "type": "string",
                    "description": "The Subject alternative names used by ACME. Changing this forces a new resource to be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalCertificates",
                        "commonName",
                        "intermediateCert",
                        "privateKey",
                        "serverCert",
                        "subjectAltNames"
                    ]
                }
            }
        },
        "sakuracloud:index/ProxyLBACMECertificateAdditionalCertificate:ProxyLBACMECertificateAdditionalCertificate": {
            "properties": {
                "intermediateCert": {
                    "type": "string",
                    "description": "The intermediate certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCert": {
                    "type": "string",
                    "description": "The certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "intermediateCert",
                        "privateKey",
                        "serverCert"
                    ]
                }
            }
        },
        "sakuracloud:index/ProxyLBBindPort:ProxyLBBindPort": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The number of listening port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyMode": {
                    "type": "string",
                    "description": "The proxy mode. This must be one of [`http`/`https`/`tcp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectToHttps": {
                    "type": "boolean",
                    "description": "The flag to enable redirection from http to https. This flag is used only when `proxy_mode` is `http`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "responseHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBBindPortResponseHeader:ProxyLBBindPortResponseHeader"
                    },
                    "description": "One or more `response_header` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslPolicy": {
                    "type": "string",
                    "description": "The ssl policy. This must be one of [`TLS-1-2-2019-04`/`TLS-1-2-2021-06`/`TLS-1-3-2021-06`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportHttp2": {
                    "type": "boolean",
                    "description": "The flag to enable HTTP/2. This flag is used only when `proxy_mode` is `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "proxyMode"
            ]
        },
        "sakuracloud:index/ProxyLBBindPortResponseHeader:ProxyLBBindPortResponseHeader": {
            "properties": {
                "header": {
                    "type": "string",
                    "description": "The field name of HTTP header added to response by the ProxyLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The field value of HTTP header added to response by the ProxyLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "header",
                "value"
            ]
        },
        "sakuracloud:index/ProxyLBCertificate:ProxyLBCertificate": {
            "properties": {
                "additionalCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBCertificateAdditionalCertificate:ProxyLBCertificateAdditionalCertificate"
                    },
                    "description": "One or more `additional_certificate` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intermediateCert": {
                    "type": "string",
                    "description": "The intermediate certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCert": {
                    "type": "string",
                    "description": "The certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAltNames": {
                    "type": "string",
                    "description": "The subject alternative names of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "commonName",
                        "intermediateCert",
                        "privateKey",
                        "serverCert",
                        "subjectAltNames"
                    ]
                }
            }
        },
        "sakuracloud:index/ProxyLBCertificateAdditionalCertificate:ProxyLBCertificateAdditionalCertificate": {
            "properties": {
                "intermediateCert": {
                    "type": "string",
                    "description": "The intermediate certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCert": {
                    "type": "string",
                    "description": "The certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateKey",
                "serverCert"
            ]
        },
        "sakuracloud:index/ProxyLBHealthCheck:ProxyLBHealthCheck": {
            "properties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks. This must be in the range [`10`-`60`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The value of host header send when checking by HTTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path used when checking by HTTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port number used when checking by TCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This must be one of [`http`/`tcp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "sakuracloud:index/ProxyLBRule:ProxyLBRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The type of action to be performed when requests matches the rule. This must be one of [`forward`/`redirect`/`fixed`] Default: `forward`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedContentType": {
                    "type": "string",
                    "description": "Content-Type header value for fixed response sent when requests matches the rule. This must be one of [`text/plain`/`text/html`/`application/javascript`/`application/json`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedMessageBody": {
                    "type": "string",
                    "description": "Content body for fixed response sent when requests matches the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedStatusCode": {
                    "type": "string",
                    "description": "HTTP status code for fixed response sent when requests matches the rule. This must be one of [`200`/`403`/`503`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The name of load balancing group. When proxyLB received request which matched to `host` and `path`, proxyLB forwards the request to servers that having same group name. The length of this value must be in the range [`1`-`10`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The value of HTTP host header that is used as condition of rule-based balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The request path that is used as condition of rule-based balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectLocation": {
                    "type": "string",
                    "description": "The URL to redirect to when the request matches the rule. see https://manual.sakura.ad.jp/cloud/appliance/enhanced-lb/#enhanced-lb-rule for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectStatusCode": {
                    "type": "string",
                    "description": "HTTP status code for redirects sent when requests matches the rule. This must be one of [`301`/`302`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/ProxyLBServer:ProxyLBServer": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable as destination of load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The name of load balancing group. This is used when using rule-based load balancing. The length of this value must be in the range [`1`-`10`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the destination server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port number of the destination server. This must be in the range [`1`-`65535`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "port"
            ]
        },
        "sakuracloud:index/ProxyLBSorryServer:ProxyLBSorryServer": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the SorryServer. This will be used when all servers are down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port number of the SorryServer. This will be used when all servers are down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "sakuracloud:index/ProxyLBSyslog:ProxyLBSyslog": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The number of syslog port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "description": "The address of syslog server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port"
                    ]
                }
            }
        },
        "sakuracloud:index/ServerDiskEditParameter:ServerDiskEditParameter": {
            "properties": {
                "changePartitionUuid": {
                    "type": "boolean",
                    "description": "The flag to change partition uuid.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disablePwAuth": {
                    "type": "boolean",
                    "description": "The flag to disable password authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableDhcp": {
                    "type": "boolean",
                    "description": "The flag to enable DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway address used by the Server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the Server. The length of this value must be in the range [`1`-`64`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to assign to the Server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the Server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noteIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the Note id.  \nNote: **The `note_ids` will be removed in a future version. Please use the `note` instead**\n",
                    "deprecationMessage": "The note_ids field will be removed in a future version. Please use the note field instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ServerDiskEditParameterNote:ServerDiskEditParameterNote"
                    },
                    "description": "A list of the `note` block as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password of default user. The length of this value must be in the range [`8`-`64`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the SSHKey id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the SSHKey text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/ServerDiskEditParameterNote:ServerDiskEditParameterNote": {
            "properties": {
                "apiKeyId": {
                    "type": "string",
                    "description": "The id of the API key to be injected into the Note/StartupScript when editing the disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The id of the Note/StartupScript.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The value of the variable that be injected into the Note/StartupScript when editing the disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "sakuracloud:index/ServerNetworkInterface:ServerNetworkInterface": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packetFilterId": {
                    "type": "string",
                    "description": "The id of the packet filter to attach to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstream": {
                    "type": "string",
                    "description": "The upstream type or upstream switch id. This must be one of [`shared`/`disconnect`/`\u003cswitch id\u003e`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userIpAddress": {
                    "type": "string",
                    "description": "The IP address for only display. This value doesn't affect actual NIC settings.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "upstream"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "macAddress",
                        "upstream",
                        "userIpAddress"
                    ]
                }
            }
        },
        "sakuracloud:index/SimpleMonitorHealthCheck:SimpleMonitorHealthCheck": {
            "properties": {
                "community": {
                    "type": "string",
                    "description": "The SNMP community string used when checking by SNMP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containsString": {
                    "type": "string",
                    "description": "The string that should be included in the response body when checking for HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excepctedData": {
                    "type": "string",
                    "description": "The expected value used when checking by DNS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ftps": {
                    "type": "string",
                    "description": "The methods of invoking security for monitoring with FTPS. This must be one of [``/`implicit`/`explicit`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The value of host header send when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "The flag to enable HTTP/2 when checking by HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oid": {
                    "type": "string",
                    "description": "The SNMP OID used when checking by SNMP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password for basic auth used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The target port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This must be one of [`http`/`https`/`ping`/`tcp`/`dns`/`ssh`/`smtp`/`pop3`/`snmp`/`sslcertificate`/`ftp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "qname": {
                    "type": "string",
                    "description": "The FQDN used when checking by DNS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remainingDays": {
                    "type": "integer",
                    "description": "The number of remaining days until certificate expiration used when checking SSL certificates. This must be in the range [`1`-`9999`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sni": {
                    "type": "boolean",
                    "description": "The flag to enable SNI when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snmpVersion": {
                    "type": "string",
                    "description": "The SNMP version used when checking by SNMP. This must be one of `1`/`2c`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "integer",
                    "description": "The response-code to expect when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The user name for basic auth used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "port",
                        "protocol"
                    ]
                }
            }
        },
        "sakuracloud:index/VPCRouterDhcpServer:VPCRouterDhcpServer": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address of DNS server to assign to DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaceIndex": {
                    "type": "integer",
                    "description": "The index of the network interface on which to enable the DHCP service. This must be in the range [`1`-`7`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStart": {
                    "type": "string",
                    "description": "The start value of IP address range to assign to DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStop": {
                    "type": "string",
                    "description": "The end value of IP address range to assign to DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "interfaceIndex",
                "rangeStart",
                "rangeStop"
            ]
        },
        "sakuracloud:index/VPCRouterDhcpStaticMapping:VPCRouterDhcpStaticMapping": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The static IP address to assign to DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "The source MAC address of static mapping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "macAddress"
            ]
        },
        "sakuracloud:index/VPCRouterFirewall:VPCRouterFirewall": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The direction to apply the firewall. This must be one of [`send`/`receive`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterFirewallExpression:VPCRouterFirewallExpression"
                    },
                    "description": "One or more `expression` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaceIndex": {
                    "type": "integer",
                    "description": "The index of the network interface on which to enable filtering. This must be in the range [`0`-`7`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "direction",
                "expressions"
            ]
        },
        "sakuracloud:index/VPCRouterFirewallExpression:VPCRouterFirewallExpression": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "The flag to allow the packet through the filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the expression. The length of this value must be in the range [`0`-`512`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationNetwork": {
                    "type": "string",
                    "description": "A destination IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationPort": {
                    "type": "string",
                    "description": "A destination port number or port range used for filtering (e.g. `1024`, `1024-2048`). This is only used when `protocol` is `tcp` or `udp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logging": {
                    "type": "boolean",
                    "description": "The flag to enable packet logging when matching the expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for filtering. This must be one of [`tcp`/`udp`/`icmp`/`ip`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceNetwork": {
                    "type": "string",
                    "description": "A source IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "description": "A source port number or port range used for filtering (e.g. `1024`, `1024-2048`). This is only used when `protocol` is `tcp` or `udp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allow",
                "protocol"
            ]
        },
        "sakuracloud:index/VPCRouterL2tp:VPCRouterL2tp": {
            "properties": {
                "preSharedSecret": {
                    "type": "string",
                    "description": "The pre shared secret for the VPN. The length of this value must be in the range [`0`-`40`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStart": {
                    "type": "string",
                    "description": "The start value of IP address range to assign to DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStop": {
                    "type": "string",
                    "description": "The end value of IP address range to assign to DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "preSharedSecret",
                "rangeStart",
                "rangeStop"
            ]
        },
        "sakuracloud:index/VPCRouterPortForwarding:VPCRouterPortForwarding": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the port forwarding. The length of this value must be in the range [`0`-`512`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The destination ip address of the port forwarding.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The destination port number of the port forwarding. This will be a port number on a private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for port forwarding. This must be one of [`tcp`/`udp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The source port number of the port forwarding. This must be a port number on a public network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateIp",
                "privatePort",
                "protocol",
                "publicPort"
            ]
        },
        "sakuracloud:index/VPCRouterPptp:VPCRouterPptp": {
            "properties": {
                "rangeStart": {
                    "type": "string",
                    "description": "The start value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStop": {
                    "type": "string",
                    "description": "The end value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeStart",
                "rangeStop"
            ]
        },
        "sakuracloud:index/VPCRouterPrivateNetworkInterface:VPCRouterPrivateNetworkInterface": {
            "properties": {
                "index": {
                    "type": "integer",
                    "description": "The index of the network interface. This must be in the range [`1`-`7`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ip address to assign to the network interface. This is required only one value when `plan` is `standard`, two values otherwise.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the connected switch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address to assign to the network interface. This is only required when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "ipAddresses",
                "netmask",
                "switchId"
            ]
        },
        "sakuracloud:index/VPCRouterPublicNetworkInterface:VPCRouterPublicNetworkInterface": {
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ip alias to assign to the VPC Router. This can only be specified if `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the IP address to assign to the VPC Router. This is required only one value when `plan` is `standard`, two values otherwise.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch to connect. This is only required when when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address of the VPC Router. This is only required when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrid": {
                    "type": "integer",
                    "description": "The Virtual Router Identifier. This is only required when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/VPCRouterSiteToSiteVpn:VPCRouterSiteToSiteVpn": {
            "properties": {
                "localPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR block of the network under the VPC Router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peer": {
                    "type": "string",
                    "description": "The IP address of the opposing appliance connected to the VPC Router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preSharedSecret": {
                    "type": "string",
                    "description": "The pre shared secret for the VPN. The length of this value must be in the range [`0`-`40`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteId": {
                    "type": "string",
                    "description": "The id of the opposing appliance connected to the VPC Router. This is typically set same as value of `peer`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR block of VPN connected networks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localPrefixes",
                "peer",
                "preSharedSecret",
                "remoteId",
                "routes"
            ]
        },
        "sakuracloud:index/VPCRouterStaticNat:VPCRouterStaticNat": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the static nat. The length of this value must be in the range [`0`-`512`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address used for the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address used for the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "privateIp",
                "publicIp"
            ]
        },
        "sakuracloud:index/VPCRouterStaticRoute:VPCRouterStaticRoute": {
            "properties": {
                "nextHop": {
                    "type": "string",
                    "description": "The IP address of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "The CIDR block of destination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nextHop",
                "prefix"
            ]
        },
        "sakuracloud:index/VPCRouterUser:VPCRouterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The user name used to authenticate remote access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password used to authenticate remote access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ]
        },
        "sakuracloud:index/VPCRouterWireGuard:VPCRouterWireGuard": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address for WireGuard server. This must be formatted with xxx.xxx.xxx.xxx/nn.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterWireGuardPeer:VPCRouterWireGuardPeer"
                    },
                    "description": "One or more `peer` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "the public key of the WireGuard client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress",
                        "publicKey"
                    ]
                }
            }
        },
        "sakuracloud:index/VPCRouterWireGuardPeer:VPCRouterWireGuardPeer": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address for peer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "the of the peer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "the public key of the WireGuard client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "name",
                "publicKey"
            ]
        },
        "sakuracloud:index/getArchiveFilter:getArchiveFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getArchiveFilterCondition:getArchiveFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getArchiveFilterCondition:getArchiveFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getBridgeFilter:getBridgeFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getBridgeFilterCondition:getBridgeFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getBridgeFilterCondition:getBridgeFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getCDROMFilter:getCDROMFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getCDROMFilterCondition:getCDROMFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getCDROMFilterCondition:getCDROMFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getCertificateAuthorityClient:getCertificateAuthorityClient": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hold": {
                    "type": "boolean",
                    "description": "Flag to suspend/hold the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueState": {
                    "type": "string",
                    "description": "Current state of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notAfter": {
                    "type": "string",
                    "description": "The date on which the certificate validity period ends, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notBefore": {
                    "type": "string",
                    "description": "The date on which the certificate validity period begins, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serialNumber": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectString": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL for issuing the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificate",
                "hold",
                "id",
                "issueState",
                "notAfter",
                "notBefore",
                "serialNumber",
                "subjectString",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getCertificateAuthorityFilter:getCertificateAuthorityFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getCertificateAuthorityFilterCondition:getCertificateAuthorityFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getCertificateAuthorityFilterCondition:getCertificateAuthorityFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getCertificateAuthorityServer:getCertificateAuthorityServer": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hold": {
                    "type": "boolean",
                    "description": "Flag to suspend/hold the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueState": {
                    "type": "string",
                    "description": "Current state of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notAfter": {
                    "type": "string",
                    "description": "The date on which the certificate validity period ends, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notBefore": {
                    "type": "string",
                    "description": "The date on which the certificate validity period begins, in RFC3339 format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serialNumber": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectString": {
                    "type": "string",
                    "description": ".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificate",
                "id",
                "issueState",
                "notAfter",
                "notBefore",
                "serialNumber",
                "subjectAlternativeNames",
                "subjectString"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getContainerRegistryFilter:getContainerRegistryFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getContainerRegistryFilterCondition:getContainerRegistryFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getContainerRegistryFilterCondition:getContainerRegistryFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getContainerRegistryUser:getContainerRegistryUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permission": {
                    "type": "string",
                    "description": "The level of access that allow to the user. This will be one of [`all`/`readwrite`/`readonly`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permission"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getDNSFilter:getDNSFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getDNSFilterCondition:getDNSFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getDNSFilterCondition:getDNSFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getDNSRecord:getDNSRecord": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The number of port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of target DNS Record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "The number of the TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS Record. This will be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS Record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of target DNS Record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "port",
                "priority",
                "ttl",
                "type",
                "value",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getDatabaseBackup:getDatabaseBackup": {
            "properties": {
                "time": {
                    "type": "string",
                    "description": "The time to take backup. This will be formatted with `HH:mm`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of name of weekday that doing backup. This will be in [`sun`/`mon`/`tue`/`wed`/`thu`/`fri`/`sat`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "time",
                "weekdays"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getDatabaseFilter:getDatabaseFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getDatabaseFilterCondition:getDatabaseFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getDatabaseFilterCondition:getDatabaseFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getDatabaseNetworkInterface:getDatabaseNetworkInterface": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by Database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address assigned to the Database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the Database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The number of the listening port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The range of source IP addresses that allow to access to the Database via network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch connected from the Database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "ipAddress",
                "netmask",
                "port",
                "sourceRanges",
                "switchId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getDiskFilter:getDiskFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getDiskFilterCondition:getDiskFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getDiskFilterCondition:getDiskFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getESMEFilter:getESMEFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getESMEFilterCondition:getESMEFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getESMEFilterCondition:getESMEFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getEnhancedDBFilter:getEnhancedDBFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getEnhancedDBFilterCondition:getEnhancedDBFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getEnhancedDBFilterCondition:getEnhancedDBFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getGSLBFilter:getGSLBFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getGSLBFilterCondition:getGSLBFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getGSLBFilterCondition:getGSLBFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getGSLBHealthCheck:getGSLBHealthCheck": {
            "properties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The value of host header send when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The port number used when checking by TCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This will be one of [`http`/`https`/`tcp`/`ping`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The response-code to expect when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delayLoop",
                "hostHeader",
                "path",
                "port",
                "protocol",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getGSLBServer:getGSLBServer": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable as destination of load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight used when weighted load balancing is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "ipAddress",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getIconFilter:getIconFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getIconFilterCondition:getIconFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getIconFilterCondition:getIconFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getInternetFilter:getInternetFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getInternetFilterCondition:getInternetFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getInternetFilterCondition:getInternetFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getLoadBalancerFilter:getLoadBalancerFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getLoadBalancerFilterCondition:getLoadBalancerFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getLoadBalancerFilterCondition:getLoadBalancerFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getLoadBalancerNetworkInterface:getLoadBalancerNetworkInterface": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by LoadBalancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP address assigned to the LoadBalancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the LoadBalancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch connected from the LoadBalancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrid": {
                    "type": "integer",
                    "description": "The Virtual Router Identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "ipAddresses",
                "netmask",
                "switchId",
                "vrid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getLoadBalancerVip:getLoadBalancerVip": {
            "properties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the VIP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The target port number for load-balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getLoadBalancerVipServer:getLoadBalancerVipServer"
                    },
                    "description": "A list of `server` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sorryServer": {
                    "type": "string",
                    "description": "The IP address of the SorryServer. This will be used when all servers under this VIP are down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delayLoop",
                "description",
                "port",
                "servers",
                "sorryServer",
                "vip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getLoadBalancerVipServer:getLoadBalancerVipServer": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable as destination of load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the destination server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This will be one of [`http`/`https`/`tcp`/`ping`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The response code to expect when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "ipAddress",
                "path",
                "protocol",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getLocalRouterFilter:getLocalRouterFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getLocalRouterFilterCondition:getLocalRouterFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getLocalRouterFilterCondition:getLocalRouterFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getLocalRouterNetworkInterface:getLocalRouterNetworkInterface": {
            "properties": {
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP address assigned to the LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrid": {
                    "type": "integer",
                    "description": "The Virtual Router Identifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddresses",
                "netmask",
                "vip",
                "vrid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getLocalRouterPeer:getLocalRouterPeer": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable the LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peerId": {
                    "type": "string",
                    "description": "The ID of the peer LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key of the peer LocalRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "peerId",
                "secretKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getLocalRouterStaticRoute:getLocalRouterStaticRoute": {
            "properties": {
                "nextHop": {
                    "type": "string",
                    "description": "The IP address of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "The CIDR block of destination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nextHop",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getLocalRouterSwitch:getLocalRouterSwitch": {
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The category name of connected services (e.g. `cloud`, `vps`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "code": {
                    "type": "string",
                    "description": "The resource ID of the Switch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the Zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "category",
                "code",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getNFSFilter:getNFSFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getNFSFilterCondition:getNFSFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getNFSFilterCondition:getNFSFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getNFSNetworkInterface:getNFSNetworkInterface": {
            "properties": {
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by NFS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address assigned to the NFS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the NFS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch connected from the NFS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "gateway",
                "ipAddress",
                "netmask",
                "switchId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getNoteFilter:getNoteFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getNoteFilterCondition:getNoteFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getNoteFilterCondition:getNoteFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getPacketFilterExpression:getPacketFilterExpression": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "The flag to allow the packet through the filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationPort": {
                    "type": "string",
                    "description": "A destination port number or port range used for filtering (e.g. `1024`, `1024-2048`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for filtering. This will be one of [`http`/`https`/`tcp`/`udp`/`icmp`/`fragment`/`ip`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceNetwork": {
                    "type": "string",
                    "description": "A source IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "description": "A source port number or port range used for filtering (e.g. `1024`, `1024-2048`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allow",
                "description",
                "destinationPort",
                "protocol",
                "sourceNetwork",
                "sourcePort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getPacketFilterFilter:getPacketFilterFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getPacketFilterFilterCondition:getPacketFilterFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getPacketFilterFilterCondition:getPacketFilterFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getPrivateHostFilter:getPrivateHostFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getPrivateHostFilterCondition:getPrivateHostFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getPrivateHostFilterCondition:getPrivateHostFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getProxyLBBindPort:getProxyLBBindPort": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The number of syslog port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyMode": {
                    "type": "string",
                    "description": "The proxy mode. This will be one of [`http`/`https`/`tcp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectToHttps": {
                    "type": "boolean",
                    "description": "The flag to enable redirection from http to https. This flag is used only when `proxy_mode` is `http`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "responseHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getProxyLBBindPortResponseHeader:getProxyLBBindPortResponseHeader"
                    },
                    "description": "A list of `response_header` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportHttp2": {
                    "type": "boolean",
                    "description": "The flag to enable HTTP/2. This flag is used only when `proxy_mode` is `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port",
                "proxyMode",
                "redirectToHttps",
                "responseHeaders",
                "sslPolicy",
                "supportHttp2"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBBindPortResponseHeader:getProxyLBBindPortResponseHeader": {
            "properties": {
                "header": {
                    "type": "string",
                    "description": "The field name of HTTP header added to response by the ProxyLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The field value of HTTP header added to response by the ProxyLB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "header",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBCertificate:getProxyLBCertificate": {
            "properties": {
                "additionalCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getProxyLBCertificateAdditionalCertificate:getProxyLBCertificateAdditionalCertificate"
                    },
                    "description": "A list of `additional_certificate` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intermediateCert": {
                    "type": "string",
                    "description": "The intermediate certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCert": {
                    "type": "string",
                    "description": "The certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subjectAltNames": {
                    "type": "string",
                    "description": "The subject alternative names of the certificate.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalCertificates",
                "commonName",
                "intermediateCert",
                "privateKey",
                "serverCert",
                "subjectAltNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBCertificateAdditionalCertificate:getProxyLBCertificateAdditionalCertificate": {
            "properties": {
                "intermediateCert": {
                    "type": "string",
                    "description": "The intermediate certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCert": {
                    "type": "string",
                    "description": "The certificate for a server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "intermediateCert",
                "privateKey",
                "serverCert"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBFilter:getProxyLBFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getProxyLBFilterCondition:getProxyLBFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getProxyLBFilterCondition:getProxyLBFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getProxyLBHealthCheck:getProxyLBHealthCheck": {
            "properties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The value of host header send when checking by HTTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The request path that is used as condition of rule-based balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The number of syslog port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This will be one of [`http`/`tcp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "delayLoop",
                "hostHeader",
                "path",
                "port",
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBRule:getProxyLBRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The type of action to be performed when requests matches the rule. This will be one of [`forward`/`redirect`/`fixed`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedContentType": {
                    "type": "string",
                    "description": "Content-Type header value for fixed response sent when requests matches the rule. This will be one of [`text/plain`/`text/html`/`application/javascript`/`application/json`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedMessageBody": {
                    "type": "string",
                    "description": "Content body for fixed response sent when requests matches the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedStatusCode": {
                    "type": "string",
                    "description": "HTTP status code for fixed response sent when requests matches the rule. This will be one of [`200`/`403`/`503`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The name of load balancing group. This is used when using rule-based load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The value of HTTP host header that is used as condition of rule-based balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The request path that is used as condition of rule-based balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectLocation": {
                    "type": "string",
                    "description": "The URL to redirect to when the request matches the rule. see https://manual.sakura.ad.jp/cloud/appliance/enhanced-lb/#enhanced-lb-rule for details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectStatusCode": {
                    "type": "string",
                    "description": "HTTP status code for redirects sent when requests matches the rule. This will be one of [`301`/`302`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "fixedContentType",
                "fixedMessageBody",
                "fixedStatusCode",
                "group",
                "host",
                "path",
                "redirectLocation",
                "redirectStatusCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBServer:getProxyLBServer": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable as destination of load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "group": {
                    "type": "string",
                    "description": "The name of load balancing group. This is used when using rule-based load balancing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the SorryServer. This will be used when all servers are down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The number of syslog port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "group",
                "ipAddress",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBSorryServer:getProxyLBSorryServer": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address of the SorryServer. This will be used when all servers are down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The number of syslog port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getProxyLBSyslog:getProxyLBSyslog": {
            "properties": {
                "port": {
                    "type": "integer",
                    "description": "The number of syslog port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "description": "The address of syslog server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getSSHKeyFilter:getSSHKeyFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getSSHKeyFilterCondition:getSSHKeyFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getSSHKeyFilterCondition:getSSHKeyFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getServerFilter:getServerFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getServerFilterCondition:getServerFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getServerFilterCondition:getServerFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getServerNetworkInterface:getServerNetworkInterface": {
            "properties": {
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "packetFilterId": {
                    "type": "string",
                    "description": "The id of the packet filter attached to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstream": {
                    "type": "string",
                    "description": "The upstream type or upstream switch id. This will be one of [`shared`/`disconnect`/`\u003cswitch id\u003e`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userIpAddress": {
                    "type": "string",
                    "description": "The IP address for only display. This value doesn't affect actual NIC settings.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "macAddress",
                "packetFilterId",
                "upstream",
                "userIpAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getSimpleMonitorFilter:getSimpleMonitorFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getSimpleMonitorFilterCondition:getSimpleMonitorFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getSimpleMonitorFilterCondition:getSimpleMonitorFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getSimpleMonitorHealthCheck:getSimpleMonitorHealthCheck": {
            "properties": {
                "community": {
                    "type": "string",
                    "description": "The SNMP community string used when checking by SNMP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containsString": {
                    "type": "string",
                    "description": "The string that should be included in the response body when checking for HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excepctedData": {
                    "type": "string",
                    "description": "The expected value used when checking by DNS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ftps": {
                    "type": "string",
                    "description": "The methods of invoking security for monitoring with FTPS. This will be one of [``/`implicit`/`explicit`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The value of host header send when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "The flag to enable HTTP/2 when checking by HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oid": {
                    "type": "string",
                    "description": "The SNMP OID used when checking by SNMP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password for basic auth used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "The target port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for health checks. This will be one of [`http`/`https`/`ping`/`tcp`/`dns`/`ssh`/`smtp`/`pop3`/`snmp`/`sslcertificate`/`ftp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "qname": {
                    "type": "string",
                    "description": "The FQDN used when checking by DNS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remainingDays": {
                    "type": "integer",
                    "description": "The number of remaining days until certificate expiration used when checking SSL certificates.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sni": {
                    "type": "boolean",
                    "description": "The flag to enable SNI when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snmpVersion": {
                    "type": "string",
                    "description": "The SNMP version used when checking by SNMP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "integer",
                    "description": "The response-code to expect when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "The user name for basic auth used when checking by HTTP/HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "community",
                "containsString",
                "excepctedData",
                "ftps",
                "hostHeader",
                "http2",
                "oid",
                "password",
                "path",
                "port",
                "protocol",
                "qname",
                "remainingDays",
                "sni",
                "snmpVersion",
                "status",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getSwitchFilter:getSwitchFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getSwitchFilterCondition:getSwitchFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getSwitchFilterCondition:getSwitchFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getVPCRouterDhcpServer:getVPCRouterDhcpServer": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address of DNS server to assign to DHCP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaceIndex": {
                    "type": "integer",
                    "description": "The index of the network interface on which to enable filtering. This will be between `0`-`7`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStart": {
                    "type": "string",
                    "description": "The start value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStop": {
                    "type": "string",
                    "description": "The end value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsServers",
                "interfaceIndex",
                "rangeStart",
                "rangeStop"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterDhcpStaticMapping:getVPCRouterDhcpStaticMapping": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address for peer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "The source MAC address of static mapping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "macAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterFilter:getVPCRouterFilter": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getVPCRouterFilterCondition:getVPCRouterFilterCondition"
                    },
                    "description": "One or more name/values pairs used for filtering. There are several valid keys, for a full reference, check out finding section in the [SakuraCloud API reference](https://developer.sakura.ad.jp/cloud/api/1.1/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The resource id on SakuraCloud used for filtering.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource names on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The resource tags on SakuraCloud used for filtering. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "sakuracloud:index/getVPCRouterFilterCondition:getVPCRouterFilterCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The values of the condition. If multiple values ​​are specified, they combined as AND condition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ]
        },
        "sakuracloud:index/getVPCRouterFirewall:getVPCRouterFirewall": {
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "The direction to apply the firewall. This will be one of [`send`/`receive`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getVPCRouterFirewallExpression:getVPCRouterFirewallExpression"
                    },
                    "description": "A list of `expression` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interfaceIndex": {
                    "type": "integer",
                    "description": "The index of the network interface on which to enable filtering. This will be between `0`-`7`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "direction",
                "expressions",
                "interfaceIndex"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterFirewallExpression:getVPCRouterFirewallExpression": {
            "properties": {
                "allow": {
                    "type": "boolean",
                    "description": "The flag to allow the packet through the filter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationNetwork": {
                    "type": "string",
                    "description": "A destination IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationPort": {
                    "type": "string",
                    "description": "A destination port number or port range used for filtering (e.g. `1024`, `1024-2048`). This is only used when `protocol` is `tcp` or `udp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logging": {
                    "type": "boolean",
                    "description": "The flag to enable packet logging when matching the expression.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for port forwarding. This will be one of [`tcp`/`udp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceNetwork": {
                    "type": "string",
                    "description": "A source IP address or CIDR block used for filtering (e.g. `192.0.2.1`, `192.0.2.0/24`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePort": {
                    "type": "string",
                    "description": "A source port number or port range used for filtering (e.g. `1024`, `1024-2048`). This is only used when `protocol` is `tcp` or `udp`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allow",
                "description",
                "destinationNetwork",
                "destinationPort",
                "logging",
                "protocol",
                "sourceNetwork",
                "sourcePort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterL2tp:getVPCRouterL2tp": {
            "properties": {
                "preSharedSecret": {
                    "type": "string",
                    "description": "The pre shared secret for the VPN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStart": {
                    "type": "string",
                    "description": "The start value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStop": {
                    "type": "string",
                    "description": "The end value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "preSharedSecret",
                "rangeStart",
                "rangeStop"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterPortForwarding:getVPCRouterPortForwarding": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address used for the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privatePort": {
                    "type": "integer",
                    "description": "The destination port number of the port forwarding. This will be a port number on a private network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used for port forwarding. This will be one of [`tcp`/`udp`].\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicPort": {
                    "type": "integer",
                    "description": "The source port number of the port forwarding. This will be a port number on a public network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "privateIp",
                "privatePort",
                "protocol",
                "publicPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterPptp:getVPCRouterPptp": {
            "properties": {
                "rangeStart": {
                    "type": "string",
                    "description": "The start value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rangeStop": {
                    "type": "string",
                    "description": "The end value of IP address range to assign to PPTP client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rangeStart",
                "rangeStop"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterPrivateNetworkInterface:getVPCRouterPrivateNetworkInterface": {
            "properties": {
                "index": {
                    "type": "integer",
                    "description": "The index of the network interface. This will be between `1`-`7`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the IP address assigned to the VPC Router. This will be only one value when `plan` is `standard`, two values otherwise.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch connected from the VPCRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address of the VPC Router. This is only used when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "ipAddresses",
                "netmask",
                "switchId",
                "vip"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterPublicNetworkInterface:getVPCRouterPublicNetworkInterface": {
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ip alias assigned to the VPC Router. This is only used when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the IP address assigned to the VPC Router. This will be only one value when `plan` is `standard`, two values otherwise.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch connected from the VPCRouter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address of the VPC Router. This is only used when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vrid": {
                    "type": "integer",
                    "description": "The Virtual Router Identifier. This is only used when `plan` is not `standard`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aliases",
                "ipAddresses",
                "switchId",
                "vip",
                "vrid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterSiteToSiteVpn:getVPCRouterSiteToSiteVpn": {
            "properties": {
                "localPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR block of the network under the VPC Router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peer": {
                    "type": "string",
                    "description": "A list of `peer` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preSharedSecret": {
                    "type": "string",
                    "description": "The pre shared secret for the VPN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteId": {
                    "type": "string",
                    "description": "The id of the opposing appliance connected to the VPC Router. This is typically set same as value of `peer`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR block of VPN connected networks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localPrefixes",
                "peer",
                "preSharedSecret",
                "remoteId",
                "routes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterStaticNat:getVPCRouterStaticNat": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIp": {
                    "type": "string",
                    "description": "The private IP address used for the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address used for the static NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "privateIp",
                "publicIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterStaticRoute:getVPCRouterStaticRoute": {
            "properties": {
                "nextHop": {
                    "type": "string",
                    "description": "The IP address of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "The CIDR block of destination.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nextHop",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterUser:getVPCRouterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password used to authenticate remote access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterWireGuard:getVPCRouterWireGuard": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address for peer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/getVPCRouterWireGuardPeer:getVPCRouterWireGuardPeer"
                    },
                    "description": "A list of `peer` blocks as defined below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "the public key of the WireGuard client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "peers",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sakuracloud:index/getVPCRouterWireGuardPeer:getVPCRouterWireGuardPeer": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address for peer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the target field. This value is case-sensitive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "description": "the public key of the WireGuard client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "name",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the sakuracloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "acceptLanguage": {
                "type": "string",
                "description": "The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the\n`SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "apiRequestRateLimit": {
                "type": "integer",
                "description": "The maximum number of SakuraCloud API calls per second. It can also be sourced from the `SAKURACLOUD_RATE_LIMIT`\nenvironment variables, or via a shared credentials file if `profile` is specified. Default:`10`\n"
            },
            "apiRequestTimeout": {
                "type": "integer",
                "description": "The timeout seconds for each SakuraCloud API call. It can also be sourced from the `SAKURACLOUD_API_REQUEST_TIMEOUT`\nenvironment variables, or via a shared credentials file if `profile` is specified. Default:`300`\n"
            },
            "apiRootUrl": {
                "type": "string",
                "description": "The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment variables, or\nvia a shared credentials file if `profile` is specified. Default:`https://secure.sakura.ad.jp/cloud/zone`\n"
            },
            "defaultZone": {
                "type": "string",
                "description": "The name of zone to use as default for global resources. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_DEFAULT_ZONE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "fakeMode": {
                "type": "string",
                "description": "The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can also be sourced\nfrom the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "fakeStorePath": {
                "type": "string",
                "description": "The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping the\nprovider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared credentials file if\n`profile` is specified\n"
            },
            "profile": {
                "type": "string",
                "description": "The profile name of your SakuraCloud account. Default:`default`\n"
            },
            "retryMax": {
                "type": "integer",
                "description": "The maximum number of API call retries used when SakuraCloud API returns status code `423` or `503`. It can also be\nsourced from the `SAKURACLOUD_RETRY_MAX` environment variables, or via a shared credentials file if `profile` is\nspecified. Default:`100`\n"
            },
            "retryWaitMax": {
                "type": "integer",
                "description": "The maximum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or\n`503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MAX` environment variables, or via a shared credentials\nfile if `profile` is specified\n"
            },
            "retryWaitMin": {
                "type": "integer",
                "description": "The minimum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or\n`503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MIN` environment variables, or via a shared credentials\nfile if `profile` is specified\n"
            },
            "secret": {
                "type": "string",
                "description": "The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "token": {
                "type": "string",
                "description": "The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "trace": {
                "type": "string",
                "description": "The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment variables, or via a\nshared credentials file if `profile` is specified\n"
            },
            "zone": {
                "type": "string",
                "description": "The name of zone to use as default. It must be provided, but it can also be sourced from the `SAKURACLOUD_ZONE`\nenvironment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "zones": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of available SakuraCloud zone name. It can also be sourced via a shared credentials file if `profile` is\nspecified. Default:[`is1a`, `is1b`, `tk1a`, `tk1v`]\n"
            }
        },
        "inputProperties": {
            "acceptLanguage": {
                "type": "string",
                "description": "The value of AcceptLanguage header used when calling SakuraCloud API. It can also be sourced from the\n`SAKURACLOUD_ACCEPT_LANGUAGE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "apiRequestRateLimit": {
                "type": "integer",
                "description": "The maximum number of SakuraCloud API calls per second. It can also be sourced from the `SAKURACLOUD_RATE_LIMIT`\nenvironment variables, or via a shared credentials file if `profile` is specified. Default:`10`\n"
            },
            "apiRequestTimeout": {
                "type": "integer",
                "description": "The timeout seconds for each SakuraCloud API call. It can also be sourced from the `SAKURACLOUD_API_REQUEST_TIMEOUT`\nenvironment variables, or via a shared credentials file if `profile` is specified. Default:`300`\n"
            },
            "apiRootUrl": {
                "type": "string",
                "description": "The root URL of SakuraCloud API. It can also be sourced from the `SAKURACLOUD_API_ROOT_URL` environment variables, or\nvia a shared credentials file if `profile` is specified. Default:`https://secure.sakura.ad.jp/cloud/zone`\n"
            },
            "defaultZone": {
                "type": "string",
                "description": "The name of zone to use as default for global resources. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_DEFAULT_ZONE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "fakeMode": {
                "type": "string",
                "description": "The flag to enable fake of SakuraCloud API call. It is for debugging or developping the provider. It can also be sourced\nfrom the `FAKE_MODE` environment variables, or via a shared credentials file if `profile` is specified\n"
            },
            "fakeStorePath": {
                "type": "string",
                "description": "The file path used by SakuraCloud API fake driver for storing fake data. It is for debugging or developping the\nprovider. It can also be sourced from the `FAKE_STORE_PATH` environment variables, or via a shared credentials file if\n`profile` is specified\n"
            },
            "profile": {
                "type": "string",
                "description": "The profile name of your SakuraCloud account. Default:`default`\n",
                "default": "default",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_PROFILE"
                    ]
                }
            },
            "retryMax": {
                "type": "integer",
                "description": "The maximum number of API call retries used when SakuraCloud API returns status code `423` or `503`. It can also be\nsourced from the `SAKURACLOUD_RETRY_MAX` environment variables, or via a shared credentials file if `profile` is\nspecified. Default:`100`\n"
            },
            "retryWaitMax": {
                "type": "integer",
                "description": "The maximum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or\n`503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MAX` environment variables, or via a shared credentials\nfile if `profile` is specified\n"
            },
            "retryWaitMin": {
                "type": "integer",
                "description": "The minimum wait interval(in seconds) for retrying API call used when SakuraCloud API returns status code `423` or\n`503`. It can also be sourced from the `SAKURACLOUD_RETRY_WAIT_MIN` environment variables, or via a shared credentials\nfile if `profile` is specified\n"
            },
            "secret": {
                "type": "string",
                "description": "The API secret of your SakuraCloud account. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_ACCESS_TOKEN_SECRET` environment variables, or via a shared credentials file if `profile` is specified\n",
                "default": "",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_ACCESS_TOKEN_SECRET"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The API token of your SakuraCloud account. It must be provided, but it can also be sourced from the\n`SAKURACLOUD_ACCESS_TOKEN` environment variables, or via a shared credentials file if `profile` is specified\n",
                "default": "",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_ACCESS_TOKEN"
                    ]
                }
            },
            "trace": {
                "type": "string",
                "description": "The flag to enable output trace log. It can also be sourced from the `SAKURACLOUD_TRACE` environment variables, or via a\nshared credentials file if `profile` is specified\n"
            },
            "zone": {
                "type": "string",
                "description": "The name of zone to use as default. It must be provided, but it can also be sourced from the `SAKURACLOUD_ZONE`\nenvironment variables, or via a shared credentials file if `profile` is specified\n",
                "default": "is1b",
                "defaultInfo": {
                    "environment": [
                        "SAKURACLOUD_ZONE"
                    ]
                }
            },
            "zones": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of available SakuraCloud zone name. It can also be sourced via a shared credentials file if `profile` is\nspecified. Default:[`is1a`, `is1b`, `tk1a`, `tk1v`]\n"
            }
        }
    },
    "resources": {
        "sakuracloud:index/archive:Archive": {
            "description": "Manages a SakuraCloud Archive.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\n// from archive/disk\nconst from_archive_or_disk = new sakuracloud.Archive(\"from-archive-or-disk\", {\n    description: \"description\",\n    sourceArchiveId: \"1.23456789012e+11\",\n    sourceArchiveZone: \"tk1a\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n// from shared archive\nconst from_shared_archive = new sakuracloud.Archive(\"from-shared-archive\", {\n    description: \"description\",\n    sourceSharedKey: \"is1a:123456789012:xxx\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n// from local file\nconst foobar = new sakuracloud.Archive(\"foobar\", {\n    archiveFile: \"test/dummy.raw\",\n    description: \"description\",\n    size: 20,\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\n# from archive/disk\nfrom_archive_or_disk = sakuracloud.Archive(\"from-archive-or-disk\",\n    description=\"description\",\n    source_archive_id=\"123456789012\",\n    source_archive_zone=\"tk1a\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n# from shared archive\nfrom_shared_archive = sakuracloud.Archive(\"from-shared-archive\",\n    description=\"description\",\n    source_shared_key=\"is1a:123456789012:xxx\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n# from local file\nfoobar = sakuracloud.Archive(\"foobar\",\n    archive_file=\"test/dummy.raw\",\n    description=\"description\",\n    size=20,\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // from archive/disk\n        var from_archive_or_disk = new Sakuracloud.Archive(\"from-archive-or-disk\", new Sakuracloud.ArchiveArgs\n        {\n            Description = \"description\",\n            SourceArchiveId = \"123456789012\",\n            SourceArchiveZone = \"tk1a\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n        // from shared archive\n        var from_shared_archive = new Sakuracloud.Archive(\"from-shared-archive\", new Sakuracloud.ArchiveArgs\n        {\n            Description = \"description\",\n            SourceSharedKey = \"is1a:123456789012:xxx\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n        // from local file\n        var foobar = new Sakuracloud.Archive(\"foobar\", new Sakuracloud.ArchiveArgs\n        {\n            ArchiveFile = \"test/dummy.raw\",\n            Description = \"description\",\n            Size = 20,\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewArchive(ctx, \"from_archive_or_disk\", \u0026sakuracloud.ArchiveArgs{\n\t\t\tDescription:       pulumi.String(\"description\"),\n\t\t\tSourceArchiveId:   pulumi.String(\"123456789012\"),\n\t\t\tSourceArchiveZone: pulumi.String(\"tk1a\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewArchive(ctx, \"from_shared_archive\", \u0026sakuracloud.ArchiveArgs{\n\t\t\tDescription:     pulumi.String(\"description\"),\n\t\t\tSourceSharedKey: pulumi.String(\"is1a:123456789012:xxx\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewArchive(ctx, \"foobar\", \u0026sakuracloud.ArchiveArgs{\n\t\t\tArchiveFile: pulumi.String(\"test/dummy.raw\"),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tSize:        pulumi.Int(20),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveFile": {
                    "type": "string",
                    "description": "The file path to upload to the SakuraCloud.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the archive. The length of this value must be in the range [`1`-`512`].\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The md5 checksum calculated from the base64 encoded file body. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the archive.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the archive. The length of this value must be in the range [`1`-`64`].\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of archive in GiB. This must be one of [`20`/`40`/`60`/`80`/`100`/`250`/`500`/`750`/`1024`]. Changing this forces a new resource to be created. Default:`20`.\n"
                },
                "sourceArchiveId": {
                    "type": "string",
                    "description": "The id of the source archive. This conflicts with [`source_disk_id`]. Changing this forces a new resource to be created.\n"
                },
                "sourceArchiveZone": {
                    "type": "string",
                    "description": "The share key of source shared archive. Changing this forces a new resource to be created.\n"
                },
                "sourceDiskId": {
                    "type": "string",
                    "description": "The id of the source disk. This conflicts with [`source_archive_id`]. Changing this forces a new resource to be created.\n"
                },
                "sourceSharedKey": {
                    "type": "string",
                    "description": "The share key of source shared archive. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the archive.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the archive will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "hash",
                "name",
                "size",
                "zone"
            ],
            "inputProperties": {
                "archiveFile": {
                    "type": "string",
                    "description": "The file path to upload to the SakuraCloud.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the archive. The length of this value must be in the range [`1`-`512`].\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The md5 checksum calculated from the base64 encoded file body. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the archive.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the archive. The length of this value must be in the range [`1`-`64`].\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of archive in GiB. This must be one of [`20`/`40`/`60`/`80`/`100`/`250`/`500`/`750`/`1024`]. Changing this forces a new resource to be created. Default:`20`.\n"
                },
                "sourceArchiveId": {
                    "type": "string",
                    "description": "The id of the source archive. This conflicts with [`source_disk_id`]. Changing this forces a new resource to be created.\n"
                },
                "sourceArchiveZone": {
                    "type": "string",
                    "description": "The share key of source shared archive. Changing this forces a new resource to be created.\n"
                },
                "sourceDiskId": {
                    "type": "string",
                    "description": "The id of the source disk. This conflicts with [`source_archive_id`]. Changing this forces a new resource to be created.\n"
                },
                "sourceSharedKey": {
                    "type": "string",
                    "description": "The share key of source shared archive. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the archive.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the archive will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Archive resources.\n",
                "properties": {
                    "archiveFile": {
                        "type": "string",
                        "description": "The file path to upload to the SakuraCloud.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the archive. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "hash": {
                        "type": "string",
                        "description": "The md5 checksum calculated from the base64 encoded file body. Changing this forces a new resource to be created.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the archive.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the archive. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of archive in GiB. This must be one of [`20`/`40`/`60`/`80`/`100`/`250`/`500`/`750`/`1024`]. Changing this forces a new resource to be created. Default:`20`.\n"
                    },
                    "sourceArchiveId": {
                        "type": "string",
                        "description": "The id of the source archive. This conflicts with [`source_disk_id`]. Changing this forces a new resource to be created.\n"
                    },
                    "sourceArchiveZone": {
                        "type": "string",
                        "description": "The share key of source shared archive. Changing this forces a new resource to be created.\n"
                    },
                    "sourceDiskId": {
                        "type": "string",
                        "description": "The id of the source disk. This conflicts with [`source_archive_id`]. Changing this forces a new resource to be created.\n"
                    },
                    "sourceSharedKey": {
                        "type": "string",
                        "description": "The share key of source shared archive. Changing this forces a new resource to be created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the archive.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the archive will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/archiveShare:ArchiveShare": {
            "description": "Manages a SakuraCloud Archive Sharing.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst source = new sakuracloud.Archive(\"source\", {\n    size: 20,\n    archiveFile: \"test/dummy.raw\",\n});\nconst shareInfo = new sakuracloud.ArchiveShare(\"shareInfo\", {archiveId: source.id});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nsource = sakuracloud.Archive(\"source\",\n    size=20,\n    archive_file=\"test/dummy.raw\")\nshare_info = sakuracloud.ArchiveShare(\"shareInfo\", archive_id=source.id)\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var source = new Sakuracloud.Archive(\"source\", new Sakuracloud.ArchiveArgs\n        {\n            Size = 20,\n            ArchiveFile = \"test/dummy.raw\",\n        });\n        var shareInfo = new Sakuracloud.ArchiveShare(\"shareInfo\", new Sakuracloud.ArchiveShareArgs\n        {\n            ArchiveId = source.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsource, err := sakuracloud.NewArchive(ctx, \"source\", \u0026sakuracloud.ArchiveArgs{\n\t\t\tSize:        pulumi.Int(20),\n\t\t\tArchiveFile: pulumi.String(\"test/dummy.raw\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewArchiveShare(ctx, \"shareInfo\", \u0026sakuracloud.ArchiveShareArgs{\n\t\t\tArchiveId: source.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "archiveId": {
                    "type": "string",
                    "description": "The id of the archive. Changing this forces a new resource to be created.\n"
                },
                "shareKey": {
                    "type": "string",
                    "description": "The key to use sharing the Archive.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "archiveId",
                "shareKey",
                "zone"
            ],
            "inputProperties": {
                "archiveId": {
                    "type": "string",
                    "description": "The id of the archive. Changing this forces a new resource to be created.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "archiveId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ArchiveShare resources.\n",
                "properties": {
                    "archiveId": {
                        "type": "string",
                        "description": "The id of the archive. Changing this forces a new resource to be created.\n"
                    },
                    "shareKey": {
                        "type": "string",
                        "description": "The key to use sharing the Archive.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the ArchiveShare will be created (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/autoBackup:AutoBackup": {
            "description": "Manages a SakuraCloud Auto Backup.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarDisk = new sakuracloud.Disk(\"foobarDisk\", {});\nconst foobarAutoBackup = new sakuracloud.AutoBackup(\"foobarAutoBackup\", {\n    diskId: foobarDisk.id,\n    weekdays: [\n        \"mon\",\n        \"tue\",\n        \"wed\",\n        \"thu\",\n        \"fri\",\n        \"sat\",\n        \"sun\",\n    ],\n    maxBackupNum: 5,\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_disk = sakuracloud.Disk(\"foobarDisk\")\nfoobar_auto_backup = sakuracloud.AutoBackup(\"foobarAutoBackup\",\n    disk_id=foobar_disk.id,\n    weekdays=[\n        \"mon\",\n        \"tue\",\n        \"wed\",\n        \"thu\",\n        \"fri\",\n        \"sat\",\n        \"sun\",\n    ],\n    max_backup_num=5,\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarDisk = new Sakuracloud.Disk(\"foobarDisk\", new Sakuracloud.DiskArgs\n        {\n        });\n        var foobarAutoBackup = new Sakuracloud.AutoBackup(\"foobarAutoBackup\", new Sakuracloud.AutoBackupArgs\n        {\n            DiskId = foobarDisk.Id,\n            Weekdays = \n            {\n                \"mon\",\n                \"tue\",\n                \"wed\",\n                \"thu\",\n                \"fri\",\n                \"sat\",\n                \"sun\",\n            },\n            MaxBackupNum = 5,\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarDisk, err := sakuracloud.NewDisk(ctx, \"foobarDisk\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewAutoBackup(ctx, \"foobarAutoBackup\", \u0026sakuracloud.AutoBackupArgs{\n\t\t\tDiskId: foobarDisk.ID(),\n\t\t\tWeekdays: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"mon\"),\n\t\t\t\tpulumi.String(\"tue\"),\n\t\t\t\tpulumi.String(\"wed\"),\n\t\t\t\tpulumi.String(\"thu\"),\n\t\t\t\tpulumi.String(\"fri\"),\n\t\t\t\tpulumi.String(\"sat\"),\n\t\t\t\tpulumi.String(\"sun\"),\n\t\t\t},\n\t\t\tMaxBackupNum: pulumi.Int(5),\n\t\t\tDescription:  pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the AutoBackup. The length of this value must be in the range [`1`-`512`].\n"
                },
                "diskId": {
                    "type": "string",
                    "description": "The disk id to backed up. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the AutoBackup.\n"
                },
                "maxBackupNum": {
                    "type": "integer",
                    "description": "The number backup files to keep. This must be in the range [`1`-`10`]. Default:`1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AutoBackup. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the AutoBackup.\n"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of weekdays to backed up. The values in the list must be in [`sun`/`mon`/`tue`/`wed`/`thu`/`fri`/`sat`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the AutoBackup will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "diskId",
                "name",
                "weekdays",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the AutoBackup. The length of this value must be in the range [`1`-`512`].\n"
                },
                "diskId": {
                    "type": "string",
                    "description": "The disk id to backed up. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the AutoBackup.\n"
                },
                "maxBackupNum": {
                    "type": "integer",
                    "description": "The number backup files to keep. This must be in the range [`1`-`10`]. Default:`1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the AutoBackup. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the AutoBackup.\n"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of weekdays to backed up. The values in the list must be in [`sun`/`mon`/`tue`/`wed`/`thu`/`fri`/`sat`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the AutoBackup will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "diskId",
                "weekdays"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutoBackup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the AutoBackup. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "diskId": {
                        "type": "string",
                        "description": "The disk id to backed up. Changing this forces a new resource to be created.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the AutoBackup.\n"
                    },
                    "maxBackupNum": {
                        "type": "integer",
                        "description": "The number backup files to keep. This must be in the range [`1`-`10`]. Default:`1`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the AutoBackup. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the AutoBackup.\n"
                    },
                    "weekdays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of weekdays to backed up. The values in the list must be in [`sun`/`mon`/`tue`/`wed`/`thu`/`fri`/`sat`].\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the AutoBackup will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/bridge:Bridge": {
            "description": "Manages a SakuraCloud Bridge.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.Bridge(\"foobar\", {description: \"description\"});\nconst is1a = new sakuracloud.Switch(\"is1a\", {\n    description: \"description\",\n    bridgeId: foobar.id,\n    zone: \"is1a\",\n});\nconst is1b = new sakuracloud.Switch(\"is1b\", {\n    description: \"description\",\n    bridgeId: foobar.id,\n    zone: \"is1b\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.Bridge(\"foobar\", description=\"description\")\nis1a = sakuracloud.Switch(\"is1a\",\n    description=\"description\",\n    bridge_id=foobar.id,\n    zone=\"is1a\")\nis1b = sakuracloud.Switch(\"is1b\",\n    description=\"description\",\n    bridge_id=foobar.id,\n    zone=\"is1b\")\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.Bridge(\"foobar\", new Sakuracloud.BridgeArgs\n        {\n            Description = \"description\",\n        });\n        var is1a = new Sakuracloud.Switch(\"is1a\", new Sakuracloud.SwitchArgs\n        {\n            Description = \"description\",\n            BridgeId = foobar.Id,\n            Zone = \"is1a\",\n        });\n        var is1b = new Sakuracloud.Switch(\"is1b\", new Sakuracloud.SwitchArgs\n        {\n            Description = \"description\",\n            BridgeId = foobar.Id,\n            Zone = \"is1b\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := sakuracloud.NewBridge(ctx, \"foobar\", \u0026sakuracloud.BridgeArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewSwitch(ctx, \"is1a\", \u0026sakuracloud.SwitchArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tBridgeId:    foobar.ID(),\n\t\t\tZone:        pulumi.String(\"is1a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewSwitch(ctx, \"is1b\", \u0026sakuracloud.SwitchArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tBridgeId:    foobar.ID(),\n\t\t\tZone:        pulumi.String(\"is1b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Bridge. The length of this value must be in the range [`1`-`512`].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Bridge. The length of this value must be in the range [`1`-`64`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Bridge will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "name",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Bridge. The length of this value must be in the range [`1`-`512`].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Bridge. The length of this value must be in the range [`1`-`64`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Bridge will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bridge resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Bridge. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Bridge. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Bridge will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/cDROM:CDROM": {
            "description": "Manages a SakuraCloud CD-ROM.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.CDROM(\"foobar\", {\n    description: \"description\",\n    isoImageFile: \"example.iso\",\n    size: 5,\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.CDROM(\"foobar\",\n    description=\"description\",\n    iso_image_file=\"example.iso\",\n    size=5,\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.CDROM(\"foobar\", new Sakuracloud.CDROMArgs\n        {\n            Description = \"description\",\n            IsoImageFile = \"example.iso\",\n            Size = 5,\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewCDROM(ctx, \"foobar\", \u0026sakuracloud.CDROMArgs{\n\t\t\tDescription:  pulumi.String(\"description\"),\n\t\t\tIsoImageFile: pulumi.String(\"example.iso\"),\n\t\t\tSize:         pulumi.Int(5),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`].\n"
                },
                "contentFileName": {
                    "type": "string",
                    "description": "The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`iso_image_file`]. Default:`config`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The md5 checksum calculated from the base64 encoded file body.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the CD-ROM.\n"
                },
                "isoImageFile": {
                    "type": "string",
                    "description": "The file path to upload to as the CD-ROM. This conflicts with [`content`].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the CD-ROM.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "hash",
                "name",
                "zone"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`].\n"
                },
                "contentFileName": {
                    "type": "string",
                    "description": "The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`iso_image_file`]. Default:`config`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The md5 checksum calculated from the base64 encoded file body.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the CD-ROM.\n"
                },
                "isoImageFile": {
                    "type": "string",
                    "description": "The file path to upload to as the CD-ROM. This conflicts with [`content`].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the CD-ROM.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CDROM resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The content to upload to as the CD-ROM. This conflicts with [`iso_image_file`].\n"
                    },
                    "contentFileName": {
                        "type": "string",
                        "description": "The name of content file to upload to as the CD-ROM. This is only used when `content` is specified. This conflicts with [`iso_image_file`]. Default:`config`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the CD-ROM. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "hash": {
                        "type": "string",
                        "description": "The md5 checksum calculated from the base64 encoded file body.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the CD-ROM.\n"
                    },
                    "isoImageFile": {
                        "type": "string",
                        "description": "The file path to upload to as the CD-ROM. This conflicts with [`content`].\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CD-ROM. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of CD-ROM in GiB. This must be one of [`5`/`10`]. Changing this forces a new resource to be created. Default:`5`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the CD-ROM.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the CD-ROM will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/certificateAuthority:CertificateAuthority": {
            "description": "Manages a SakuraCloud sakuracloud_certificate_authority.\n",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n"
                },
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/CertificateAuthorityClient:CertificateAuthorityClient"
                    },
                    "description": "One or more `client` blocks as defined below.\n"
                },
                "crlUrl": {
                    "type": "string",
                    "description": "The URL of the CRL.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Certificate Authority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].\n"
                },
                "notAfter": {
                    "type": "string",
                    "description": "The date on which the certificate validity period ends, in RFC3339 format.\n"
                },
                "notBefore": {
                    "type": "string",
                    "description": "The date on which the certificate validity period begins, in RFC3339 format.\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "The body of the CA's certificate in PEM format.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/CertificateAuthorityServer:CertificateAuthorityServer"
                    },
                    "description": "One or more `server` blocks as defined below.\n"
                },
                "subject": {
                    "$ref": "#/types/sakuracloud:index/CertificateAuthoritySubject:CertificateAuthoritySubject",
                    "description": "A `subject` block as defined below. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Certificate Authority.\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "certificate",
                "crlUrl",
                "name",
                "notAfter",
                "notBefore",
                "serialNumber",
                "subject",
                "validityPeriodHours"
            ],
            "inputProperties": {
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/CertificateAuthorityClient:CertificateAuthorityClient"
                    },
                    "description": "One or more `client` blocks as defined below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Certificate Authority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/CertificateAuthorityServer:CertificateAuthorityServer"
                    },
                    "description": "One or more `server` blocks as defined below.\n"
                },
                "subject": {
                    "$ref": "#/types/sakuracloud:index/CertificateAuthoritySubject:CertificateAuthoritySubject",
                    "description": "A `subject` block as defined below. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Certificate Authority.\n"
                },
                "validityPeriodHours": {
                    "type": "integer",
                    "description": "The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "subject",
                "validityPeriodHours"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CertificateAuthority resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "The body of the CA's certificate in PEM format.\n"
                    },
                    "clients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/CertificateAuthorityClient:CertificateAuthorityClient"
                        },
                        "description": "One or more `client` blocks as defined below.\n"
                    },
                    "crlUrl": {
                        "type": "string",
                        "description": "The URL of the CRL.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Certificate Authority. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Certificate Authority.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Certificate Authority. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "notAfter": {
                        "type": "string",
                        "description": "The date on which the certificate validity period ends, in RFC3339 format.\n"
                    },
                    "notBefore": {
                        "type": "string",
                        "description": "The date on which the certificate validity period begins, in RFC3339 format.\n"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "The body of the CA's certificate in PEM format.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/CertificateAuthorityServer:CertificateAuthorityServer"
                        },
                        "description": "One or more `server` blocks as defined below.\n"
                    },
                    "subject": {
                        "$ref": "#/types/sakuracloud:index/CertificateAuthoritySubject:CertificateAuthoritySubject",
                        "description": "A `subject` block as defined below. Changing this forces a new resource to be created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Certificate Authority.\n"
                    },
                    "validityPeriodHours": {
                        "type": "integer",
                        "description": "The number of hours after initial issuing that the certificate will become invalid. Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/containerRegistry:ContainerRegistry": {
            "description": "Manages a SakuraCloud Container Registry.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst config = new pulumi.Config();\nconst users = config.getObject(\"users\") || [\n    {\n        name: \"user1\",\n        password: \"password1\",\n        permission: \"all\",\n    },\n    {\n        name: \"user2\",\n        password: \"password2\",\n        permission: \"readwrite\",\n    },\n];\nconst foobar = new sakuracloud.ContainerRegistry(\"foobar\", {\n    subdomainLabel: \"your-subdomain-label\",\n    accessLevel: \"readwrite\",\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    dynamic: [{\n        forEach: users,\n        content: [{\n            name: user.value.name,\n            password: user.value.password,\n            permission: user.value.permission,\n        }],\n    }],\n});\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Container Registry. The length of this value must be in the range [`1`-`512`].\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN for accessing the Container Registry. FQDN is built from `subdomain_label` + `.sakuracr.jp`.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Container Registry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Container Registry. The length of this value must be in the range [`1`-`64`].\n"
                },
                "subdomainLabel": {
                    "type": "string",
                    "description": "The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Container Registry.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ContainerRegistryUser:ContainerRegistryUser"
                    },
                    "description": "One or more `user` blocks as defined below.\n"
                },
                "virtualDomain": {
                    "type": "string",
                    "description": "The alias for accessing the container registry.\n"
                }
            },
            "required": [
                "accessLevel",
                "fqdn",
                "name",
                "subdomainLabel"
            ],
            "inputProperties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Container Registry. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Container Registry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Container Registry. The length of this value must be in the range [`1`-`64`].\n"
                },
                "subdomainLabel": {
                    "type": "string",
                    "description": "The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Container Registry.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ContainerRegistryUser:ContainerRegistryUser"
                    },
                    "description": "One or more `user` blocks as defined below.\n"
                },
                "virtualDomain": {
                    "type": "string",
                    "description": "The alias for accessing the container registry.\n"
                }
            },
            "requiredInputs": [
                "accessLevel",
                "subdomainLabel"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRegistry resources.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The level of access that allow to users. This must be one of [`readwrite`/`readonly`/`none`].\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Container Registry. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN for accessing the Container Registry. FQDN is built from `subdomain_label` + `.sakuracr.jp`.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Container Registry.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Container Registry. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "subdomainLabel": {
                        "type": "string",
                        "description": "The label at the lowest of the FQDN used when be accessed from users. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Container Registry.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/ContainerRegistryUser:ContainerRegistryUser"
                        },
                        "description": "One or more `user` blocks as defined below.\n"
                    },
                    "virtualDomain": {
                        "type": "string",
                        "description": "The alias for accessing the container registry.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/dNS:DNS": {
            "description": "Manages a SakuraCloud DNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.DNS(\"foobar\", {\n    description: \"description\",\n    records: [\n        {\n            name: \"www\",\n            type: \"A\",\n            value: \"192.168.11.1\",\n        },\n        {\n            name: \"www\",\n            type: \"A\",\n            value: \"192.168.11.2\",\n        },\n    ],\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    zone: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.DNS(\"foobar\",\n    description=\"description\",\n    records=[\n        sakuracloud.DNSRecordArgs(\n            name=\"www\",\n            type=\"A\",\n            value=\"192.168.11.1\",\n        ),\n        sakuracloud.DNSRecordArgs(\n            name=\"www\",\n            type=\"A\",\n            value=\"192.168.11.2\",\n        ),\n    ],\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    zone=\"example.com\")\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.DNS(\"foobar\", new Sakuracloud.DNSArgs\n        {\n            Description = \"description\",\n            Records = \n            {\n                new Sakuracloud.Inputs.DNSRecordArgs\n                {\n                    Name = \"www\",\n                    Type = \"A\",\n                    Value = \"192.168.11.1\",\n                },\n                new Sakuracloud.Inputs.DNSRecordArgs\n                {\n                    Name = \"www\",\n                    Type = \"A\",\n                    Value = \"192.168.11.2\",\n                },\n            },\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            Zone = \"example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewDNS(ctx, \"foobar\", \u0026sakuracloud.DNSArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tRecords: DNSRecordArray{\n\t\t\t\t\u0026DNSRecordArgs{\n\t\t\t\t\tName:  pulumi.String(\"www\"),\n\t\t\t\t\tType:  pulumi.String(\"A\"),\n\t\t\t\t\tValue: pulumi.String(\"192.168.11.1\"),\n\t\t\t\t},\n\t\t\t\t\u0026DNSRecordArgs{\n\t\t\t\t\tName:  pulumi.String(\"www\"),\n\t\t\t\t\tType:  pulumi.String(\"A\"),\n\t\t\t\t\tValue: pulumi.String(\"192.168.11.2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the DNS. The length of this value must be in the range [`1`-`512`].\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address of DNS server that manage this zone.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the DNS.\n"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/DNSRecord:DNSRecord"
                    },
                    "description": "One or more `record` blocks as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the DNS.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The target zone. (e.g. `example.com`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "dnsServers",
                "records",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the DNS. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the DNS.\n"
                },
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/DNSRecord:DNSRecord"
                    },
                    "description": "One or more `record` blocks as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the DNS.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The target zone. (e.g. `example.com`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DNS resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the DNS. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP address of DNS server that manage this zone.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the DNS.\n"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/DNSRecord:DNSRecord"
                        },
                        "description": "One or more `record` blocks as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the DNS.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The target zone. (e.g. `example.com`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/dNSRecord:DNSRecord": {
            "description": "Manages a SakuraCloud DNS Record.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.DNS(\"foobar\", {zone: \"example.com\"});\nconst record1 = new sakuracloud.DNSRecord(\"record1\", {\n    dnsId: foobar.id,\n    type: \"A\",\n    value: \"192.168.0.1\",\n});\nconst record2 = new sakuracloud.DNSRecord(\"record2\", {\n    dnsId: foobar.id,\n    type: \"A\",\n    value: \"192.168.0.2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.DNS(\"foobar\", zone=\"example.com\")\nrecord1 = sakuracloud.DNSRecord(\"record1\",\n    dns_id=foobar.id,\n    type=\"A\",\n    value=\"192.168.0.1\")\nrecord2 = sakuracloud.DNSRecord(\"record2\",\n    dns_id=foobar.id,\n    type=\"A\",\n    value=\"192.168.0.2\")\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.DNS(\"foobar\", new Sakuracloud.DNSArgs\n        {\n            Zone = \"example.com\",\n        });\n        var record1 = new Sakuracloud.DNSRecord(\"record1\", new Sakuracloud.DNSRecordArgs\n        {\n            DnsId = foobar.Id,\n            Type = \"A\",\n            Value = \"192.168.0.1\",\n        });\n        var record2 = new Sakuracloud.DNSRecord(\"record2\", new Sakuracloud.DNSRecordArgs\n        {\n            DnsId = foobar.Id,\n            Type = \"A\",\n            Value = \"192.168.0.2\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := sakuracloud.NewDNS(ctx, \"foobar\", \u0026sakuracloud.DNSArgs{\n\t\t\tZone: pulumi.String(\"example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewDNSRecord(ctx, \"record1\", \u0026sakuracloud.DNSRecordArgs{\n\t\t\tDnsId: foobar.ID(),\n\t\t\tType:  pulumi.String(\"A\"),\n\t\t\tValue: pulumi.String(\"192.168.0.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewDNSRecord(ctx, \"record2\", \u0026sakuracloud.DNSRecordArgs{\n\t\t\tDnsId: foobar.ID(),\n\t\t\tType:  pulumi.String(\"A\"),\n\t\t\tValue: pulumi.String(\"192.168.0.2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dnsId": {
                    "type": "string",
                    "description": "The id of the DNS resource. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS Record resource. Changing this forces a new resource to be created.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS Record. Changing this forces a new resource to be created.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "dnsId",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "dnsId": {
                    "type": "string",
                    "description": "The id of the DNS resource. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS Record resource. Changing this forces a new resource to be created.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the DNS Record. Changing this forces a new resource to be created.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "dnsId",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DNSRecord resources.\n",
                "properties": {
                    "dnsId": {
                        "type": "string",
                        "description": "The id of the DNS resource. Changing this forces a new resource to be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS Record resource. Changing this forces a new resource to be created.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The number of port. This must be in the range [`1`-`65535`]. Changing this forces a new resource to be created.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "The priority of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.\n"
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The number of the TTL. Changing this forces a new resource to be created. Default:`3600`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of DNS Record. This must be one of [`A`/`AAAA`/`ALIAS`/`CNAME`/`NS`/`MX`/`TXT`/`SRV`/`CAA`/`PTR`]. Changing this forces a new resource to be created.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the DNS Record. Changing this forces a new resource to be created.\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight of target DNS Record. This must be in the range [`0`-`65535`]. Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/database:Database": {
            "description": "Manages a SakuraCloud Database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst config = new pulumi.Config();\nconst username = config.requireObject(\"username\");\nconst password = config.requireObject(\"password\");\nconst replicaPassword = config.requireObject(\"replicaPassword\");\nconst foobarSwitch = new sakuracloud.Switch(\"foobarSwitch\", {});\nconst foobarDatabase = new sakuracloud.Database(\"foobarDatabase\", {\n    databaseType: \"mariadb\",\n    plan: \"30g\",\n    username: username,\n    password: password,\n    replicaPassword: replicaPassword,\n    networkInterface: {\n        switchId: foobarSwitch.id,\n        ipAddress: \"192.168.11.11\",\n        netmask: 24,\n        gateway: \"192.168.11.1\",\n        port: 3306,\n        sourceRanges: [\n            \"192.168.11.0/24\",\n            \"192.168.12.0/24\",\n        ],\n    },\n    backup: {\n        time: \"00:00\",\n        weekdays: [\n            \"mon\",\n            \"tue\",\n        ],\n    },\n    parameters: {\n        max_connections: 100,\n    },\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nconfig = pulumi.Config()\nusername = config.require_object(\"username\")\npassword = config.require_object(\"password\")\nreplica_password = config.require_object(\"replicaPassword\")\nfoobar_switch = sakuracloud.Switch(\"foobarSwitch\")\nfoobar_database = sakuracloud.Database(\"foobarDatabase\",\n    database_type=\"mariadb\",\n    plan=\"30g\",\n    username=username,\n    password=password,\n    replica_password=replica_password,\n    network_interface=sakuracloud.DatabaseNetworkInterfaceArgs(\n        switch_id=foobar_switch.id,\n        ip_address=\"192.168.11.11\",\n        netmask=24,\n        gateway=\"192.168.11.1\",\n        port=3306,\n        source_ranges=[\n            \"192.168.11.0/24\",\n            \"192.168.12.0/24\",\n        ],\n    ),\n    backup=sakuracloud.DatabaseBackupArgs(\n        time=\"00:00\",\n        weekdays=[\n            \"mon\",\n            \"tue\",\n        ],\n    ),\n    parameters={\n        \"max_connections\": \"100\",\n    },\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Config();\n        var username = config.RequireObject\u003cdynamic\u003e(\"username\");\n        var password = config.RequireObject\u003cdynamic\u003e(\"password\");\n        var replicaPassword = config.RequireObject\u003cdynamic\u003e(\"replicaPassword\");\n        var foobarSwitch = new Sakuracloud.Switch(\"foobarSwitch\", new Sakuracloud.SwitchArgs\n        {\n        });\n        var foobarDatabase = new Sakuracloud.Database(\"foobarDatabase\", new Sakuracloud.DatabaseArgs\n        {\n            DatabaseType = \"mariadb\",\n            Plan = \"30g\",\n            Username = username,\n            Password = password,\n            ReplicaPassword = replicaPassword,\n            NetworkInterface = new Sakuracloud.Inputs.DatabaseNetworkInterfaceArgs\n            {\n                SwitchId = foobarSwitch.Id,\n                IpAddress = \"192.168.11.11\",\n                Netmask = 24,\n                Gateway = \"192.168.11.1\",\n                Port = 3306,\n                SourceRanges = \n                {\n                    \"192.168.11.0/24\",\n                    \"192.168.12.0/24\",\n                },\n            },\n            Backup = new Sakuracloud.Inputs.DatabaseBackupArgs\n            {\n                Time = \"00:00\",\n                Weekdays = \n                {\n                    \"mon\",\n                    \"tue\",\n                },\n            },\n            Parameters = \n            {\n                { \"max_connections\", \"100\" },\n            },\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tusername := cfg.RequireObject(\"username\")\n\t\tpassword := cfg.RequireObject(\"password\")\n\t\treplicaPassword := cfg.RequireObject(\"replicaPassword\")\n\t\tfoobarSwitch, err := sakuracloud.NewSwitch(ctx, \"foobarSwitch\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewDatabase(ctx, \"foobarDatabase\", \u0026sakuracloud.DatabaseArgs{\n\t\t\tDatabaseType:    pulumi.String(\"mariadb\"),\n\t\t\tPlan:            pulumi.String(\"30g\"),\n\t\t\tUsername:        pulumi.Any(username),\n\t\t\tPassword:        pulumi.Any(password),\n\t\t\tReplicaPassword: pulumi.Any(replicaPassword),\n\t\t\tNetworkInterface: \u0026DatabaseNetworkInterfaceArgs{\n\t\t\t\tSwitchId:  foobarSwitch.ID(),\n\t\t\t\tIpAddress: pulumi.String(\"192.168.11.11\"),\n\t\t\t\tNetmask:   pulumi.Int(24),\n\t\t\t\tGateway:   pulumi.String(\"192.168.11.1\"),\n\t\t\t\tPort:      pulumi.Int(3306),\n\t\t\t\tSourceRanges: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"192.168.11.0/24\"),\n\t\t\t\t\tpulumi.String(\"192.168.12.0/24\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBackup: \u0026DatabaseBackupArgs{\n\t\t\t\tTime: pulumi.String(\"00:00\"),\n\t\t\t\tWeekdays: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"mon\"),\n\t\t\t\t\tpulumi.String(\"tue\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tParameters: pulumi.StringMap{\n\t\t\t\t\"max_connections\": pulumi.String(\"100\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "backup": {
                    "$ref": "#/types/sakuracloud:index/DatabaseBackup:DatabaseBackup",
                    "description": "A `backup` block as defined below.\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Database. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/DatabaseNetworkInterface:DatabaseNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of default user on the database.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.\n"
                },
                "replicaPassword": {
                    "type": "string",
                    "description": "The password of user that processing a replication.\n"
                },
                "replicaUser": {
                    "type": "string",
                    "description": "The name of user that processing a replication. Default:`replica`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Database.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "name",
                "networkInterface",
                "password",
                "username",
                "zone"
            ],
            "inputProperties": {
                "backup": {
                    "$ref": "#/types/sakuracloud:index/DatabaseBackup:DatabaseBackup",
                    "description": "A `backup` block as defined below.\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Database. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Database. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/DatabaseNetworkInterface:DatabaseNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of default user on the database.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.\n"
                },
                "replicaPassword": {
                    "type": "string",
                    "description": "The password of user that processing a replication.\n"
                },
                "replicaUser": {
                    "type": "string",
                    "description": "The name of user that processing a replication. Default:`replica`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Database.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "networkInterface",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "backup": {
                        "$ref": "#/types/sakuracloud:index/DatabaseBackup:DatabaseBackup",
                        "description": "A `backup` block as defined below.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The type of the database. This must be one of [`mariadb`/`postgres`]. Changing this forces a new resource to be created. Default:`postgres`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Database. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "networkInterface": {
                        "$ref": "#/types/sakuracloud:index/DatabaseNetworkInterface:DatabaseNetworkInterface",
                        "description": "An `network_interface` block as defined below.\n"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of default user on the database.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the Database. This must be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`]. Changing this forces a new resource to be created. Default:`10g`.\n"
                    },
                    "replicaPassword": {
                        "type": "string",
                        "description": "The password of user that processing a replication.\n"
                    },
                    "replicaUser": {
                        "type": "string",
                        "description": "The name of user that processing a replication. Default:`replica`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Database.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of default user on the database. The length of this value must be in the range [`3`-`20`]. Changing this forces a new resource to be created.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/databaseReadReplica:DatabaseReadReplica": {
            "description": "Manages a SakuraCloud Database Read Replica.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst master = sakuracloud.getDatabase({\n    filter: {\n        names: [\"master-database-name\"],\n    },\n});\nconst foobar = new sakuracloud.DatabaseReadReplica(\"foobar\", {\n    masterId: master.then(master =\u003e master.id),\n    networkInterface: {\n        ipAddress: \"192.168.11.111\",\n    },\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nmaster = sakuracloud.get_database(filter=sakuracloud.GetDatabaseFilterArgs(\n    names=[\"master-database-name\"],\n))\nfoobar = sakuracloud.DatabaseReadReplica(\"foobar\",\n    master_id=master.id,\n    network_interface=sakuracloud.DatabaseReadReplicaNetworkInterfaceArgs(\n        ip_address=\"192.168.11.111\",\n    ),\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var master = Output.Create(Sakuracloud.GetDatabase.InvokeAsync(new Sakuracloud.GetDatabaseArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetDatabaseFilterArgs\n            {\n                Names = \n                {\n                    \"master-database-name\",\n                },\n            },\n        }));\n        var foobar = new Sakuracloud.DatabaseReadReplica(\"foobar\", new Sakuracloud.DatabaseReadReplicaArgs\n        {\n            MasterId = master.Apply(master =\u003e master.Id),\n            NetworkInterface = new Sakuracloud.Inputs.DatabaseReadReplicaNetworkInterfaceArgs\n            {\n                IpAddress = \"192.168.11.111\",\n            },\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmaster, err := sakuracloud.LookupDatabase(ctx, \u0026GetDatabaseArgs{\n\t\t\tFilter: GetDatabaseFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"master-database-name\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewDatabaseReadReplica(ctx, \"foobar\", \u0026sakuracloud.DatabaseReadReplicaArgs{\n\t\t\tMasterId: pulumi.String(master.Id),\n\t\t\tNetworkInterface: \u0026DatabaseReadReplicaNetworkInterfaceArgs{\n\t\t\t\tIpAddress: pulumi.String(\"192.168.11.111\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the read-replica database. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the read-replica database.\n"
                },
                "masterId": {
                    "type": "string",
                    "description": "The id of the replication master database. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the read-replica database. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/DatabaseReadReplicaNetworkInterface:DatabaseReadReplicaNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the read-replica database.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the read-replica database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "masterId",
                "name",
                "networkInterface",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the read-replica database. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the read-replica database.\n"
                },
                "masterId": {
                    "type": "string",
                    "description": "The id of the replication master database. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the read-replica database. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/DatabaseReadReplicaNetworkInterface:DatabaseReadReplicaNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the read-replica database.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the read-replica database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "masterId",
                "networkInterface"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseReadReplica resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the read-replica database. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the read-replica database.\n"
                    },
                    "masterId": {
                        "type": "string",
                        "description": "The id of the replication master database. Changing this forces a new resource to be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the read-replica database. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "networkInterface": {
                        "$ref": "#/types/sakuracloud:index/DatabaseReadReplicaNetworkInterface:DatabaseReadReplicaNetworkInterface",
                        "description": "An `network_interface` block as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the read-replica database.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the read-replica database will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/disk:Disk": {
            "description": "Manages a SakuraCloud Disk.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst ubuntu = sakuracloud.getArchive({\n    osType: \"ubuntu2004\",\n});\nconst foobar = new sakuracloud.Disk(\"foobar\", {\n    plan: \"ssd\",\n    connector: \"virtio\",\n    size: 20,\n    sourceArchiveId: ubuntu.then(ubuntu =\u003e ubuntu.id),\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nubuntu = sakuracloud.get_archive(os_type=\"ubuntu2004\")\nfoobar = sakuracloud.Disk(\"foobar\",\n    plan=\"ssd\",\n    connector=\"virtio\",\n    size=20,\n    source_archive_id=ubuntu.id,\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ubuntu = Output.Create(Sakuracloud.GetArchive.InvokeAsync(new Sakuracloud.GetArchiveArgs\n        {\n            OsType = \"ubuntu2004\",\n        }));\n        var foobar = new Sakuracloud.Disk(\"foobar\", new Sakuracloud.DiskArgs\n        {\n            Plan = \"ssd\",\n            Connector = \"virtio\",\n            Size = 20,\n            SourceArchiveId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"ubuntu2004\"\n\t\tubuntu, err := sakuracloud.LookupArchive(ctx, \u0026GetArchiveArgs{\n\t\t\tOsType: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewDisk(ctx, \"foobar\", \u0026sakuracloud.DiskArgs{\n\t\t\tPlan:            pulumi.String(\"ssd\"),\n\t\t\tConnector:       pulumi.String(\"virtio\"),\n\t\t\tSize:            pulumi.Int(20),\n\t\t\tSourceArchiveId: pulumi.String(ubuntu.Id),\n\t\t\tDescription:     pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "connector": {
                    "type": "string",
                    "description": "The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the disk. The length of this value must be in the range [`1`-`512`].\n"
                },
                "distantFroms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the disk.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the disk. The length of this value must be in the range [`1`-`64`].\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.\n"
                },
                "serverId": {
                    "type": "string",
                    "description": "The id of the Server connected to the disk.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.\n"
                },
                "sourceArchiveId": {
                    "type": "string",
                    "description": "The id of the source archive. This conflicts with [`source_disk_id`]. Changing this forces a new resource to be created.\n"
                },
                "sourceDiskId": {
                    "type": "string",
                    "description": "The id of the source disk. This conflicts with [`source_archive_id`]. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the disk.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "name",
                "serverId",
                "zone"
            ],
            "inputProperties": {
                "connector": {
                    "type": "string",
                    "description": "The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the disk. The length of this value must be in the range [`1`-`512`].\n"
                },
                "distantFroms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the disk.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the disk. The length of this value must be in the range [`1`-`64`].\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.\n"
                },
                "sourceArchiveId": {
                    "type": "string",
                    "description": "The id of the source archive. This conflicts with [`source_disk_id`]. Changing this forces a new resource to be created.\n"
                },
                "sourceDiskId": {
                    "type": "string",
                    "description": "The id of the source disk. This conflicts with [`source_archive_id`]. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the disk.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Disk resources.\n",
                "properties": {
                    "connector": {
                        "type": "string",
                        "description": "The name of the disk connector. This must be one of [`virtio`/`ide`]. Changing this forces a new resource to be created. Default:`virtio`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the disk. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "distantFroms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of disk id. The disk will be located to different storage from these disks. Changing this forces a new resource to be created.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the disk.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the disk. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the disk. This must be one of [`ssd`/`hdd`]. Changing this forces a new resource to be created. Default:`ssd`.\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The id of the Server connected to the disk.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of disk in GiB. Changing this forces a new resource to be created. Default:`20`.\n"
                    },
                    "sourceArchiveId": {
                        "type": "string",
                        "description": "The id of the source archive. This conflicts with [`source_disk_id`]. Changing this forces a new resource to be created.\n"
                    },
                    "sourceDiskId": {
                        "type": "string",
                        "description": "The id of the source disk. This conflicts with [`source_archive_id`]. Changing this forces a new resource to be created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the disk.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the disk will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/eSME:ESME": {
            "description": "Manages a SakuraCloud ESME resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.ESME(\"foobar\", {\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.ESME(\"foobar\",\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.ESME(\"foobar\", new Sakuracloud.ESMEArgs\n        {\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewESME(ctx, \"foobar\", \u0026sakuracloud.ESMEArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the ESME. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the ESME.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ESME. The length of this value must be in the range [`1`-`64`].\n"
                },
                "sendMessageWithGeneratedOtpApiUrl": {
                    "type": "string",
                    "description": "The API URL for send SMS with generated OTP.\n"
                },
                "sendMessageWithInputtedOtpApiUrl": {
                    "type": "string",
                    "description": "The API URL for send SMS with inputted OTP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the ESME.\n"
                }
            },
            "required": [
                "name",
                "sendMessageWithGeneratedOtpApiUrl",
                "sendMessageWithInputtedOtpApiUrl"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the ESME. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the ESME.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ESME. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the ESME.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ESME resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the ESME. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the ESME.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ESME. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "sendMessageWithGeneratedOtpApiUrl": {
                        "type": "string",
                        "description": "The API URL for send SMS with generated OTP.\n"
                    },
                    "sendMessageWithInputtedOtpApiUrl": {
                        "type": "string",
                        "description": "The API URL for send SMS with inputted OTP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the ESME.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/enhancedDB:EnhancedDB": {
            "description": "Manages a SakuraCloud sakuracloud_enhanced_db.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.EnhancedDB(\"foobar\", {\n    databaseName: \"example\",\n    description: \"...\",\n    password: \"your-password\",\n    tags: [\n        \"...\",\n        \"...\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.EnhancedDB(\"foobar\",\n    database_name=\"example\",\n    description=\"...\",\n    password=\"your-password\",\n    tags=[\n        \"...\",\n        \"...\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.EnhancedDB(\"foobar\", new Sakuracloud.EnhancedDBArgs\n        {\n            DatabaseName = \"example\",\n            Description = \"...\",\n            Password = \"your-password\",\n            Tags = \n            {\n                \"...\",\n                \"...\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewEnhancedDB(ctx, \"foobar\", \u0026sakuracloud.EnhancedDBArgs{\n\t\t\tDatabaseName: pulumi.String(\"example\"),\n\t\t\tDescription:  pulumi.String(\"...\"),\n\t\t\tPassword:     pulumi.String(\"your-password\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"...\"),\n\t\t\t\tpulumi.String(\"...\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of database. Changing this forces a new resource to be created.\n"
                },
                "databaseType": {
                    "type": "string",
                    "description": "The type of database.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The name of database host. This will be built from `database_name` + `tidb-is1.db.sakurausercontent.com`.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Enhanced Database.\n"
                },
                "maxConnections": {
                    "type": "integer",
                    "description": "The value of max connections setting.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of database.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Enhanced Database.\n"
                }
            },
            "required": [
                "databaseName",
                "databaseType",
                "hostname",
                "maxConnections",
                "name",
                "password",
                "region"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of database. Changing this forces a new resource to be created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Enhanced Database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of database.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Enhanced Database.\n"
                }
            },
            "requiredInputs": [
                "databaseName",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnhancedDB resources.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of database. Changing this forces a new resource to be created.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The type of database.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Enhanced Database. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The name of database host. This will be built from `database_name` + `tidb-is1.db.sakurausercontent.com`.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Enhanced Database.\n"
                    },
                    "maxConnections": {
                        "type": "integer",
                        "description": "The value of max connections setting.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Enhanced Database. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of database.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Enhanced Database.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/gSLB:GSLB": {
            "description": "Manages a SakuraCloud GSLB.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.GSLB(\"foobar\", {\n    description: \"description\",\n    healthCheck: {\n        delayLoop: 10,\n        hostHeader: \"example.com\",\n        path: \"/\",\n        protocol: \"http\",\n        status: \"200\",\n    },\n    servers: [\n        {\n            enabled: true,\n            ipAddress: \"192.2.0.11\",\n            weight: 1,\n        },\n        {\n            enabled: true,\n            ipAddress: \"192.2.0.12\",\n            weight: 1,\n        },\n    ],\n    sorryServer: \"192.2.0.1\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.GSLB(\"foobar\",\n    description=\"description\",\n    health_check=sakuracloud.GSLBHealthCheckArgs(\n        delay_loop=10,\n        host_header=\"example.com\",\n        path=\"/\",\n        protocol=\"http\",\n        status=\"200\",\n    ),\n    servers=[\n        sakuracloud.GSLBServerArgs(\n            enabled=True,\n            ip_address=\"192.2.0.11\",\n            weight=1,\n        ),\n        sakuracloud.GSLBServerArgs(\n            enabled=True,\n            ip_address=\"192.2.0.12\",\n            weight=1,\n        ),\n    ],\n    sorry_server=\"192.2.0.1\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.GSLB(\"foobar\", new Sakuracloud.GSLBArgs\n        {\n            Description = \"description\",\n            HealthCheck = new Sakuracloud.Inputs.GSLBHealthCheckArgs\n            {\n                DelayLoop = 10,\n                HostHeader = \"example.com\",\n                Path = \"/\",\n                Protocol = \"http\",\n                Status = \"200\",\n            },\n            Servers = \n            {\n                new Sakuracloud.Inputs.GSLBServerArgs\n                {\n                    Enabled = true,\n                    IpAddress = \"192.2.0.11\",\n                    Weight = 1,\n                },\n                new Sakuracloud.Inputs.GSLBServerArgs\n                {\n                    Enabled = true,\n                    IpAddress = \"192.2.0.12\",\n                    Weight = 1,\n                },\n            },\n            SorryServer = \"192.2.0.1\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewGSLB(ctx, \"foobar\", \u0026sakuracloud.GSLBArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tHealthCheck: \u0026GSLBHealthCheckArgs{\n\t\t\t\tDelayLoop:  pulumi.Int(10),\n\t\t\t\tHostHeader: pulumi.String(\"example.com\"),\n\t\t\t\tPath:       pulumi.String(\"/\"),\n\t\t\t\tProtocol:   pulumi.String(\"http\"),\n\t\t\t\tStatus:     pulumi.String(\"200\"),\n\t\t\t},\n\t\t\tServers: GSLBServerArray{\n\t\t\t\t\u0026GSLBServerArgs{\n\t\t\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\t\t\tIpAddress: pulumi.String(\"192.2.0.11\"),\n\t\t\t\t\tWeight:    pulumi.Int(1),\n\t\t\t\t},\n\t\t\t\t\u0026GSLBServerArgs{\n\t\t\t\t\tEnabled:   pulumi.Bool(true),\n\t\t\t\t\tIpAddress: pulumi.String(\"192.2.0.12\"),\n\t\t\t\t\tWeight:    pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSorryServer: pulumi.String(\"192.2.0.1\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the GSLB. The length of this value must be in the range [`1`-`512`].\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN for accessing to the GSLB. This is typically used as value of CNAME record.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/sakuracloud:index/GSLBHealthCheck:GSLBHealthCheck",
                    "description": "A `health_check` block as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the GSLB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the GSLB. The length of this value must be in the range [`1`-`64`].\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/GSLBServer:GSLBServer"
                    },
                    "description": "One or more `server` blocks as defined below.\n"
                },
                "sorryServer": {
                    "type": "string",
                    "description": "The IP address of the SorryServer. This will be used when all servers are down.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the GSLB.\n"
                },
                "weighted": {
                    "type": "boolean",
                    "description": "The flag to enable weighted load-balancing.\n"
                }
            },
            "required": [
                "fqdn",
                "healthCheck",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the GSLB. The length of this value must be in the range [`1`-`512`].\n"
                },
                "healthCheck": {
                    "$ref": "#/types/sakuracloud:index/GSLBHealthCheck:GSLBHealthCheck",
                    "description": "A `health_check` block as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the GSLB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the GSLB. The length of this value must be in the range [`1`-`64`].\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/GSLBServer:GSLBServer"
                    },
                    "description": "One or more `server` blocks as defined below.\n"
                },
                "sorryServer": {
                    "type": "string",
                    "description": "The IP address of the SorryServer. This will be used when all servers are down.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the GSLB.\n"
                },
                "weighted": {
                    "type": "boolean",
                    "description": "The flag to enable weighted load-balancing.\n"
                }
            },
            "requiredInputs": [
                "healthCheck"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GSLB resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the GSLB. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN for accessing to the GSLB. This is typically used as value of CNAME record.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/sakuracloud:index/GSLBHealthCheck:GSLBHealthCheck",
                        "description": "A `health_check` block as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the GSLB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the GSLB. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/GSLBServer:GSLBServer"
                        },
                        "description": "One or more `server` blocks as defined below.\n"
                    },
                    "sorryServer": {
                        "type": "string",
                        "description": "The IP address of the SorryServer. This will be used when all servers are down.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the GSLB.\n"
                    },
                    "weighted": {
                        "type": "boolean",
                        "description": "The flag to enable weighted load-balancing.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/iPv4Ptr:IPv4Ptr": {
            "description": "Manages a SakuraCloud IPv4 PTR.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst server = new sakuracloud.Server(\"server\", {networkInterfaces: [{\n    upstream: \"shared\",\n}]});\nconst foobar = new sakuracloud.IPv4Ptr(\"foobar\", {\n    ipAddress: server.ipAddress,\n    hostname: \"www.example.com\",\n    retryMax: 30,\n    retryInterval: 10,\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nserver = sakuracloud.Server(\"server\", network_interfaces=[sakuracloud.ServerNetworkInterfaceArgs(\n    upstream=\"shared\",\n)])\nfoobar = sakuracloud.IPv4Ptr(\"foobar\",\n    ip_address=server.ip_address,\n    hostname=\"www.example.com\",\n    retry_max=30,\n    retry_interval=10)\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var server = new Sakuracloud.Server(\"server\", new Sakuracloud.ServerArgs\n        {\n            NetworkInterfaces = \n            {\n                new Sakuracloud.Inputs.ServerNetworkInterfaceArgs\n                {\n                    Upstream = \"shared\",\n                },\n            },\n        });\n        var foobar = new Sakuracloud.IPv4Ptr(\"foobar\", new Sakuracloud.IPv4PtrArgs\n        {\n            IpAddress = server.IpAddress,\n            Hostname = \"www.example.com\",\n            RetryMax = 30,\n            RetryInterval = 10,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tserver, err := sakuracloud.NewServer(ctx, \"server\", \u0026sakuracloud.ServerArgs{\n\t\t\tNetworkInterfaces: ServerNetworkInterfaceArray{\n\t\t\t\t\u0026ServerNetworkInterfaceArgs{\n\t\t\t\t\tUpstream: pulumi.String(\"shared\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewIPv4Ptr(ctx, \"foobar\", \u0026sakuracloud.IPv4PtrArgs{\n\t\t\tIpAddress:     server.IpAddress,\n\t\t\tHostname:      pulumi.String(\"www.example.com\"),\n\t\t\tRetryMax:      pulumi.Int(30),\n\t\t\tRetryInterval: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "The value of the PTR record. This must be FQDN.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to which the PTR record is set.\n"
                },
                "retryInterval": {
                    "type": "integer",
                    "description": "The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.\n"
                },
                "retryMax": {
                    "type": "integer",
                    "description": "The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "hostname",
                "ipAddress",
                "zone"
            ],
            "inputProperties": {
                "hostname": {
                    "type": "string",
                    "description": "The value of the PTR record. This must be FQDN.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to which the PTR record is set.\n"
                },
                "retryInterval": {
                    "type": "integer",
                    "description": "The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.\n"
                },
                "retryMax": {
                    "type": "integer",
                    "description": "The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "hostname",
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IPv4Ptr resources.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The value of the PTR record. This must be FQDN.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to which the PTR record is set.\n"
                    },
                    "retryInterval": {
                        "type": "integer",
                        "description": "The wait interval(in seconds) for retrying API call used when SakuraCloud API returns any errors. Default:`10`.\n"
                    },
                    "retryMax": {
                        "type": "integer",
                        "description": "The maximum number of API call retries used when SakuraCloud API returns any errors. Default:`30`.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the IPv4 PTR will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/icon:Icon": {
            "description": "Manages a SakuraCloud Icon.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\nimport * from \"fs\";\n\nconst foobar = new sakuracloud.Icon(\"foobar\", {\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    base64content: Buffer.from(fs.readFileSync(\"example.icon\"), 'binary').toString('base64'),\n});\n```\n```python\nimport pulumi\nimport base64\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.Icon(\"foobar\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    base64content=(lambda path: base64.b64encode(open(path).read().encode()).decode())(\"example.icon\"))\n```\n```csharp\nusing System;\nusing System.IO;\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n\tprivate static string ReadFileBase64(string path) {\n\t\treturn Convert.ToBase64String(System.Text.UTF8.GetBytes(File.ReadAllText(path)))\n\t}\n\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.Icon(\"foobar\", new Sakuracloud.IconArgs\n        {\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            Base64content = ReadFileBase64(\"example.icon\"),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc filebase64OrPanic(path string) pulumi.StringPtrInput {\n\tif fileData, err := ioutil.ReadFile(path); err == nil {\n\t\treturn pulumi.String(base64.StdEncoding.EncodeToString(fileData[:]))\n\t} else {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewIcon(ctx, \"foobar\", \u0026sakuracloud.IconArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tBase64content: filebase64OrPanic(\"example.icon\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "base64content": {
                    "type": "string",
                    "description": "The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Icon. The length of this value must be in the range [`1`-`64`].\n"
                },
                "source": {
                    "type": "string",
                    "description": "The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Icon.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL for getting the icon's raw data.\n"
                }
            },
            "required": [
                "name",
                "url"
            ],
            "inputProperties": {
                "base64content": {
                    "type": "string",
                    "description": "The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Icon. The length of this value must be in the range [`1`-`64`].\n"
                },
                "source": {
                    "type": "string",
                    "description": "The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Icon.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Icon resources.\n",
                "properties": {
                    "base64content": {
                        "type": "string",
                        "description": "The base64 encoded content to upload to as the Icon. This conflicts with [`source`]. Changing this forces a new resource to be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Icon. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "The file path to upload to as the Icon. This conflicts with [`base64content`]. Changing this forces a new resource to be created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Icon.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL for getting the icon's raw data.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/internet:Internet": {
            "description": "Manages a SakuraCloud Switch+Router.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.Internet(\"foobar\", {\n    bandWidth: 100,\n    description: \"description\",\n    enableIpv6: false,\n    netmask: 28,\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.Internet(\"foobar\",\n    band_width=100,\n    description=\"description\",\n    enable_ipv6=False,\n    netmask=28,\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.Internet(\"foobar\", new Sakuracloud.InternetArgs\n        {\n            BandWidth = 100,\n            Description = \"description\",\n            EnableIpv6 = false,\n            Netmask = 28,\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewInternet(ctx, \"foobar\", \u0026sakuracloud.InternetArgs{\n\t\t\tBandWidth:   pulumi.Int(100),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tEnableIpv6:  pulumi.Bool(false),\n\t\t\tNetmask:     pulumi.Int(28),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "bandWidth": {
                    "type": "integer",
                    "description": "The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`]. \nIf zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "The flag to enable IPv6.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The IP address of the gateway used by the Switch+Router.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Switch+Router.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of assigned global address to the Switch+Router.\n"
                },
                "ipv6NetworkAddress": {
                    "type": "string",
                    "description": "The IPv6 network address assigned to the Switch+Router.\n"
                },
                "ipv6Prefix": {
                    "type": "string",
                    "description": "The network prefix of assigned IPv6 addresses to the Switch+Router.\n"
                },
                "ipv6PrefixLen": {
                    "type": "integer",
                    "description": "The bit length of IPv6 network prefix.\n"
                },
                "maxIpAddress": {
                    "type": "string",
                    "description": "Maximum IP address in assigned global addresses to the Switch+Router.\n"
                },
                "minIpAddress": {
                    "type": "string",
                    "description": "Minimum IP address in assigned global addresses to the Switch+Router.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].\n"
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.\n"
                },
                "networkAddress": {
                    "type": "string",
                    "description": "The IPv4 network address assigned to the Switch+Router.\n"
                },
                "serverIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the ID of Servers connected to the Switch+Router.\n"
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Switch+Router.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "gateway",
                "ipAddresses",
                "ipv6NetworkAddress",
                "ipv6Prefix",
                "ipv6PrefixLen",
                "maxIpAddress",
                "minIpAddress",
                "name",
                "networkAddress",
                "serverIds",
                "switchId",
                "zone"
            ],
            "inputProperties": {
                "bandWidth": {
                    "type": "integer",
                    "description": "The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`]. \nIf zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].\n"
                },
                "enableIpv6": {
                    "type": "boolean",
                    "description": "The flag to enable IPv6.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Switch+Router.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].\n"
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Switch+Router.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Internet resources.\n",
                "properties": {
                    "bandWidth": {
                        "type": "integer",
                        "description": "The bandwidth of the network connected to the Internet in Mbps. This must be one of [`100`/`250`/`500`/`1000`/`1500`/`2000`/`2500`/`3000`/`3500`/`4000`/`4500`/`5000`]. \nIf zone is `tk1b`, the following values can also be specified [`5500`/`6000`/`6500`/`7000`/`7500`/`8000`/`8500`/`9000`/`9500`/`10000`]. Default:`100`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Switch+Router. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "The flag to enable IPv6.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The IP address of the gateway used by the Switch+Router.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Switch+Router.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned global address to the Switch+Router.\n"
                    },
                    "ipv6NetworkAddress": {
                        "type": "string",
                        "description": "The IPv6 network address assigned to the Switch+Router.\n"
                    },
                    "ipv6Prefix": {
                        "type": "string",
                        "description": "The network prefix of assigned IPv6 addresses to the Switch+Router.\n"
                    },
                    "ipv6PrefixLen": {
                        "type": "integer",
                        "description": "The bit length of IPv6 network prefix.\n"
                    },
                    "maxIpAddress": {
                        "type": "string",
                        "description": "Maximum IP address in assigned global addresses to the Switch+Router.\n"
                    },
                    "minIpAddress": {
                        "type": "string",
                        "description": "Minimum IP address in assigned global addresses to the Switch+Router.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Switch+Router. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "netmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet assigned to the Switch+Router. `26`/`27`/`28`. Changing this forces a new resource to be created. Default:`28`.\n"
                    },
                    "networkAddress": {
                        "type": "string",
                        "description": "The IPv4 network address assigned to the Switch+Router.\n"
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the ID of Servers connected to the Switch+Router.\n"
                    },
                    "switchId": {
                        "type": "string",
                        "description": "The id of the switch.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Switch+Router.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Switch+Router will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/loadBalancer:LoadBalancer": {
            "description": "Manages a SakuraCloud Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarSwitch = new sakuracloud.Switch(\"foobarSwitch\", {});\nconst foobarLoadBalancer = new sakuracloud.LoadBalancer(\"foobarLoadBalancer\", {\n    plan: \"standard\",\n    networkInterface: {\n        switchId: foobarSwitch.id,\n        vrid: 1,\n        ipAddresses: [\"192.168.11.101\"],\n        netmask: 24,\n        gateway: \"192.168.11.1\",\n    },\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    vips: [{\n        vip: \"192.168.11.201\",\n        port: 80,\n        delayLoop: 10,\n        sorryServer: \"192.168.11.21\",\n        servers: [\n            {\n                ipAddress: \"192.168.11.51\",\n                protocol: \"http\",\n                path: \"/health\",\n                status: 200,\n            },\n            {\n                ipAddress: \"192.168.11.52\",\n                protocol: \"http\",\n                path: \"/health\",\n                status: 200,\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_switch = sakuracloud.Switch(\"foobarSwitch\")\nfoobar_load_balancer = sakuracloud.LoadBalancer(\"foobarLoadBalancer\",\n    plan=\"standard\",\n    network_interface=sakuracloud.LoadBalancerNetworkInterfaceArgs(\n        switch_id=foobar_switch.id,\n        vrid=1,\n        ip_addresses=[\"192.168.11.101\"],\n        netmask=24,\n        gateway=\"192.168.11.1\",\n    ),\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    vips=[sakuracloud.LoadBalancerVipArgs(\n        vip=\"192.168.11.201\",\n        port=80,\n        delay_loop=10,\n        sorry_server=\"192.168.11.21\",\n        servers=[\n            sakuracloud.LoadBalancerVipServerArgs(\n                ip_address=\"192.168.11.51\",\n                protocol=\"http\",\n                path=\"/health\",\n                status=\"200\",\n            ),\n            sakuracloud.LoadBalancerVipServerArgs(\n                ip_address=\"192.168.11.52\",\n                protocol=\"http\",\n                path=\"/health\",\n                status=\"200\",\n            ),\n        ],\n    )])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarSwitch = new Sakuracloud.Switch(\"foobarSwitch\", new Sakuracloud.SwitchArgs\n        {\n        });\n        var foobarLoadBalancer = new Sakuracloud.LoadBalancer(\"foobarLoadBalancer\", new Sakuracloud.LoadBalancerArgs\n        {\n            Plan = \"standard\",\n            NetworkInterface = new Sakuracloud.Inputs.LoadBalancerNetworkInterfaceArgs\n            {\n                SwitchId = foobarSwitch.Id,\n                Vrid = 1,\n                IpAddresses = \n                {\n                    \"192.168.11.101\",\n                },\n                Netmask = 24,\n                Gateway = \"192.168.11.1\",\n            },\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            Vips = \n            {\n                new Sakuracloud.Inputs.LoadBalancerVipArgs\n                {\n                    Vip = \"192.168.11.201\",\n                    Port = 80,\n                    DelayLoop = 10,\n                    SorryServer = \"192.168.11.21\",\n                    Servers = \n                    {\n                        new Sakuracloud.Inputs.LoadBalancerVipServerArgs\n                        {\n                            IpAddress = \"192.168.11.51\",\n                            Protocol = \"http\",\n                            Path = \"/health\",\n                            Status = \"200\",\n                        },\n                        new Sakuracloud.Inputs.LoadBalancerVipServerArgs\n                        {\n                            IpAddress = \"192.168.11.52\",\n                            Protocol = \"http\",\n                            Path = \"/health\",\n                            Status = \"200\",\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarSwitch, err := sakuracloud.NewSwitch(ctx, \"foobarSwitch\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewLoadBalancer(ctx, \"foobarLoadBalancer\", \u0026sakuracloud.LoadBalancerArgs{\n\t\t\tPlan: pulumi.String(\"standard\"),\n\t\t\tNetworkInterface: \u0026LoadBalancerNetworkInterfaceArgs{\n\t\t\t\tSwitchId: foobarSwitch.ID(),\n\t\t\t\tVrid:     pulumi.Int(1),\n\t\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"192.168.11.101\"),\n\t\t\t\t},\n\t\t\t\tNetmask: pulumi.Int(24),\n\t\t\t\tGateway: pulumi.String(\"192.168.11.1\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tVips: LoadBalancerVipArray{\n\t\t\t\t\u0026LoadBalancerVipArgs{\n\t\t\t\t\tVip:         pulumi.String(\"192.168.11.201\"),\n\t\t\t\t\tPort:        pulumi.Int(80),\n\t\t\t\t\tDelayLoop:   pulumi.Int(10),\n\t\t\t\t\tSorryServer: pulumi.String(\"192.168.11.21\"),\n\t\t\t\t\tServers: LoadBalancerVipServerArray{\n\t\t\t\t\t\t\u0026LoadBalancerVipServerArgs{\n\t\t\t\t\t\t\tIpAddress: pulumi.String(\"192.168.11.51\"),\n\t\t\t\t\t\t\tProtocol:  pulumi.String(\"http\"),\n\t\t\t\t\t\t\tPath:      pulumi.String(\"/health\"),\n\t\t\t\t\t\t\tStatus:    pulumi.String(\"200\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026LoadBalancerVipServerArgs{\n\t\t\t\t\t\t\tIpAddress: pulumi.String(\"192.168.11.52\"),\n\t\t\t\t\t\t\tProtocol:  pulumi.String(\"http\"),\n\t\t\t\t\t\t\tPath:      pulumi.String(\"/health\"),\n\t\t\t\t\t\t\tStatus:    pulumi.String(\"200\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the VIP. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the LoadBalancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/LoadBalancerNetworkInterface:LoadBalancerNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]. Changing this forces a new resource to be created. Default:`standard`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the LoadBalancer.\n"
                },
                "vips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/LoadBalancerVip:LoadBalancerVip"
                    },
                    "description": "One or more `vip` blocks as defined below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the LoadBalancer will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "name",
                "networkInterface",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the VIP. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the LoadBalancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/LoadBalancerNetworkInterface:LoadBalancerNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]. Changing this forces a new resource to be created. Default:`standard`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the LoadBalancer.\n"
                },
                "vips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/LoadBalancerVip:LoadBalancerVip"
                    },
                    "description": "One or more `vip` blocks as defined below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the LoadBalancer will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "networkInterface"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the VIP. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the LoadBalancer.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the LoadBalancer. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "networkInterface": {
                        "$ref": "#/types/sakuracloud:index/LoadBalancerNetworkInterface:LoadBalancerNetworkInterface",
                        "description": "An `network_interface` block as defined below.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the LoadBalancer. This must be one of [`standard`/`highspec`]. Changing this forces a new resource to be created. Default:`standard`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the LoadBalancer.\n"
                    },
                    "vips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/LoadBalancerVip:LoadBalancerVip"
                        },
                        "description": "One or more `vip` blocks as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the LoadBalancer will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/localRouter:LocalRouter": {
            "description": "Manages a SakuraCloud Local Router.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarSwitch = new sakuracloud.Switch(\"foobarSwitch\", {});\nconst peer = sakuracloud.getLocalRouter({\n    filter: {\n        names: [\"peer\"],\n    },\n});\nconst foobarLocalRouter = new sakuracloud.LocalRouter(\"foobarLocalRouter\", {\n    description: \"descriptio\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    \"switch\": {\n        code: foobarSwitch.id,\n        category: \"cloud\",\n        zoneId: \"is1a\",\n    },\n    networkInterface: {\n        vip: \"192.168.11.1\",\n        ipAddresses: [\n            \"192.168.11.11\",\n            \"192.168.11.12\",\n        ],\n        netmask: 24,\n        vrid: 101,\n    },\n    staticRoutes: [\n        {\n            prefix: \"10.0.0.0/24\",\n            nextHop: \"192.168.11.2\",\n        },\n        {\n            prefix: \"172.16.0.0/16\",\n            nextHop: \"192.168.11.3\",\n        },\n    ],\n    peers: [{\n        peerId: peer.then(peer =\u003e peer.id),\n        secretKey: peer.then(peer =\u003e peer.secretKeys?[0]),\n        description: \"description\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_switch = sakuracloud.Switch(\"foobarSwitch\")\npeer = sakuracloud.get_local_router(filter=sakuracloud.GetLocalRouterFilterArgs(\n    names=[\"peer\"],\n))\nfoobar_local_router = sakuracloud.LocalRouter(\"foobarLocalRouter\",\n    description=\"descriptio\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    switch=sakuracloud.LocalRouterSwitchArgs(\n        code=foobar_switch.id,\n        category=\"cloud\",\n        zone_id=\"is1a\",\n    ),\n    network_interface=sakuracloud.LocalRouterNetworkInterfaceArgs(\n        vip=\"192.168.11.1\",\n        ip_addresses=[\n            \"192.168.11.11\",\n            \"192.168.11.12\",\n        ],\n        netmask=24,\n        vrid=101,\n    ),\n    static_routes=[\n        sakuracloud.LocalRouterStaticRouteArgs(\n            prefix=\"10.0.0.0/24\",\n            next_hop=\"192.168.11.2\",\n        ),\n        sakuracloud.LocalRouterStaticRouteArgs(\n            prefix=\"172.16.0.0/16\",\n            next_hop=\"192.168.11.3\",\n        ),\n    ],\n    peers=[sakuracloud.LocalRouterPeerArgs(\n        peer_id=peer.id,\n        secret_key=peer.secret_keys[0],\n        description=\"description\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarSwitch = new Sakuracloud.Switch(\"foobarSwitch\", new Sakuracloud.SwitchArgs\n        {\n        });\n        var peer = Output.Create(Sakuracloud.GetLocalRouter.InvokeAsync(new Sakuracloud.GetLocalRouterArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetLocalRouterFilterArgs\n            {\n                Names = \n                {\n                    \"peer\",\n                },\n            },\n        }));\n        var foobarLocalRouter = new Sakuracloud.LocalRouter(\"foobarLocalRouter\", new Sakuracloud.LocalRouterArgs\n        {\n            Description = \"descriptio\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            Switch = new Sakuracloud.Inputs.LocalRouterSwitchArgs\n            {\n                Code = foobarSwitch.Id,\n                Category = \"cloud\",\n                ZoneId = \"is1a\",\n            },\n            NetworkInterface = new Sakuracloud.Inputs.LocalRouterNetworkInterfaceArgs\n            {\n                Vip = \"192.168.11.1\",\n                IpAddresses = \n                {\n                    \"192.168.11.11\",\n                    \"192.168.11.12\",\n                },\n                Netmask = 24,\n                Vrid = 101,\n            },\n            StaticRoutes = \n            {\n                new Sakuracloud.Inputs.LocalRouterStaticRouteArgs\n                {\n                    Prefix = \"10.0.0.0/24\",\n                    NextHop = \"192.168.11.2\",\n                },\n                new Sakuracloud.Inputs.LocalRouterStaticRouteArgs\n                {\n                    Prefix = \"172.16.0.0/16\",\n                    NextHop = \"192.168.11.3\",\n                },\n            },\n            Peers = \n            {\n                new Sakuracloud.Inputs.LocalRouterPeerArgs\n                {\n                    PeerId = peer.Apply(peer =\u003e peer.Id),\n                    SecretKey = peer.Apply(peer =\u003e peer.SecretKeys?[0]),\n                    Description = \"description\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarSwitch, err := sakuracloud.NewSwitch(ctx, \"foobarSwitch\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpeer, err := sakuracloud.LookupLocalRouter(ctx, \u0026GetLocalRouterArgs{\n\t\t\tFilter: GetLocalRouterFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"peer\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewLocalRouter(ctx, \"foobarLocalRouter\", \u0026sakuracloud.LocalRouterArgs{\n\t\t\tDescription: pulumi.String(\"descriptio\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tSwitch: \u0026LocalRouterSwitchArgs{\n\t\t\t\tCode:     foobarSwitch.ID(),\n\t\t\t\tCategory: pulumi.String(\"cloud\"),\n\t\t\t\tZoneId:   pulumi.String(\"is1a\"),\n\t\t\t},\n\t\t\tNetworkInterface: \u0026LocalRouterNetworkInterfaceArgs{\n\t\t\t\tVip: pulumi.String(\"192.168.11.1\"),\n\t\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"192.168.11.11\"),\n\t\t\t\t\tpulumi.String(\"192.168.11.12\"),\n\t\t\t\t},\n\t\t\t\tNetmask: pulumi.Int(24),\n\t\t\t\tVrid:    pulumi.Int(101),\n\t\t\t},\n\t\t\tStaticRoutes: LocalRouterStaticRouteArray{\n\t\t\t\t\u0026LocalRouterStaticRouteArgs{\n\t\t\t\t\tPrefix:  pulumi.String(\"10.0.0.0/24\"),\n\t\t\t\t\tNextHop: pulumi.String(\"192.168.11.2\"),\n\t\t\t\t},\n\t\t\t\t\u0026LocalRouterStaticRouteArgs{\n\t\t\t\t\tPrefix:  pulumi.String(\"172.16.0.0/16\"),\n\t\t\t\t\tNextHop: pulumi.String(\"192.168.11.3\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPeers: LocalRouterPeerArray{\n\t\t\t\t\u0026LocalRouterPeerArgs{\n\t\t\t\t\tPeerId:      pulumi.String(peer.Id),\n\t\t\t\t\tSecretKey:   pulumi.String(peer.SecretKeys[0]),\n\t\t\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the LocalRouter. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the LoadBalancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LocalRouter. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/LocalRouterNetworkInterface:LocalRouterNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/LocalRouterPeer:LocalRouterPeer"
                    },
                    "description": "One or more `peer` blocks as defined below.\n"
                },
                "secretKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of secret key used for peering from other LocalRouters.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/LocalRouterStaticRoute:LocalRouterStaticRoute"
                    },
                    "description": "One or more `static_route` blocks as defined below.\n"
                },
                "switch": {
                    "$ref": "#/types/sakuracloud:index/LocalRouterSwitch:LocalRouterSwitch",
                    "description": "A `switch` block as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the LoadBalancer.\n"
                }
            },
            "required": [
                "name",
                "networkInterface",
                "secretKeys",
                "switch"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the LocalRouter. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the LoadBalancer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the LocalRouter. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/LocalRouterNetworkInterface:LocalRouterNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "peers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/LocalRouterPeer:LocalRouterPeer"
                    },
                    "description": "One or more `peer` blocks as defined below.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/LocalRouterStaticRoute:LocalRouterStaticRoute"
                    },
                    "description": "One or more `static_route` blocks as defined below.\n"
                },
                "switch": {
                    "$ref": "#/types/sakuracloud:index/LocalRouterSwitch:LocalRouterSwitch",
                    "description": "A `switch` block as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the LoadBalancer.\n"
                }
            },
            "requiredInputs": [
                "networkInterface",
                "switch"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocalRouter resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the LocalRouter. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the LoadBalancer.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the LocalRouter. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "networkInterface": {
                        "$ref": "#/types/sakuracloud:index/LocalRouterNetworkInterface:LocalRouterNetworkInterface",
                        "description": "An `network_interface` block as defined below.\n"
                    },
                    "peers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/LocalRouterPeer:LocalRouterPeer"
                        },
                        "description": "One or more `peer` blocks as defined below.\n"
                    },
                    "secretKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of secret key used for peering from other LocalRouters.\n"
                    },
                    "staticRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/LocalRouterStaticRoute:LocalRouterStaticRoute"
                        },
                        "description": "One or more `static_route` blocks as defined below.\n"
                    },
                    "switch": {
                        "$ref": "#/types/sakuracloud:index/LocalRouterSwitch:LocalRouterSwitch",
                        "description": "A `switch` block as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the LoadBalancer.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/mobileGateway:MobileGateway": {
            "description": "Manages a SakuraCloud Mobile Gateway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst zone = sakuracloud.getZone({});\nconst foobarSwitch = new sakuracloud.Switch(\"foobarSwitch\", {});\nconst foobarMobileGateway = new sakuracloud.MobileGateway(\"foobarMobileGateway\", {\n    internetConnection: true,\n    dnsServers: zone.then(zone =\u003e zone.dnsServers),\n    privateNetworkInterface: {\n        switchId: foobarSwitch.id,\n        ipAddress: \"192.168.11.101\",\n        netmask: 24,\n    },\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    trafficControl: {\n        quota: 256,\n        bandWidthLimit: 64,\n        enableEmail: true,\n        enableSlack: true,\n        slackWebhook: \"https://hooks.slack.com/services/xxx/xxx/xxx\",\n        autoTrafficShaping: true,\n    },\n    staticRoutes: [\n        {\n            prefix: \"192.168.10.0/24\",\n            nextHop: \"192.168.11.1\",\n        },\n        {\n            prefix: \"192.168.10.0/25\",\n            nextHop: \"192.168.11.2\",\n        },\n        {\n            prefix: \"192.168.10.0/26\",\n            nextHop: \"192.168.11.3\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nzone = sakuracloud.get_zone()\nfoobar_switch = sakuracloud.Switch(\"foobarSwitch\")\nfoobar_mobile_gateway = sakuracloud.MobileGateway(\"foobarMobileGateway\",\n    internet_connection=True,\n    dns_servers=zone.dns_servers,\n    private_network_interface=sakuracloud.MobileGatewayPrivateNetworkInterfaceArgs(\n        switch_id=foobar_switch.id,\n        ip_address=\"192.168.11.101\",\n        netmask=24,\n    ),\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    traffic_control=sakuracloud.MobileGatewayTrafficControlArgs(\n        quota=256,\n        band_width_limit=64,\n        enable_email=True,\n        enable_slack=True,\n        slack_webhook=\"https://hooks.slack.com/services/xxx/xxx/xxx\",\n        auto_traffic_shaping=True,\n    ),\n    static_routes=[\n        sakuracloud.MobileGatewayStaticRouteArgs(\n            prefix=\"192.168.10.0/24\",\n            next_hop=\"192.168.11.1\",\n        ),\n        sakuracloud.MobileGatewayStaticRouteArgs(\n            prefix=\"192.168.10.0/25\",\n            next_hop=\"192.168.11.2\",\n        ),\n        sakuracloud.MobileGatewayStaticRouteArgs(\n            prefix=\"192.168.10.0/26\",\n            next_hop=\"192.168.11.3\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var zone = Output.Create(Sakuracloud.GetZone.InvokeAsync());\n        var foobarSwitch = new Sakuracloud.Switch(\"foobarSwitch\", new Sakuracloud.SwitchArgs\n        {\n        });\n        var foobarMobileGateway = new Sakuracloud.MobileGateway(\"foobarMobileGateway\", new Sakuracloud.MobileGatewayArgs\n        {\n            InternetConnection = true,\n            DnsServers = zone.Apply(zone =\u003e zone.DnsServers),\n            PrivateNetworkInterface = new Sakuracloud.Inputs.MobileGatewayPrivateNetworkInterfaceArgs\n            {\n                SwitchId = foobarSwitch.Id,\n                IpAddress = \"192.168.11.101\",\n                Netmask = 24,\n            },\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            TrafficControl = new Sakuracloud.Inputs.MobileGatewayTrafficControlArgs\n            {\n                Quota = 256,\n                BandWidthLimit = 64,\n                EnableEmail = true,\n                EnableSlack = true,\n                SlackWebhook = \"https://hooks.slack.com/services/xxx/xxx/xxx\",\n                AutoTrafficShaping = true,\n            },\n            StaticRoutes = \n            {\n                new Sakuracloud.Inputs.MobileGatewayStaticRouteArgs\n                {\n                    Prefix = \"192.168.10.0/24\",\n                    NextHop = \"192.168.11.1\",\n                },\n                new Sakuracloud.Inputs.MobileGatewayStaticRouteArgs\n                {\n                    Prefix = \"192.168.10.0/25\",\n                    NextHop = \"192.168.11.2\",\n                },\n                new Sakuracloud.Inputs.MobileGatewayStaticRouteArgs\n                {\n                    Prefix = \"192.168.10.0/26\",\n                    NextHop = \"192.168.11.3\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzone, err := sakuracloud.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoobarSwitch, err := sakuracloud.NewSwitch(ctx, \"foobarSwitch\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewMobileGateway(ctx, \"foobarMobileGateway\", \u0026sakuracloud.MobileGatewayArgs{\n\t\t\tInternetConnection: pulumi.Bool(true),\n\t\t\tDnsServers:         interface{}(zone.DnsServers),\n\t\t\tPrivateNetworkInterface: \u0026MobileGatewayPrivateNetworkInterfaceArgs{\n\t\t\t\tSwitchId:  foobarSwitch.ID(),\n\t\t\t\tIpAddress: pulumi.String(\"192.168.11.101\"),\n\t\t\t\tNetmask:   pulumi.Int(24),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tTrafficControl: \u0026MobileGatewayTrafficControlArgs{\n\t\t\t\tQuota:              pulumi.Int(256),\n\t\t\t\tBandWidthLimit:     pulumi.Int(64),\n\t\t\t\tEnableEmail:        pulumi.Bool(true),\n\t\t\t\tEnableSlack:        pulumi.Bool(true),\n\t\t\t\tSlackWebhook:       pulumi.String(\"https://hooks.slack.com/services/xxx/xxx/xxx\"),\n\t\t\t\tAutoTrafficShaping: pulumi.Bool(true),\n\t\t\t},\n\t\t\tStaticRoutes: MobileGatewayStaticRouteArray{\n\t\t\t\t\u0026MobileGatewayStaticRouteArgs{\n\t\t\t\t\tPrefix:  pulumi.String(\"192.168.10.0/24\"),\n\t\t\t\t\tNextHop: pulumi.String(\"192.168.11.1\"),\n\t\t\t\t},\n\t\t\t\t\u0026MobileGatewayStaticRouteArgs{\n\t\t\t\t\tPrefix:  pulumi.String(\"192.168.10.0/25\"),\n\t\t\t\t\tNextHop: pulumi.String(\"192.168.11.2\"),\n\t\t\t\t},\n\t\t\t\t\u0026MobileGatewayStaticRouteArgs{\n\t\t\t\t\tPrefix:  pulumi.String(\"192.168.10.0/26\"),\n\t\t\t\t\tNextHop: pulumi.String(\"192.168.11.3\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the MobileGateway. The length of this value must be in the range [`1`-`512`].\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address used by each connected devices.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the MobileGateway.\n"
                },
                "interDeviceCommunication": {
                    "type": "boolean",
                    "description": "The flag to allow communication between each connected devices.\n"
                },
                "internetConnection": {
                    "type": "boolean",
                    "description": "The flag to enable connect to the Internet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MobileGateway. The length of this value must be in the range [`1`-`64`].\n"
                },
                "privateNetworkInterface": {
                    "$ref": "#/types/sakuracloud:index/MobileGatewayPrivateNetworkInterface:MobileGatewayPrivateNetworkInterface",
                    "description": "An `private_network_interface` block as defined below.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address assigned to the MobileGateway.\n"
                },
                "publicNetmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet assigned to the MobileGateway.\n"
                },
                "simRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewaySimRoute:MobileGatewaySimRoute"
                    },
                    "description": "One or more `sim_route` blocks as defined below.\n"
                },
                "sims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewaySim:MobileGatewaySim"
                    },
                    "description": "One or more `sim` blocks as defined below.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewayStaticRoute:MobileGatewayStaticRoute"
                    },
                    "description": "One or more `static_route` blocks as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the MobileGateway.\n"
                },
                "trafficControl": {
                    "$ref": "#/types/sakuracloud:index/MobileGatewayTrafficControl:MobileGatewayTrafficControl",
                    "description": "A `traffic_control` block as defined below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the MobileGateway will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "dnsServers",
                "name",
                "publicIp",
                "publicNetmask",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the MobileGateway. The length of this value must be in the range [`1`-`512`].\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address used by each connected devices.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the MobileGateway.\n"
                },
                "interDeviceCommunication": {
                    "type": "boolean",
                    "description": "The flag to allow communication between each connected devices.\n"
                },
                "internetConnection": {
                    "type": "boolean",
                    "description": "The flag to enable connect to the Internet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MobileGateway. The length of this value must be in the range [`1`-`64`].\n"
                },
                "privateNetworkInterface": {
                    "$ref": "#/types/sakuracloud:index/MobileGatewayPrivateNetworkInterface:MobileGatewayPrivateNetworkInterface",
                    "description": "An `private_network_interface` block as defined below.\n"
                },
                "simRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewaySimRoute:MobileGatewaySimRoute"
                    },
                    "description": "One or more `sim_route` blocks as defined below.\n"
                },
                "sims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewaySim:MobileGatewaySim"
                    },
                    "description": "One or more `sim` blocks as defined below.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewayStaticRoute:MobileGatewayStaticRoute"
                    },
                    "description": "One or more `static_route` blocks as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the MobileGateway.\n"
                },
                "trafficControl": {
                    "$ref": "#/types/sakuracloud:index/MobileGatewayTrafficControl:MobileGatewayTrafficControl",
                    "description": "A `traffic_control` block as defined below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the MobileGateway will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "dnsServers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileGateway resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the MobileGateway. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP address used by each connected devices.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the MobileGateway.\n"
                    },
                    "interDeviceCommunication": {
                        "type": "boolean",
                        "description": "The flag to allow communication between each connected devices.\n"
                    },
                    "internetConnection": {
                        "type": "boolean",
                        "description": "The flag to enable connect to the Internet.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MobileGateway. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "privateNetworkInterface": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewayPrivateNetworkInterface:MobileGatewayPrivateNetworkInterface",
                        "description": "An `private_network_interface` block as defined below.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP address assigned to the MobileGateway.\n"
                    },
                    "publicNetmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet assigned to the MobileGateway.\n"
                    },
                    "simRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/MobileGatewaySimRoute:MobileGatewaySimRoute"
                        },
                        "description": "One or more `sim_route` blocks as defined below.\n"
                    },
                    "sims": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/MobileGatewaySim:MobileGatewaySim"
                        },
                        "description": "One or more `sim` blocks as defined below.\n"
                    },
                    "staticRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/MobileGatewayStaticRoute:MobileGatewayStaticRoute"
                        },
                        "description": "One or more `static_route` blocks as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the MobileGateway.\n"
                    },
                    "trafficControl": {
                        "$ref": "#/types/sakuracloud:index/MobileGatewayTrafficControl:MobileGatewayTrafficControl",
                        "description": "A `traffic_control` block as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the MobileGateway will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/nFS:NFS": {
            "description": "Manages a SakuraCloud NFS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarSwitch = new sakuracloud.Switch(\"foobarSwitch\", {});\nconst foobarNFS = new sakuracloud.NFS(\"foobarNFS\", {\n    plan: \"ssd\",\n    size: \"500\",\n    networkInterface: {\n        switchId: foobarSwitch.id,\n        ipAddress: \"192.168.11.101\",\n        netmask: 24,\n        gateway: \"192.168.11.1\",\n    },\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_switch = sakuracloud.Switch(\"foobarSwitch\")\nfoobar_nfs = sakuracloud.NFS(\"foobarNFS\",\n    plan=\"ssd\",\n    size=500,\n    network_interface=sakuracloud.NFSNetworkInterfaceArgs(\n        switch_id=foobar_switch.id,\n        ip_address=\"192.168.11.101\",\n        netmask=24,\n        gateway=\"192.168.11.1\",\n    ),\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarSwitch = new Sakuracloud.Switch(\"foobarSwitch\", new Sakuracloud.SwitchArgs\n        {\n        });\n        var foobarNFS = new Sakuracloud.NFS(\"foobarNFS\", new Sakuracloud.NFSArgs\n        {\n            Plan = \"ssd\",\n            Size = 500,\n            NetworkInterface = new Sakuracloud.Inputs.NFSNetworkInterfaceArgs\n            {\n                SwitchId = foobarSwitch.Id,\n                IpAddress = \"192.168.11.101\",\n                Netmask = 24,\n                Gateway = \"192.168.11.1\",\n            },\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarSwitch, err := sakuracloud.NewSwitch(ctx, \"foobarSwitch\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewNFS(ctx, \"foobarNFS\", \u0026sakuracloud.NFSArgs{\n\t\t\tPlan: pulumi.String(\"ssd\"),\n\t\t\tSize: pulumi.Int(500),\n\t\t\tNetworkInterface: \u0026NFSNetworkInterfaceArgs{\n\t\t\t\tSwitchId:  foobarSwitch.ID(),\n\t\t\t\tIpAddress: pulumi.String(\"192.168.11.101\"),\n\t\t\t\tNetmask:   pulumi.Int(24),\n\t\t\t\tGateway:   pulumi.String(\"192.168.11.1\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the NFS. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the NFS.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the NFS. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/NFSNetworkInterface:NFSNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the NFS.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "name",
                "networkInterface",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the NFS. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the NFS.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the NFS. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterface": {
                    "$ref": "#/types/sakuracloud:index/NFSNetworkInterface:NFSNetworkInterface",
                    "description": "An `network_interface` block as defined below.\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the NFS.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "networkInterface"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NFS resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NFS. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the NFS.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NFS. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "networkInterface": {
                        "$ref": "#/types/sakuracloud:index/NFSNetworkInterface:NFSNetworkInterface",
                        "description": "An `network_interface` block as defined below.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the NFS. This must be one of [`hdd`/`ssd`]. Changing this forces a new resource to be created. Default:`hdd`.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of NFS in GiB. Changing this forces a new resource to be created. Default:`100`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the NFS.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the NFS will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/note:Note": {
            "description": "Manages a SakuraCloud Note.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\nimport * from \"fs\";\n\nconst foobar = new sakuracloud.Note(\"foobar\", {content: fs.readFileSync(\"startup-script.sh\")});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.Note(\"foobar\", content=(lambda path: open(path).read())(\"startup-script.sh\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.Note(\"foobar\", new Sakuracloud.NoteArgs\n        {\n            Content = File.ReadAllText(\"startup-script.sh\"),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewNote(ctx, \"foobar\", \u0026sakuracloud.NoteArgs{\n\t\t\tContent: readFileOrPanic(\"startup-script.sh\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class of the Note. This must be one of `shell`/`yaml_cloud_config`. Default:`shell`.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the Note. This must be specified as a shell script or as a cloud-config.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Note. This will be computed from special tags within body of `content`.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Note.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Note. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Note.\n"
                }
            },
            "required": [
                "content",
                "description",
                "name"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class of the Note. This must be one of `shell`/`yaml_cloud_config`. Default:`shell`.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content of the Note. This must be specified as a shell script or as a cloud-config.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Note.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Note. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Note.\n"
                }
            },
            "requiredInputs": [
                "content"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Note resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class of the Note. This must be one of `shell`/`yaml_cloud_config`. Default:`shell`.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the Note. This must be specified as a shell script or as a cloud-config.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Note. This will be computed from special tags within body of `content`.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Note.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Note. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Note.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/packetFilter:PacketFilter": {
            "description": "Manages a SakuraCloud Packet Filter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.PacketFilter(\"foobar\", {\n    description: \"description\",\n    expressions: [\n        {\n            destinationPort: \"22\",\n            protocol: \"tcp\",\n        },\n        {\n            destinationPort: \"80\",\n            protocol: \"tcp\",\n        },\n        {\n            destinationPort: \"443\",\n            protocol: \"tcp\",\n        },\n        {\n            protocol: \"icmp\",\n        },\n        {\n            protocol: \"fragment\",\n        },\n        {\n            protocol: \"udp\",\n            sourcePort: \"123\",\n        },\n        {\n            destinationPort: \"32768-61000\",\n            protocol: \"tcp\",\n        },\n        {\n            destinationPort: \"32768-61000\",\n            protocol: \"udp\",\n        },\n        {\n            allow: false,\n            description: \"Deny ALL\",\n            protocol: \"ip\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.PacketFilter(\"foobar\",\n    description=\"description\",\n    expressions=[\n        sakuracloud.PacketFilterExpressionArgs(\n            destination_port=\"22\",\n            protocol=\"tcp\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            destination_port=\"80\",\n            protocol=\"tcp\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            destination_port=\"443\",\n            protocol=\"tcp\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            protocol=\"icmp\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            protocol=\"fragment\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            protocol=\"udp\",\n            source_port=\"123\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            destination_port=\"32768-61000\",\n            protocol=\"tcp\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            destination_port=\"32768-61000\",\n            protocol=\"udp\",\n        ),\n        sakuracloud.PacketFilterExpressionArgs(\n            allow=False,\n            description=\"Deny ALL\",\n            protocol=\"ip\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.PacketFilter(\"foobar\", new Sakuracloud.PacketFilterArgs\n        {\n            Description = \"description\",\n            Expressions = \n            {\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    DestinationPort = \"22\",\n                    Protocol = \"tcp\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    DestinationPort = \"80\",\n                    Protocol = \"tcp\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    DestinationPort = \"443\",\n                    Protocol = \"tcp\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    Protocol = \"icmp\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    Protocol = \"fragment\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    Protocol = \"udp\",\n                    SourcePort = \"123\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    DestinationPort = \"32768-61000\",\n                    Protocol = \"tcp\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    DestinationPort = \"32768-61000\",\n                    Protocol = \"udp\",\n                },\n                new Sakuracloud.Inputs.PacketFilterExpressionArgs\n                {\n                    Allow = false,\n                    Description = \"Deny ALL\",\n                    Protocol = \"ip\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewPacketFilter(ctx, \"foobar\", \u0026sakuracloud.PacketFilterArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tExpressions: PacketFilterExpressionArray{\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tDestinationPort: pulumi.String(\"22\"),\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tDestinationPort: pulumi.String(\"80\"),\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tDestinationPort: pulumi.String(\"443\"),\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"icmp\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"fragment\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tProtocol:   pulumi.String(\"udp\"),\n\t\t\t\t\tSourcePort: pulumi.String(\"123\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tDestinationPort: pulumi.String(\"32768-61000\"),\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tDestinationPort: pulumi.String(\"32768-61000\"),\n\t\t\t\t\tProtocol:        pulumi.String(\"udp\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterExpressionArgs{\n\t\t\t\t\tAllow:       pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"Deny ALL\"),\n\t\t\t\t\tProtocol:    pulumi.String(\"ip\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the expression.\n"
                },
                "expressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/PacketFilterExpression:PacketFilterExpression"
                    },
                    "description": "One or more `expression` blocks as defined below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the packetFilter. The length of this value must be in the range [`1`-`64`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "expressions",
                "name",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the expression.\n"
                },
                "expressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/PacketFilterExpression:PacketFilterExpression"
                    },
                    "description": "One or more `expression` blocks as defined below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the packetFilter. The length of this value must be in the range [`1`-`64`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PacketFilter resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the expression.\n"
                    },
                    "expressions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/PacketFilterExpression:PacketFilterExpression"
                        },
                        "description": "One or more `expression` blocks as defined below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the packetFilter. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the packetFilter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/packetFilterRule:PacketFilterRule": {
            "description": "Manages a SakuraCloud Packet Filter Rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.PacketFilter(\"foobar\", {description: \"description\"});\nconst rules = new sakuracloud.PacketFilterRule(\"rules\", {\n    packetFilterId: foobar.id,\n    expressions: [\n        {\n            protocol: \"tcp\",\n            destinationPort: \"22\",\n        },\n        {\n            protocol: \"tcp\",\n            destinationPort: \"80\",\n        },\n        {\n            protocol: \"tcp\",\n            destinationPort: \"443\",\n        },\n        {\n            protocol: \"icmp\",\n        },\n        {\n            protocol: \"fragment\",\n        },\n        {\n            protocol: \"udp\",\n            sourcePort: \"123\",\n        },\n        {\n            protocol: \"tcp\",\n            destinationPort: \"32768-61000\",\n        },\n        {\n            protocol: \"udp\",\n            destinationPort: \"32768-61000\",\n        },\n        {\n            protocol: \"ip\",\n            allow: false,\n            description: \"Deny ALL\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.PacketFilter(\"foobar\", description=\"description\")\nrules = sakuracloud.PacketFilterRule(\"rules\",\n    packet_filter_id=foobar.id,\n    expressions=[\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"tcp\",\n            destination_port=\"22\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"tcp\",\n            destination_port=\"80\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"tcp\",\n            destination_port=\"443\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"icmp\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"fragment\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"udp\",\n            source_port=\"123\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"tcp\",\n            destination_port=\"32768-61000\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"udp\",\n            destination_port=\"32768-61000\",\n        ),\n        sakuracloud.PacketFilterRuleExpressionArgs(\n            protocol=\"ip\",\n            allow=False,\n            description=\"Deny ALL\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.PacketFilter(\"foobar\", new Sakuracloud.PacketFilterArgs\n        {\n            Description = \"description\",\n        });\n        var rules = new Sakuracloud.PacketFilterRule(\"rules\", new Sakuracloud.PacketFilterRuleArgs\n        {\n            PacketFilterId = foobar.Id,\n            Expressions = \n            {\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"tcp\",\n                    DestinationPort = \"22\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"tcp\",\n                    DestinationPort = \"80\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"tcp\",\n                    DestinationPort = \"443\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"icmp\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"fragment\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"udp\",\n                    SourcePort = \"123\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"tcp\",\n                    DestinationPort = \"32768-61000\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"udp\",\n                    DestinationPort = \"32768-61000\",\n                },\n                new Sakuracloud.Inputs.PacketFilterRuleExpressionArgs\n                {\n                    Protocol = \"ip\",\n                    Allow = false,\n                    Description = \"Deny ALL\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobar, err := sakuracloud.NewPacketFilter(ctx, \"foobar\", \u0026sakuracloud.PacketFilterArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewPacketFilterRule(ctx, \"rules\", \u0026sakuracloud.PacketFilterRuleArgs{\n\t\t\tPacketFilterId: foobar.ID(),\n\t\t\tExpressions: PacketFilterRuleExpressionArray{\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t\tDestinationPort: pulumi.String(\"22\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t\tDestinationPort: pulumi.String(\"80\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t\tDestinationPort: pulumi.String(\"443\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"icmp\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol: pulumi.String(\"fragment\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol:   pulumi.String(\"udp\"),\n\t\t\t\t\tSourcePort: pulumi.String(\"123\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol:        pulumi.String(\"tcp\"),\n\t\t\t\t\tDestinationPort: pulumi.String(\"32768-61000\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol:        pulumi.String(\"udp\"),\n\t\t\t\t\tDestinationPort: pulumi.String(\"32768-61000\"),\n\t\t\t\t},\n\t\t\t\t\u0026PacketFilterRuleExpressionArgs{\n\t\t\t\t\tProtocol:    pulumi.String(\"ip\"),\n\t\t\t\t\tAllow:       pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"Deny ALL\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "expressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/PacketFilterRuleExpression:PacketFilterRuleExpression"
                    },
                    "description": "One or more `expression` blocks as defined below. Changing this forces a new resource to be created.\n"
                },
                "packetFilterId": {
                    "type": "string",
                    "description": "The id of the packet filter that set expressions to. Changing this forces a new resource to be created.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "packetFilterId",
                "zone"
            ],
            "inputProperties": {
                "expressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/PacketFilterRuleExpression:PacketFilterRuleExpression"
                    },
                    "description": "One or more `expression` blocks as defined below. Changing this forces a new resource to be created.\n"
                },
                "packetFilterId": {
                    "type": "string",
                    "description": "The id of the packet filter that set expressions to. Changing this forces a new resource to be created.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "packetFilterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PacketFilterRule resources.\n",
                "properties": {
                    "expressions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/PacketFilterRuleExpression:PacketFilterRuleExpression"
                        },
                        "description": "One or more `expression` blocks as defined below. Changing this forces a new resource to be created.\n"
                    },
                    "packetFilterId": {
                        "type": "string",
                        "description": "The id of the packet filter that set expressions to. Changing this forces a new resource to be created.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the PacketFilter Rule will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/privateHost:PrivateHost": {
            "description": "Manages a SakuraCloud Private Host.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.PrivateHost(\"foobar\", {\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.PrivateHost(\"foobar\",\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.PrivateHost(\"foobar\", new Sakuracloud.PrivateHostArgs\n        {\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewPrivateHost(ctx, \"foobar\", \u0026sakuracloud.PrivateHostArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "assignedCore": {
                    "type": "integer",
                    "description": "The total number of CPUs assigned to servers on the private host.\n"
                },
                "assignedMemory": {
                    "type": "integer",
                    "description": "The total size of memory assigned to servers on the private host.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class of the PrivateHost. This will be one of [`dynamic`/`ms_windows`]. Default:`dynamic`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the private host.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the PrivateHost.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the PrivateHost.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "assignedCore",
                "assignedMemory",
                "hostname",
                "name",
                "zone"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class of the PrivateHost. This will be one of [`dynamic`/`ms_windows`]. Default:`dynamic`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the PrivateHost.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the PrivateHost.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateHost resources.\n",
                "properties": {
                    "assignedCore": {
                        "type": "integer",
                        "description": "The total number of CPUs assigned to servers on the private host.\n"
                    },
                    "assignedMemory": {
                        "type": "integer",
                        "description": "The total size of memory assigned to servers on the private host.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class of the PrivateHost. This will be one of [`dynamic`/`ms_windows`]. Default:`dynamic`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the PrivateHost. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the private host.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the PrivateHost.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PrivateHost. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the PrivateHost.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the PrivateHost will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/proxyLB:ProxyLB": {
            "description": "Manages a SakuraCloud ProxyLB.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarServer = new sakuracloud.Server(\"foobarServer\", {networkInterfaces: [{\n    upstream: \"shared\",\n}]});\nconst foobarProxyLB = new sakuracloud.ProxyLB(\"foobarProxyLB\", {\n    plan: 100,\n    vipFailover: true,\n    stickySession: true,\n    gzip: true,\n    proxyProtocol: true,\n    timeout: 10,\n    region: \"is1\",\n    healthCheck: {\n        protocol: \"http\",\n        delayLoop: 10,\n        hostHeader: \"example.com\",\n        path: \"/\",\n    },\n    sorryServer: {\n        ipAddress: \"192.0.2.1\",\n        port: 80,\n    },\n    syslog: {\n        server: \"192.0.2.1\",\n        port: 514,\n    },\n    bindPorts: [{\n        proxyMode: \"http\",\n        port: 80,\n        responseHeaders: [{\n            header: \"Cache-Control\",\n            value: \"public, max-age=10\",\n        }],\n    }],\n    servers: [{\n        ipAddress: foobarServer.ipAddress,\n        port: 80,\n        group: \"group1\",\n    }],\n    rules: [\n        {\n            action: \"forward\",\n            host: \"www.example.com\",\n            path: \"/\",\n            group: \"group1\",\n        },\n        {\n            action: \"redirect\",\n            host: \"www2.example.com\",\n            path: \"/\",\n            group: \"group1\",\n            redirectLocation: \"https://redirect.example.com\",\n            redirectStatusCode: \"301\",\n        },\n        {\n            action: \"fixed\",\n            host: \"www3.example.com\",\n            path: \"/\",\n            group: \"group1\",\n            fixedStatusCode: \"200\",\n            fixedContentType: \"text/plain\",\n            fixedMessageBody: \"body\",\n        },\n    ],\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_server = sakuracloud.Server(\"foobarServer\", network_interfaces=[sakuracloud.ServerNetworkInterfaceArgs(\n    upstream=\"shared\",\n)])\nfoobar_proxy_lb = sakuracloud.ProxyLB(\"foobarProxyLB\",\n    plan=100,\n    vip_failover=True,\n    sticky_session=True,\n    gzip=True,\n    proxy_protocol=True,\n    timeout=10,\n    region=\"is1\",\n    health_check=sakuracloud.ProxyLBHealthCheckArgs(\n        protocol=\"http\",\n        delay_loop=10,\n        host_header=\"example.com\",\n        path=\"/\",\n    ),\n    sorry_server=sakuracloud.ProxyLBSorryServerArgs(\n        ip_address=\"192.0.2.1\",\n        port=80,\n    ),\n    syslog=sakuracloud.ProxyLBSyslogArgs(\n        server=\"192.0.2.1\",\n        port=514,\n    ),\n    bind_ports=[sakuracloud.ProxyLBBindPortArgs(\n        proxy_mode=\"http\",\n        port=80,\n        response_headers=[sakuracloud.ProxyLBBindPortResponseHeaderArgs(\n            header=\"Cache-Control\",\n            value=\"public, max-age=10\",\n        )],\n    )],\n    servers=[sakuracloud.ProxyLBServerArgs(\n        ip_address=foobar_server.ip_address,\n        port=80,\n        group=\"group1\",\n    )],\n    rules=[\n        sakuracloud.ProxyLBRuleArgs(\n            action=\"forward\",\n            host=\"www.example.com\",\n            path=\"/\",\n            group=\"group1\",\n        ),\n        sakuracloud.ProxyLBRuleArgs(\n            action=\"redirect\",\n            host=\"www2.example.com\",\n            path=\"/\",\n            group=\"group1\",\n            redirect_location=\"https://redirect.example.com\",\n            redirect_status_code=\"301\",\n        ),\n        sakuracloud.ProxyLBRuleArgs(\n            action=\"fixed\",\n            host=\"www3.example.com\",\n            path=\"/\",\n            group=\"group1\",\n            fixed_status_code=\"200\",\n            fixed_content_type=\"text/plain\",\n            fixed_message_body=\"body\",\n        ),\n    ],\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarServer = new Sakuracloud.Server(\"foobarServer\", new Sakuracloud.ServerArgs\n        {\n            NetworkInterfaces = \n            {\n                new Sakuracloud.Inputs.ServerNetworkInterfaceArgs\n                {\n                    Upstream = \"shared\",\n                },\n            },\n        });\n        var foobarProxyLB = new Sakuracloud.ProxyLB(\"foobarProxyLB\", new Sakuracloud.ProxyLBArgs\n        {\n            Plan = 100,\n            VipFailover = true,\n            StickySession = true,\n            Gzip = true,\n            ProxyProtocol = true,\n            Timeout = 10,\n            Region = \"is1\",\n            HealthCheck = new Sakuracloud.Inputs.ProxyLBHealthCheckArgs\n            {\n                Protocol = \"http\",\n                DelayLoop = 10,\n                HostHeader = \"example.com\",\n                Path = \"/\",\n            },\n            SorryServer = new Sakuracloud.Inputs.ProxyLBSorryServerArgs\n            {\n                IpAddress = \"192.0.2.1\",\n                Port = 80,\n            },\n            Syslog = new Sakuracloud.Inputs.ProxyLBSyslogArgs\n            {\n                Server = \"192.0.2.1\",\n                Port = 514,\n            },\n            BindPorts = \n            {\n                new Sakuracloud.Inputs.ProxyLBBindPortArgs\n                {\n                    ProxyMode = \"http\",\n                    Port = 80,\n                    ResponseHeaders = \n                    {\n                        new Sakuracloud.Inputs.ProxyLBBindPortResponseHeaderArgs\n                        {\n                            Header = \"Cache-Control\",\n                            Value = \"public, max-age=10\",\n                        },\n                    },\n                },\n            },\n            Servers = \n            {\n                new Sakuracloud.Inputs.ProxyLBServerArgs\n                {\n                    IpAddress = foobarServer.IpAddress,\n                    Port = 80,\n                    Group = \"group1\",\n                },\n            },\n            Rules = \n            {\n                new Sakuracloud.Inputs.ProxyLBRuleArgs\n                {\n                    Action = \"forward\",\n                    Host = \"www.example.com\",\n                    Path = \"/\",\n                    Group = \"group1\",\n                },\n                new Sakuracloud.Inputs.ProxyLBRuleArgs\n                {\n                    Action = \"redirect\",\n                    Host = \"www2.example.com\",\n                    Path = \"/\",\n                    Group = \"group1\",\n                    RedirectLocation = \"https://redirect.example.com\",\n                    RedirectStatusCode = \"301\",\n                },\n                new Sakuracloud.Inputs.ProxyLBRuleArgs\n                {\n                    Action = \"fixed\",\n                    Host = \"www3.example.com\",\n                    Path = \"/\",\n                    Group = \"group1\",\n                    FixedStatusCode = \"200\",\n                    FixedContentType = \"text/plain\",\n                    FixedMessageBody = \"body\",\n                },\n            },\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarServer, err := sakuracloud.NewServer(ctx, \"foobarServer\", \u0026sakuracloud.ServerArgs{\n\t\t\tNetworkInterfaces: ServerNetworkInterfaceArray{\n\t\t\t\t\u0026ServerNetworkInterfaceArgs{\n\t\t\t\t\tUpstream: pulumi.String(\"shared\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewProxyLB(ctx, \"foobarProxyLB\", \u0026sakuracloud.ProxyLBArgs{\n\t\t\tPlan:          pulumi.Int(100),\n\t\t\tVipFailover:   pulumi.Bool(true),\n\t\t\tStickySession: pulumi.Bool(true),\n\t\t\tGzip:          pulumi.Bool(true),\n\t\t\tProxyProtocol: pulumi.Bool(true),\n\t\t\tTimeout:       pulumi.Int(10),\n\t\t\tRegion:        pulumi.String(\"is1\"),\n\t\t\tHealthCheck: \u0026ProxyLBHealthCheckArgs{\n\t\t\t\tProtocol:   pulumi.String(\"http\"),\n\t\t\t\tDelayLoop:  pulumi.Int(10),\n\t\t\t\tHostHeader: pulumi.String(\"example.com\"),\n\t\t\t\tPath:       pulumi.String(\"/\"),\n\t\t\t},\n\t\t\tSorryServer: \u0026ProxyLBSorryServerArgs{\n\t\t\t\tIpAddress: pulumi.String(\"192.0.2.1\"),\n\t\t\t\tPort:      pulumi.Int(80),\n\t\t\t},\n\t\t\tSyslog: \u0026ProxyLBSyslogArgs{\n\t\t\t\tServer: pulumi.String(\"192.0.2.1\"),\n\t\t\t\tPort:   pulumi.Int(514),\n\t\t\t},\n\t\t\tBindPorts: ProxyLBBindPortArray{\n\t\t\t\t\u0026ProxyLBBindPortArgs{\n\t\t\t\t\tProxyMode: pulumi.String(\"http\"),\n\t\t\t\t\tPort:      pulumi.Int(80),\n\t\t\t\t\tResponseHeaders: ProxyLBBindPortResponseHeaderArray{\n\t\t\t\t\t\t\u0026ProxyLBBindPortResponseHeaderArgs{\n\t\t\t\t\t\t\tHeader: pulumi.String(\"Cache-Control\"),\n\t\t\t\t\t\t\tValue:  pulumi.String(\"public, max-age=10\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tServers: ProxyLBServerArray{\n\t\t\t\t\u0026ProxyLBServerArgs{\n\t\t\t\t\tIpAddress: foobarServer.IpAddress,\n\t\t\t\t\tPort:      pulumi.Int(80),\n\t\t\t\t\tGroup:     pulumi.String(\"group1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRules: ProxyLBRuleArray{\n\t\t\t\t\u0026ProxyLBRuleArgs{\n\t\t\t\t\tAction: pulumi.String(\"forward\"),\n\t\t\t\t\tHost:   pulumi.String(\"www.example.com\"),\n\t\t\t\t\tPath:   pulumi.String(\"/\"),\n\t\t\t\t\tGroup:  pulumi.String(\"group1\"),\n\t\t\t\t},\n\t\t\t\t\u0026ProxyLBRuleArgs{\n\t\t\t\t\tAction:             pulumi.String(\"redirect\"),\n\t\t\t\t\tHost:               pulumi.String(\"www2.example.com\"),\n\t\t\t\t\tPath:               pulumi.String(\"/\"),\n\t\t\t\t\tGroup:              pulumi.String(\"group1\"),\n\t\t\t\t\tRedirectLocation:   pulumi.String(\"https://redirect.example.com\"),\n\t\t\t\t\tRedirectStatusCode: pulumi.String(\"301\"),\n\t\t\t\t},\n\t\t\t\t\u0026ProxyLBRuleArgs{\n\t\t\t\t\tAction:           pulumi.String(\"fixed\"),\n\t\t\t\t\tHost:             pulumi.String(\"www3.example.com\"),\n\t\t\t\t\tPath:             pulumi.String(\"/\"),\n\t\t\t\t\tGroup:            pulumi.String(\"group1\"),\n\t\t\t\t\tFixedStatusCode:  pulumi.String(\"200\"),\n\t\t\t\t\tFixedContentType: pulumi.String(\"text/plain\"),\n\t\t\t\t\tFixedMessageBody: pulumi.String(\"body\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "bindPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBBindPort:ProxyLBBindPort"
                    },
                    "description": "One or more `bind_port` blocks as defined below.\n"
                },
                "certificate": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBCertificate:ProxyLBCertificate",
                    "description": "An `certificate` block as defined below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ProxyLB. The length of this value must be in the range [`1`-`512`].\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record.\n"
                },
                "gzip": {
                    "type": "boolean",
                    "description": "The flag to enable gzip compression.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBHealthCheck:ProxyLBHealthCheck",
                    "description": "A `health_check` block as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the ProxyLB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ProxyLB. The length of this value must be in the range [`1`-`64`].\n"
                },
                "plan": {
                    "type": "integer",
                    "description": "The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]. Default:`100`.\n"
                },
                "proxyNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of CIDR block used by the ProxyLB to access the server.\n"
                },
                "proxyProtocol": {
                    "type": "boolean",
                    "description": "The flag to enable proxy protocol v2.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]. Changing this forces a new resource to be created. Default:`is1`.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBRule:ProxyLBRule"
                    },
                    "description": "One or more `rule` blocks as defined below.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBServer:ProxyLBServer"
                    },
                    "description": "One or more `server` blocks as defined below.\n"
                },
                "sorryServer": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBSorryServer:ProxyLBSorryServer",
                    "description": "A `sorry_server` block as defined below.\n"
                },
                "stickySession": {
                    "type": "boolean",
                    "description": "The flag to enable sticky session.\n"
                },
                "syslog": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBSyslog:ProxyLBSyslog",
                    "description": "A `syslog` block as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the ProxyLB.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout duration in seconds. Default:`10`.\n"
                },
                "vip": {
                    "type": "string",
                    "description": "The virtual IP address assigned to the ProxyLB.\n"
                },
                "vipFailover": {
                    "type": "boolean",
                    "description": "The flag to enable VIP fail-over. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "bindPorts",
                "certificate",
                "fqdn",
                "healthCheck",
                "name",
                "proxyNetworks",
                "syslog",
                "vip"
            ],
            "inputProperties": {
                "bindPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBBindPort:ProxyLBBindPort"
                    },
                    "description": "One or more `bind_port` blocks as defined below.\n"
                },
                "certificate": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBCertificate:ProxyLBCertificate",
                    "description": "An `certificate` block as defined below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ProxyLB. The length of this value must be in the range [`1`-`512`].\n"
                },
                "gzip": {
                    "type": "boolean",
                    "description": "The flag to enable gzip compression.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBHealthCheck:ProxyLBHealthCheck",
                    "description": "A `health_check` block as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the ProxyLB.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ProxyLB. The length of this value must be in the range [`1`-`64`].\n"
                },
                "plan": {
                    "type": "integer",
                    "description": "The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]. Default:`100`.\n"
                },
                "proxyProtocol": {
                    "type": "boolean",
                    "description": "The flag to enable proxy protocol v2.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]. Changing this forces a new resource to be created. Default:`is1`.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBRule:ProxyLBRule"
                    },
                    "description": "One or more `rule` blocks as defined below.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBServer:ProxyLBServer"
                    },
                    "description": "One or more `server` blocks as defined below.\n"
                },
                "sorryServer": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBSorryServer:ProxyLBSorryServer",
                    "description": "A `sorry_server` block as defined below.\n"
                },
                "stickySession": {
                    "type": "boolean",
                    "description": "The flag to enable sticky session.\n"
                },
                "syslog": {
                    "$ref": "#/types/sakuracloud:index/ProxyLBSyslog:ProxyLBSyslog",
                    "description": "A `syslog` block as defined below.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the ProxyLB.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout duration in seconds. Default:`10`.\n"
                },
                "vipFailover": {
                    "type": "boolean",
                    "description": "The flag to enable VIP fail-over. Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "bindPorts",
                "healthCheck"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProxyLB resources.\n",
                "properties": {
                    "bindPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/ProxyLBBindPort:ProxyLBBindPort"
                        },
                        "description": "One or more `bind_port` blocks as defined below.\n"
                    },
                    "certificate": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBCertificate:ProxyLBCertificate",
                        "description": "An `certificate` block as defined below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ProxyLB. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record.\n"
                    },
                    "gzip": {
                        "type": "boolean",
                        "description": "The flag to enable gzip compression.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBHealthCheck:ProxyLBHealthCheck",
                        "description": "A `health_check` block as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the ProxyLB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ProxyLB. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "plan": {
                        "type": "integer",
                        "description": "The plan name of the ProxyLB. This must be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`]. Default:`100`.\n"
                    },
                    "proxyNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of CIDR block used by the ProxyLB to access the server.\n"
                    },
                    "proxyProtocol": {
                        "type": "boolean",
                        "description": "The flag to enable proxy protocol v2.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The name of region that the proxy LB is in. This must be one of [`tk1`/`is1`/`anycast`]. Changing this forces a new resource to be created. Default:`is1`.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/ProxyLBRule:ProxyLBRule"
                        },
                        "description": "One or more `rule` blocks as defined below.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/ProxyLBServer:ProxyLBServer"
                        },
                        "description": "One or more `server` blocks as defined below.\n"
                    },
                    "sorryServer": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBSorryServer:ProxyLBSorryServer",
                        "description": "A `sorry_server` block as defined below.\n"
                    },
                    "stickySession": {
                        "type": "boolean",
                        "description": "The flag to enable sticky session.\n"
                    },
                    "syslog": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBSyslog:ProxyLBSyslog",
                        "description": "A `syslog` block as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the ProxyLB.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout duration in seconds. Default:`10`.\n"
                    },
                    "vip": {
                        "type": "string",
                        "description": "The virtual IP address assigned to the ProxyLB.\n"
                    },
                    "vipFailover": {
                        "type": "boolean",
                        "description": "The flag to enable VIP fail-over. Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/proxyLBACME:ProxyLBACME": {
            "description": "Manages a SakuraCloud ProxyLB ACME Setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarProxyLBACME = new sakuracloud.ProxyLBACME(\"foobarProxyLBACME\", {\n    proxylbId: sakuracloud_proxylb.foobar.id,\n    acceptTos: true,\n    commonName: \"www.example.com\",\n    subjectAltNames: [\"www1.example.com\"],\n    updateDelaySec: 120,\n});\nconst foobarProxyLB = sakuracloud.getProxyLB({\n    filter: {\n        names: [\"foobar\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_proxy_lbacme = sakuracloud.ProxyLBACME(\"foobarProxyLBACME\",\n    proxylb_id=sakuracloud_proxylb[\"foobar\"][\"id\"],\n    accept_tos=True,\n    common_name=\"www.example.com\",\n    subject_alt_names=[\"www1.example.com\"],\n    update_delay_sec=120)\nfoobar_proxy_lb = sakuracloud.get_proxy_lb(filter=sakuracloud.GetProxyLBFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarProxyLBACME = new Sakuracloud.ProxyLBACME(\"foobarProxyLBACME\", new Sakuracloud.ProxyLBACMEArgs\n        {\n            ProxylbId = sakuracloud_proxylb.Foobar.Id,\n            AcceptTos = true,\n            CommonName = \"www.example.com\",\n            SubjectAltNames = \n            {\n                \"www1.example.com\",\n            },\n            UpdateDelaySec = 120,\n        });\n        var foobarProxyLB = Output.Create(Sakuracloud.GetProxyLB.InvokeAsync(new Sakuracloud.GetProxyLBArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetProxyLBFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewProxyLBACME(ctx, \"foobarProxyLBACME\", \u0026sakuracloud.ProxyLBACMEArgs{\n\t\t\tProxylbId:  pulumi.Any(sakuracloud_proxylb.Foobar.Id),\n\t\t\tAcceptTos:  pulumi.Bool(true),\n\t\t\tCommonName: pulumi.String(\"www.example.com\"),\n\t\t\tSubjectAltNames: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"www1.example.com\"),\n\t\t\t},\n\t\t\tUpdateDelaySec: pulumi.Int(120),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.LookupProxyLB(ctx, \u0026GetProxyLBArgs{\n\t\t\tFilter: GetProxyLBFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "acceptTos": {
                    "type": "boolean",
                    "description": "The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ProxyLBACMECertificate:ProxyLBACMECertificate"
                    },
                    "description": "A list of `certificate` blocks as defined below.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.\n"
                },
                "proxylbId": {
                    "type": "string",
                    "description": "The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.\n"
                },
                "subjectAltNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Subject alternative names used by ACME. Changing this forces a new resource to be created.\n"
                },
                "updateDelaySec": {
                    "type": "integer",
                    "description": "The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "acceptTos",
                "certificates",
                "commonName",
                "proxylbId"
            ],
            "inputProperties": {
                "acceptTos": {
                    "type": "boolean",
                    "description": "The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.\n"
                },
                "proxylbId": {
                    "type": "string",
                    "description": "The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.\n"
                },
                "subjectAltNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Subject alternative names used by ACME. Changing this forces a new resource to be created.\n"
                },
                "updateDelaySec": {
                    "type": "integer",
                    "description": "The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "acceptTos",
                "commonName",
                "proxylbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProxyLBACME resources.\n",
                "properties": {
                    "acceptTos": {
                        "type": "boolean",
                        "description": "The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/). This must be set `true` explicitly. Changing this forces a new resource to be created.\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/ProxyLBACMECertificate:ProxyLBACMECertificate"
                        },
                        "description": "A list of `certificate` blocks as defined below.\n"
                    },
                    "commonName": {
                        "type": "string",
                        "description": "The FQDN used by ACME. This must set resolvable value. Changing this forces a new resource to be created.\n"
                    },
                    "proxylbId": {
                        "type": "string",
                        "description": "The id of the ProxyLB that set ACME settings to. Changing this forces a new resource to be created.\n"
                    },
                    "subjectAltNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Subject alternative names used by ACME. Changing this forces a new resource to be created.\n"
                    },
                    "updateDelaySec": {
                        "type": "integer",
                        "description": "The wait time in seconds. This typically used for waiting for a DNS propagation. Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/sIM:SIM": {
            "description": "Manages a SakuraCloud SIM.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.SIM(\"foobar\", {\n    //imei     = \"your-imei\"\n    carriers: [\n        \"softbank\",\n        \"docomo\",\n        \"kddi\",\n    ],\n    description: \"description\",\n    enabled: true,\n    iccid: \"your-iccid\",\n    passcode: \"your-password\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.SIM(\"foobar\",\n    carriers=[\n        \"softbank\",\n        \"docomo\",\n        \"kddi\",\n    ],\n    description=\"description\",\n    enabled=True,\n    iccid=\"your-iccid\",\n    passcode=\"your-password\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.SIM(\"foobar\", new Sakuracloud.SIMArgs\n        {\n            Carriers = \n            {\n                \"softbank\",\n                \"docomo\",\n                \"kddi\",\n            },\n            Description = \"description\",\n            Enabled = true,\n            Iccid = \"your-iccid\",\n            Passcode = \"your-password\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewSIM(ctx, \"foobar\", \u0026sakuracloud.SIMArgs{\n\t\t\tCarriers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"softbank\"),\n\t\t\t\tpulumi.String(\"docomo\"),\n\t\t\t\tpulumi.String(\"kddi\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tIccid:       pulumi.String(\"your-iccid\"),\n\t\t\tPasscode:    pulumi.String(\"your-password\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "carriers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SIM. The length of this value must be in the range [`1`-`512`].\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable the SIM. Default:`true`.\n"
                },
                "iccid": {
                    "type": "string",
                    "description": "ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the SIM.\n"
                },
                "imei": {
                    "type": "string",
                    "description": "The id of the device to restrict devices that can use the SIM.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address assigned to the SIM.\n"
                },
                "mobileGatewayId": {
                    "type": "string",
                    "description": "The id of the MobileGateway which the SIM is assigned.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SIM. The length of this value must be in the range [`1`-`64`].\n"
                },
                "passcode": {
                    "type": "string",
                    "description": "The passcord to authenticate the SIM. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the SIM.\n"
                }
            },
            "required": [
                "carriers",
                "iccid",
                "ipAddress",
                "mobileGatewayId",
                "name",
                "passcode"
            ],
            "inputProperties": {
                "carriers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SIM. The length of this value must be in the range [`1`-`512`].\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable the SIM. Default:`true`.\n"
                },
                "iccid": {
                    "type": "string",
                    "description": "ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the SIM.\n"
                },
                "imei": {
                    "type": "string",
                    "description": "The id of the device to restrict devices that can use the SIM.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SIM. The length of this value must be in the range [`1`-`64`].\n"
                },
                "passcode": {
                    "type": "string",
                    "description": "The passcord to authenticate the SIM. Changing this forces a new resource to be created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the SIM.\n"
                }
            },
            "requiredInputs": [
                "carriers",
                "iccid",
                "passcode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SIM resources.\n",
                "properties": {
                    "carriers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of a communication company. Each element must be one of `kddi`/`docomo`/`softbank`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SIM. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The flag to enable the SIM. Default:`true`.\n"
                    },
                    "iccid": {
                        "type": "string",
                        "description": "ICCID(Integrated Circuit Card ID) assigned to the SIM. Changing this forces a new resource to be created.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the SIM.\n"
                    },
                    "imei": {
                        "type": "string",
                        "description": "The id of the device to restrict devices that can use the SIM.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address assigned to the SIM.\n"
                    },
                    "mobileGatewayId": {
                        "type": "string",
                        "description": "The id of the MobileGateway which the SIM is assigned.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SIM. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "passcode": {
                        "type": "string",
                        "description": "The passcord to authenticate the SIM. Changing this forces a new resource to be created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the SIM.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/sSHKey:SSHKey": {
            "description": "Manages a SakuraCloud SSH Key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\nimport * from \"fs\";\n\nconst foobar = new sakuracloud.SSHKey(\"foobar\", {publicKey: fs.readFileSync(\"~/.ssh/id_rsa.pub\")});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.SSHKey(\"foobar\", public_key=(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.SSHKey(\"foobar\", new Sakuracloud.SSHKeyArgs\n        {\n            PublicKey = File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewSSHKey(ctx, \"foobar\", \u0026sakuracloud.SSHKeyArgs{\n\t\t\tPublicKey: readFileOrPanic(\"~/.ssh/id_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SSHKey. The length of this value must be in the range [`1`-`512`].\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the public key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSHKey. The length of this value must be in the range [`1`-`64`].\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The body of the public key. Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SSHKey. The length of this value must be in the range [`1`-`512`].\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSHKey. The length of this value must be in the range [`1`-`64`].\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The body of the public key. Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSHKey resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the SSHKey. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the public key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSHKey. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The body of the public key. Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/sSHKeyGen:SSHKeyGen": {
            "description": "Manages a SakuraCloud SSH Key Gen.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.SSHKeyGen(\"foobar\", {\n    //pass_phrase = \"your-pass-phrase\"\n    description: \"description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.SSHKeyGen(\"foobar\", description=\"description\")\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.SSHKeyGen(\"foobar\", new Sakuracloud.SSHKeyGenArgs\n        {\n            Description = \"description\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewSSHKeyGen(ctx, \"foobar\", \u0026sakuracloud.SSHKeyGenArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SSHKey. The length of this value must be in the range [`1`-`512`]. Changing this forces a new resource to be created.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the public key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSHKey. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.\n"
                },
                "passPhrase": {
                    "type": "string",
                    "description": "The pass phrase of the private key. The length of this value must be in the range [`8`-`64`]. Changing this forces a new resource to be created.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The body of the private key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The body of the public key.\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "privateKey",
                "publicKey"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the SSHKey. The length of this value must be in the range [`1`-`512`]. Changing this forces a new resource to be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SSHKey. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.\n"
                },
                "passPhrase": {
                    "type": "string",
                    "description": "The pass phrase of the private key. The length of this value must be in the range [`8`-`64`]. Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SSHKeyGen resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the SSHKey. The length of this value must be in the range [`1`-`512`]. Changing this forces a new resource to be created.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the public key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSHKey. The length of this value must be in the range [`1`-`64`]. Changing this forces a new resource to be created.\n"
                    },
                    "passPhrase": {
                        "type": "string",
                        "description": "The pass phrase of the private key. The length of this value must be in the range [`8`-`64`]. Changing this forces a new resource to be created.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The body of the private key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The body of the public key.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/server:Server": {
            "description": "Manages a SakuraCloud Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarPacketFilter = sakuracloud.getPacketFilter({\n    filter: {\n        names: [\"foobar\"],\n    },\n});\nconst ubuntu = sakuracloud.getArchive({\n    osType: \"ubuntu2004\",\n});\nconst foobarDisk = new sakuracloud.Disk(\"foobarDisk\", {sourceArchiveId: ubuntu.then(ubuntu =\u003e ubuntu.id)});\nconst foobarServer = new sakuracloud.Server(\"foobarServer\", {\n    disks: [foobarDisk.id],\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    networkInterfaces: [{\n        upstream: \"shared\",\n        packetFilterId: foobarPacketFilter.then(foobarPacketFilter =\u003e foobarPacketFilter.id),\n    }],\n    diskEditParameter: {\n        hostname: \"hostname\",\n        password: \"password\",\n        disablePwAuth: true,\n    },\n});\n// user_data = join(\"\\n\", [\n//   \"#cloud-config\",\n//   yamlencode({\n//     hostname: \"hostname\",\n//     password: \"password\",\n//     chpasswd: {\n//       expire: false,\n//     }\n//     ssh_pwauth: false,\n//     ssh_authorized_keys: [\n//       file(\"~/.ssh/id_rsa.pub\"),\n//     ],\n//   }),\n// ])\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_packet_filter = sakuracloud.get_packet_filter(filter=sakuracloud.GetPacketFilterFilterArgs(\n    names=[\"foobar\"],\n))\nubuntu = sakuracloud.get_archive(os_type=\"ubuntu2004\")\nfoobar_disk = sakuracloud.Disk(\"foobarDisk\", source_archive_id=ubuntu.id)\nfoobar_server = sakuracloud.Server(\"foobarServer\",\n    disks=[foobar_disk.id],\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    network_interfaces=[sakuracloud.ServerNetworkInterfaceArgs(\n        upstream=\"shared\",\n        packet_filter_id=foobar_packet_filter.id,\n    )],\n    disk_edit_parameter=sakuracloud.ServerDiskEditParameterArgs(\n        hostname=\"hostname\",\n        password=\"password\",\n        disable_pw_auth=True,\n    ))\n# user_data = join(\"\\n\", [\n#   \"#cloud-config\",\n#   yamlencode({\n#     hostname: \"hostname\",\n#     password: \"password\",\n#     chpasswd: {\n#       expire: false,\n#     }\n#     ssh_pwauth: false,\n#     ssh_authorized_keys: [\n#       file(\"~/.ssh/id_rsa.pub\"),\n#     ],\n#   }),\n# ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarPacketFilter = Output.Create(Sakuracloud.GetPacketFilter.InvokeAsync(new Sakuracloud.GetPacketFilterArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetPacketFilterFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n        var ubuntu = Output.Create(Sakuracloud.GetArchive.InvokeAsync(new Sakuracloud.GetArchiveArgs\n        {\n            OsType = \"ubuntu2004\",\n        }));\n        var foobarDisk = new Sakuracloud.Disk(\"foobarDisk\", new Sakuracloud.DiskArgs\n        {\n            SourceArchiveId = ubuntu.Apply(ubuntu =\u003e ubuntu.Id),\n        });\n        var foobarServer = new Sakuracloud.Server(\"foobarServer\", new Sakuracloud.ServerArgs\n        {\n            Disks = \n            {\n                foobarDisk.Id,\n            },\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            NetworkInterfaces = \n            {\n                new Sakuracloud.Inputs.ServerNetworkInterfaceArgs\n                {\n                    Upstream = \"shared\",\n                    PacketFilterId = foobarPacketFilter.Apply(foobarPacketFilter =\u003e foobarPacketFilter.Id),\n                },\n            },\n            DiskEditParameter = new Sakuracloud.Inputs.ServerDiskEditParameterArgs\n            {\n                Hostname = \"hostname\",\n                Password = \"password\",\n                DisablePwAuth = true,\n            },\n        });\n        // user_data = join(\"\\n\", [\n        //   \"#cloud-config\",\n        //   yamlencode({\n        //     hostname: \"hostname\",\n        //     password: \"password\",\n        //     chpasswd: {\n        //       expire: false,\n        //     }\n        //     ssh_pwauth: false,\n        //     ssh_authorized_keys: [\n        //       file(\"~/.ssh/id_rsa.pub\"),\n        //     ],\n        //   }),\n        // ])\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarPacketFilter, err := sakuracloud.LookupPacketFilter(ctx, \u0026GetPacketFilterArgs{\n\t\t\tFilter: GetPacketFilterFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := \"ubuntu2004\"\n\t\tubuntu, err := sakuracloud.LookupArchive(ctx, \u0026GetArchiveArgs{\n\t\t\tOsType: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoobarDisk, err := sakuracloud.NewDisk(ctx, \"foobarDisk\", \u0026sakuracloud.DiskArgs{\n\t\t\tSourceArchiveId: pulumi.String(ubuntu.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewServer(ctx, \"foobarServer\", \u0026sakuracloud.ServerArgs{\n\t\t\tDisks: pulumi.StringArray{\n\t\t\t\tfoobarDisk.ID(),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tNetworkInterfaces: ServerNetworkInterfaceArray{\n\t\t\t\t\u0026ServerNetworkInterfaceArgs{\n\t\t\t\t\tUpstream:       pulumi.String(\"shared\"),\n\t\t\t\t\tPacketFilterId: pulumi.String(foobarPacketFilter.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDiskEditParameter: \u0026ServerDiskEditParameterArgs{\n\t\t\t\tHostname:      pulumi.String(\"hostname\"),\n\t\t\t\tPassword:      pulumi.String(\"password\"),\n\t\t\t\tDisablePwAuth: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cdromId": {
                    "type": "string",
                    "description": "The id of the CD-ROM to attach to the Server.\n"
                },
                "commitment": {
                    "type": "string",
                    "description": "The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.\n"
                },
                "core": {
                    "type": "integer",
                    "description": "The number of virtual CPUs. Default:`1`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Server. The length of this value must be in the range [`1`-`512`].\n"
                },
                "diskEditParameter": {
                    "$ref": "#/types/sakuracloud:index/ServerDiskEditParameter:ServerDiskEditParameter",
                    "description": "A `disk_edit_parameter` block as defined below. This parameter conflicts with [`user_data`].\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of disk id connected to the server.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP address of DNS server in the zone.\n"
                },
                "forceShutdown": {
                    "type": "boolean",
                    "description": "The flag to use force shutdown when need to reboot/shutdown while applying.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway address used by the Server.\n"
                },
                "gpu": {
                    "type": "integer",
                    "description": "The number of GPUs.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the Server. The length of this value must be in the range [`1`-`64`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Server.\n"
                },
                "interfaceDriver": {
                    "type": "string",
                    "description": "The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address to assign to the Server.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The size of memory in GiB. Default:`1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Server. The length of this value must be in the range [`1`-`64`].\n"
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the Server.\n"
                },
                "networkAddress": {
                    "type": "string",
                    "description": "The network address which the `ip_address` belongs.\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ServerNetworkInterface:ServerNetworkInterface"
                    },
                    "description": "One or more `network_interface` blocks as defined below.\n"
                },
                "privateHostId": {
                    "type": "string",
                    "description": "The id of the PrivateHost which the Server is assigned.\n"
                },
                "privateHostName": {
                    "type": "string",
                    "description": "The id of the PrivateHost which the Server is assigned.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string representing the user data used by cloud-init. This parameter conflicts with [`disk_edit_parameter`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "dnsServers",
                "gateway",
                "hostname",
                "ipAddress",
                "name",
                "netmask",
                "networkAddress",
                "privateHostName",
                "zone"
            ],
            "inputProperties": {
                "cdromId": {
                    "type": "string",
                    "description": "The id of the CD-ROM to attach to the Server.\n"
                },
                "commitment": {
                    "type": "string",
                    "description": "The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.\n"
                },
                "core": {
                    "type": "integer",
                    "description": "The number of virtual CPUs. Default:`1`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Server. The length of this value must be in the range [`1`-`512`].\n"
                },
                "diskEditParameter": {
                    "$ref": "#/types/sakuracloud:index/ServerDiskEditParameter:ServerDiskEditParameter",
                    "description": "A `disk_edit_parameter` block as defined below. This parameter conflicts with [`user_data`].\n"
                },
                "disks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of disk id connected to the server.\n"
                },
                "forceShutdown": {
                    "type": "boolean",
                    "description": "The flag to use force shutdown when need to reboot/shutdown while applying.\n"
                },
                "gpu": {
                    "type": "integer",
                    "description": "The number of GPUs.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Server.\n"
                },
                "interfaceDriver": {
                    "type": "string",
                    "description": "The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.\n"
                },
                "memory": {
                    "type": "integer",
                    "description": "The size of memory in GiB. Default:`1`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Server. The length of this value must be in the range [`1`-`64`].\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/ServerNetworkInterface:ServerNetworkInterface"
                    },
                    "description": "One or more `network_interface` blocks as defined below.\n"
                },
                "privateHostId": {
                    "type": "string",
                    "description": "The id of the PrivateHost which the Server is assigned.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "A string representing the user data used by cloud-init. This parameter conflicts with [`disk_edit_parameter`].\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "cdromId": {
                        "type": "string",
                        "description": "The id of the CD-ROM to attach to the Server.\n"
                    },
                    "commitment": {
                        "type": "string",
                        "description": "The policy of how to allocate virtual CPUs to the server. This must be one of [`standard`/`dedicatedcpu`]. Default:`standard`.\n"
                    },
                    "core": {
                        "type": "integer",
                        "description": "The number of virtual CPUs. Default:`1`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Server. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "diskEditParameter": {
                        "$ref": "#/types/sakuracloud:index/ServerDiskEditParameter:ServerDiskEditParameter",
                        "description": "A `disk_edit_parameter` block as defined below. This parameter conflicts with [`user_data`].\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of disk id connected to the server.\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP address of DNS server in the zone.\n"
                    },
                    "forceShutdown": {
                        "type": "boolean",
                        "description": "The flag to use force shutdown when need to reboot/shutdown while applying.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The gateway address used by the Server.\n"
                    },
                    "gpu": {
                        "type": "integer",
                        "description": "The number of GPUs.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the Server. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Server.\n"
                    },
                    "interfaceDriver": {
                        "type": "string",
                        "description": "The driver name of network interface. This must be one of [`virtio`/`e1000`]. Default:`virtio`.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address to assign to the Server.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The size of memory in GiB. Default:`1`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Server. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "netmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet to assign to the Server.\n"
                    },
                    "networkAddress": {
                        "type": "string",
                        "description": "The network address which the `ip_address` belongs.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/ServerNetworkInterface:ServerNetworkInterface"
                        },
                        "description": "One or more `network_interface` blocks as defined below.\n"
                    },
                    "privateHostId": {
                        "type": "string",
                        "description": "The id of the PrivateHost which the Server is assigned.\n"
                    },
                    "privateHostName": {
                        "type": "string",
                        "description": "The id of the PrivateHost which the Server is assigned.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Server.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "A string representing the user data used by cloud-init. This parameter conflicts with [`disk_edit_parameter`].\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Server will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/simpleMonitor:SimpleMonitor": {
            "description": "Manages a SakuraCloud Simple Monitor.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.SimpleMonitor(\"foobar\", {\n    delayLoop: 60,\n    description: \"description\",\n    healthCheck: {\n        containsString: \"ok\",\n        hostHeader: \"example.com\",\n        http2: true,\n        path: \"/\",\n        port: 443,\n        protocol: \"https\",\n        sni: true,\n        status: 200,\n    },\n    notifyEmailEnabled: true,\n    notifyEmailHtml: true,\n    notifySlackEnabled: true,\n    notifySlackWebhook: \"https://hooks.slack.com/services/xxx/xxx/xxx\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    target: \"www.example.com\",\n    timeout: 10,\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.SimpleMonitor(\"foobar\",\n    delay_loop=60,\n    description=\"description\",\n    health_check=sakuracloud.SimpleMonitorHealthCheckArgs(\n        contains_string=\"ok\",\n        host_header=\"example.com\",\n        http2=True,\n        path=\"/\",\n        port=443,\n        protocol=\"https\",\n        sni=True,\n        status=200,\n    ),\n    notify_email_enabled=True,\n    notify_email_html=True,\n    notify_slack_enabled=True,\n    notify_slack_webhook=\"https://hooks.slack.com/services/xxx/xxx/xxx\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    target=\"www.example.com\",\n    timeout=10)\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.SimpleMonitor(\"foobar\", new Sakuracloud.SimpleMonitorArgs\n        {\n            DelayLoop = 60,\n            Description = \"description\",\n            HealthCheck = new Sakuracloud.Inputs.SimpleMonitorHealthCheckArgs\n            {\n                ContainsString = \"ok\",\n                HostHeader = \"example.com\",\n                Http2 = true,\n                Path = \"/\",\n                Port = 443,\n                Protocol = \"https\",\n                Sni = true,\n                Status = 200,\n            },\n            NotifyEmailEnabled = true,\n            NotifyEmailHtml = true,\n            NotifySlackEnabled = true,\n            NotifySlackWebhook = \"https://hooks.slack.com/services/xxx/xxx/xxx\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            Target = \"www.example.com\",\n            Timeout = 10,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewSimpleMonitor(ctx, \"foobar\", \u0026sakuracloud.SimpleMonitorArgs{\n\t\t\tDelayLoop:   pulumi.Int(60),\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tHealthCheck: \u0026SimpleMonitorHealthCheckArgs{\n\t\t\t\tContainsString: pulumi.String(\"ok\"),\n\t\t\t\tHostHeader:     pulumi.String(\"example.com\"),\n\t\t\t\tHttp2:          pulumi.Bool(true),\n\t\t\t\tPath:           pulumi.String(\"/\"),\n\t\t\t\tPort:           pulumi.Int(443),\n\t\t\t\tProtocol:       pulumi.String(\"https\"),\n\t\t\t\tSni:            pulumi.Bool(true),\n\t\t\t\tStatus:         pulumi.Int(200),\n\t\t\t},\n\t\t\tNotifyEmailEnabled: pulumi.Bool(true),\n\t\t\tNotifyEmailHtml:    pulumi.Bool(true),\n\t\t\tNotifySlackEnabled: pulumi.Bool(true),\n\t\t\tNotifySlackWebhook: pulumi.String(\"https://hooks.slack.com/services/xxx/xxx/xxx\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tTarget:  pulumi.String(\"www.example.com\"),\n\t\t\tTimeout: pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable monitoring by the simple monitor. Default:`true`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/sakuracloud:index/SimpleMonitorHealthCheck:SimpleMonitorHealthCheck",
                    "description": "A `health_check` block as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the SimpleMonitor.\n"
                },
                "notifyEmailEnabled": {
                    "type": "boolean",
                    "description": "The flag to enable notification by email. Default:`true`.\n"
                },
                "notifyEmailHtml": {
                    "type": "boolean",
                    "description": "The flag to enable HTML format instead of text format.\n"
                },
                "notifyInterval": {
                    "type": "integer",
                    "description": "The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.\n"
                },
                "notifySlackEnabled": {
                    "type": "boolean",
                    "description": "The flag to enable notification by slack/discord.\n"
                },
                "notifySlackWebhook": {
                    "type": "string",
                    "description": "The webhook URL for sending notification by slack/discord.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the SimpleMonitor.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in seconds for monitoring. This must be in the range [`10`-`30`].\n"
                }
            },
            "required": [
                "healthCheck",
                "target",
                "timeout"
            ],
            "inputProperties": {
                "delayLoop": {
                    "type": "integer",
                    "description": "The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The flag to enable monitoring by the simple monitor. Default:`true`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/sakuracloud:index/SimpleMonitorHealthCheck:SimpleMonitorHealthCheck",
                    "description": "A `health_check` block as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the SimpleMonitor.\n"
                },
                "notifyEmailEnabled": {
                    "type": "boolean",
                    "description": "The flag to enable notification by email. Default:`true`.\n"
                },
                "notifyEmailHtml": {
                    "type": "boolean",
                    "description": "The flag to enable HTML format instead of text format.\n"
                },
                "notifyInterval": {
                    "type": "integer",
                    "description": "The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.\n"
                },
                "notifySlackEnabled": {
                    "type": "boolean",
                    "description": "The flag to enable notification by slack/discord.\n"
                },
                "notifySlackWebhook": {
                    "type": "string",
                    "description": "The webhook URL for sending notification by slack/discord.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the SimpleMonitor.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "The timeout in seconds for monitoring. This must be in the range [`10`-`30`].\n"
                }
            },
            "requiredInputs": [
                "healthCheck",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SimpleMonitor resources.\n",
                "properties": {
                    "delayLoop": {
                        "type": "integer",
                        "description": "The interval in seconds between checks. This must be in the range [`60`-`3600`]. Default:`60`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SimpleMonitor. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The flag to enable monitoring by the simple monitor. Default:`true`.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/sakuracloud:index/SimpleMonitorHealthCheck:SimpleMonitorHealthCheck",
                        "description": "A `health_check` block as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the SimpleMonitor.\n"
                    },
                    "notifyEmailEnabled": {
                        "type": "boolean",
                        "description": "The flag to enable notification by email. Default:`true`.\n"
                    },
                    "notifyEmailHtml": {
                        "type": "boolean",
                        "description": "The flag to enable HTML format instead of text format.\n"
                    },
                    "notifyInterval": {
                        "type": "integer",
                        "description": "The interval in hours between notification. This must be in the range [`1`-`72`]. Default:`2`.\n"
                    },
                    "notifySlackEnabled": {
                        "type": "boolean",
                        "description": "The flag to enable notification by slack/discord.\n"
                    },
                    "notifySlackWebhook": {
                        "type": "string",
                        "description": "The webhook URL for sending notification by slack/discord.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the SimpleMonitor.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "The monitoring target of the simple monitor. This must be IP address or FQDN. Changing this forces a new resource to be created.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout in seconds for monitoring. This must be in the range [`10`-`30`].\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/subnet:Subnet": {
            "description": "Manages a SakuraCloud Subnet.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobarInternet = new sakuracloud.Internet(\"foobarInternet\", {});\nconst foobarSubnet = new sakuracloud.Subnet(\"foobarSubnet\", {\n    internetId: foobarInternet.id,\n    nextHop: foobarInternet.minIpAddress,\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar_internet = sakuracloud.Internet(\"foobarInternet\")\nfoobar_subnet = sakuracloud.Subnet(\"foobarSubnet\",\n    internet_id=foobar_internet.id,\n    next_hop=foobar_internet.min_ip_address)\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobarInternet = new Sakuracloud.Internet(\"foobarInternet\", new Sakuracloud.InternetArgs\n        {\n        });\n        var foobarSubnet = new Sakuracloud.Subnet(\"foobarSubnet\", new Sakuracloud.SubnetArgs\n        {\n            InternetId = foobarInternet.Id,\n            NextHop = foobarInternet.MinIpAddress,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoobarInternet, err := sakuracloud.NewInternet(ctx, \"foobarInternet\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewSubnet(ctx, \"foobarSubnet\", \u0026sakuracloud.SubnetArgs{\n\t\t\tInternetId: foobarInternet.ID(),\n\t\t\tNextHop:    foobarInternet.MinIpAddress,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "internetId": {
                    "type": "string",
                    "description": "The id of the switch+router resource that the subnet belongs. Changing this forces a new resource to be created.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of assigned global address to the subnet.\n"
                },
                "maxIpAddress": {
                    "type": "string",
                    "description": "Maximum IP address in assigned global addresses to the subnet.\n"
                },
                "minIpAddress": {
                    "type": "string",
                    "description": "Minimum IP address in assigned global addresses to the subnet.\n"
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]. Changing this forces a new resource to be created. Default:`28`.\n"
                },
                "networkAddress": {
                    "type": "string",
                    "description": "The IPv4 network address assigned to the Subnet.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "The ip address of the next-hop at the subnet.\n"
                },
                "switchId": {
                    "type": "string",
                    "description": "The id of the switch connected from the Subnet.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Subnet will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "internetId",
                "ipAddresses",
                "maxIpAddress",
                "minIpAddress",
                "networkAddress",
                "nextHop",
                "switchId",
                "zone"
            ],
            "inputProperties": {
                "internetId": {
                    "type": "string",
                    "description": "The id of the switch+router resource that the subnet belongs. Changing this forces a new resource to be created.\n"
                },
                "netmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]. Changing this forces a new resource to be created. Default:`28`.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "The ip address of the next-hop at the subnet.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Subnet will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "requiredInputs": [
                "internetId",
                "nextHop"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Subnet resources.\n",
                "properties": {
                    "internetId": {
                        "type": "string",
                        "description": "The id of the switch+router resource that the subnet belongs. Changing this forces a new resource to be created.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned global address to the subnet.\n"
                    },
                    "maxIpAddress": {
                        "type": "string",
                        "description": "Maximum IP address in assigned global addresses to the subnet.\n"
                    },
                    "minIpAddress": {
                        "type": "string",
                        "description": "Minimum IP address in assigned global addresses to the subnet.\n"
                    },
                    "netmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet to assign to the Subnet. This must be in the range [`26`-`28`]. Changing this forces a new resource to be created. Default:`28`.\n"
                    },
                    "networkAddress": {
                        "type": "string",
                        "description": "The IPv4 network address assigned to the Subnet.\n"
                    },
                    "nextHop": {
                        "type": "string",
                        "description": "The ip address of the next-hop at the subnet.\n"
                    },
                    "switchId": {
                        "type": "string",
                        "description": "The id of the switch connected from the Subnet.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Subnet will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/switch:Switch": {
            "description": "Manages a SakuraCloud Switch.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = new sakuracloud.Switch(\"foobar\", {\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.Switch(\"foobar\",\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = new Sakuracloud.Switch(\"foobar\", new Sakuracloud.SwitchArgs\n        {\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewSwitch(ctx, \"foobar\", \u0026sakuracloud.SwitchArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "bridgeId": {
                    "type": "string",
                    "description": "The bridge id attached to the Switch.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Switch. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Switch.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Switch. The length of this value must be in the range [`1`-`64`].\n"
                },
                "serverIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of server id connected to the switch.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Switch.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "name",
                "serverIds",
                "zone"
            ],
            "inputProperties": {
                "bridgeId": {
                    "type": "string",
                    "description": "The bridge id attached to the Switch.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Switch. The length of this value must be in the range [`1`-`512`].\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the Switch.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Switch. The length of this value must be in the range [`1`-`64`].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the Switch.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Switch resources.\n",
                "properties": {
                    "bridgeId": {
                        "type": "string",
                        "description": "The bridge id attached to the Switch.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Switch. The length of this value must be in the range [`1`-`512`].\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the Switch.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Switch. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of server id connected to the switch.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the Switch.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Switch will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/vPCRouter:VPCRouter": {
            "description": "Manages a SakuraCloud VPC Router.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst standard = new sakuracloud.VPCRouter(\"standard\", {\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    internetConnection: true,\n});\nconst foobarInternet = new sakuracloud.Internet(\"foobarInternet\", {});\nconst foobarSwitch = new sakuracloud.Switch(\"foobarSwitch\", {});\nconst premium = new sakuracloud.VPCRouter(\"premium\", {\n    description: \"description\",\n    tags: [\n        \"tag1\",\n        \"tag2\",\n    ],\n    plan: \"premium\",\n    internetConnection: true,\n    publicNetworkInterface: {\n        switchId: foobarInternet.switchId,\n        vip: foobarInternet.ipAddresses[0],\n        ipAddresses: [\n            foobarInternet.ipAddresses[1],\n            foobarInternet.ipAddresses[2],\n        ],\n        aliases: [foobarInternet.ipAddresses[3]],\n        vrid: 1,\n    },\n    privateNetworkInterfaces: [{\n        index: 1,\n        switchId: foobarSwitch.id,\n        vip: \"192.168.11.1\",\n        ipAddresses: [\n            \"192.168.11.2\",\n            \"192.168.11.3\",\n        ],\n        netmask: 24,\n    }],\n    dhcpServers: [{\n        interfaceIndex: 1,\n        rangeStart: \"192.168.11.11\",\n        rangeStop: \"192.168.11.20\",\n        dnsServers: [\n            \"8.8.8.8\",\n            \"8.8.4.4\",\n        ],\n    }],\n    dhcpStaticMappings: [{\n        ipAddress: \"192.168.11.10\",\n        macAddress: \"aa:bb:cc:aa:bb:cc\",\n    }],\n    firewalls: [{\n        interfaceIndex: 1,\n        direction: \"send\",\n        expressions: [\n            {\n                protocol: \"tcp\",\n                sourceNetwork: \"\",\n                sourcePort: \"80\",\n                destinationNetwork: \"\",\n                destinationPort: \"\",\n                allow: true,\n                logging: true,\n                description: \"desc\",\n            },\n            {\n                protocol: \"ip\",\n                sourceNetwork: \"\",\n                sourcePort: \"\",\n                destinationNetwork: \"\",\n                destinationPort: \"\",\n                allow: false,\n                logging: true,\n                description: \"desc\",\n            },\n        ],\n    }],\n    l2tp: {\n        preSharedSecret: \"example\",\n        rangeStart: \"192.168.11.21\",\n        rangeStop: \"192.168.11.30\",\n    },\n    portForwardings: [{\n        protocol: \"udp\",\n        publicPort: 10022,\n        privateIp: \"192.168.11.11\",\n        privatePort: 22,\n        description: \"desc\",\n    }],\n    pptp: {\n        rangeStart: \"192.168.11.31\",\n        rangeStop: \"192.168.11.40\",\n    },\n    wireGuard: {\n        ipAddress: \"192.168.31.1/24\",\n        peers: [{\n            name: \"example\",\n            ipAddress: \"192.168.31.11\",\n            publicKey: \"\u003cyour-public-key\u003e\",\n        }],\n    },\n    siteToSiteVpns: [{\n        peer: \"10.0.0.1\",\n        remoteId: \"10.0.0.1\",\n        preSharedSecret: \"example\",\n        routes: [\"10.0.0.0/8\"],\n        localPrefixes: [\"192.168.21.0/24\"],\n    }],\n    staticNats: [{\n        publicIp: foobarInternet.ipAddresses[3],\n        privateIp: \"192.168.11.12\",\n        description: \"desc\",\n    }],\n    staticRoutes: [{\n        prefix: \"172.16.0.0/16\",\n        nextHop: \"192.168.11.99\",\n    }],\n    users: [{\n        name: \"username\",\n        password: \"password\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nstandard = sakuracloud.VPCRouter(\"standard\",\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    internet_connection=True)\nfoobar_internet = sakuracloud.Internet(\"foobarInternet\")\nfoobar_switch = sakuracloud.Switch(\"foobarSwitch\")\npremium = sakuracloud.VPCRouter(\"premium\",\n    description=\"description\",\n    tags=[\n        \"tag1\",\n        \"tag2\",\n    ],\n    plan=\"premium\",\n    internet_connection=True,\n    public_network_interface=sakuracloud.VPCRouterPublicNetworkInterfaceArgs(\n        switch_id=foobar_internet.switch_id,\n        vip=foobar_internet.ip_addresses[0],\n        ip_addresses=[\n            foobar_internet.ip_addresses[1],\n            foobar_internet.ip_addresses[2],\n        ],\n        aliases=[foobar_internet.ip_addresses[3]],\n        vrid=1,\n    ),\n    private_network_interfaces=[sakuracloud.VPCRouterPrivateNetworkInterfaceArgs(\n        index=1,\n        switch_id=foobar_switch.id,\n        vip=\"192.168.11.1\",\n        ip_addresses=[\n            \"192.168.11.2\",\n            \"192.168.11.3\",\n        ],\n        netmask=24,\n    )],\n    dhcp_servers=[sakuracloud.VPCRouterDhcpServerArgs(\n        interface_index=1,\n        range_start=\"192.168.11.11\",\n        range_stop=\"192.168.11.20\",\n        dns_servers=[\n            \"8.8.8.8\",\n            \"8.8.4.4\",\n        ],\n    )],\n    dhcp_static_mappings=[sakuracloud.VPCRouterDhcpStaticMappingArgs(\n        ip_address=\"192.168.11.10\",\n        mac_address=\"aa:bb:cc:aa:bb:cc\",\n    )],\n    firewalls=[sakuracloud.VPCRouterFirewallArgs(\n        interface_index=1,\n        direction=\"send\",\n        expressions=[\n            sakuracloud.VPCRouterFirewallExpressionArgs(\n                protocol=\"tcp\",\n                source_network=\"\",\n                source_port=\"80\",\n                destination_network=\"\",\n                destination_port=\"\",\n                allow=True,\n                logging=True,\n                description=\"desc\",\n            ),\n            sakuracloud.VPCRouterFirewallExpressionArgs(\n                protocol=\"ip\",\n                source_network=\"\",\n                source_port=\"\",\n                destination_network=\"\",\n                destination_port=\"\",\n                allow=False,\n                logging=True,\n                description=\"desc\",\n            ),\n        ],\n    )],\n    l2tp=sakuracloud.VPCRouterL2tpArgs(\n        pre_shared_secret=\"example\",\n        range_start=\"192.168.11.21\",\n        range_stop=\"192.168.11.30\",\n    ),\n    port_forwardings=[sakuracloud.VPCRouterPortForwardingArgs(\n        protocol=\"udp\",\n        public_port=10022,\n        private_ip=\"192.168.11.11\",\n        private_port=22,\n        description=\"desc\",\n    )],\n    pptp=sakuracloud.VPCRouterPptpArgs(\n        range_start=\"192.168.11.31\",\n        range_stop=\"192.168.11.40\",\n    ),\n    wire_guard=sakuracloud.VPCRouterWireGuardArgs(\n        ip_address=\"192.168.31.1/24\",\n        peers=[sakuracloud.VPCRouterWireGuardPeerArgs(\n            name=\"example\",\n            ip_address=\"192.168.31.11\",\n            public_key=\"\u003cyour-public-key\u003e\",\n        )],\n    ),\n    site_to_site_vpns=[sakuracloud.VPCRouterSiteToSiteVpnArgs(\n        peer=\"10.0.0.1\",\n        remote_id=\"10.0.0.1\",\n        pre_shared_secret=\"example\",\n        routes=[\"10.0.0.0/8\"],\n        local_prefixes=[\"192.168.21.0/24\"],\n    )],\n    static_nats=[sakuracloud.VPCRouterStaticNatArgs(\n        public_ip=foobar_internet.ip_addresses[3],\n        private_ip=\"192.168.11.12\",\n        description=\"desc\",\n    )],\n    static_routes=[sakuracloud.VPCRouterStaticRouteArgs(\n        prefix=\"172.16.0.0/16\",\n        next_hop=\"192.168.11.99\",\n    )],\n    users=[sakuracloud.VPCRouterUserArgs(\n        name=\"username\",\n        password=\"password\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var standard = new Sakuracloud.VPCRouter(\"standard\", new Sakuracloud.VPCRouterArgs\n        {\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            InternetConnection = true,\n        });\n        var foobarInternet = new Sakuracloud.Internet(\"foobarInternet\", new Sakuracloud.InternetArgs\n        {\n        });\n        var foobarSwitch = new Sakuracloud.Switch(\"foobarSwitch\", new Sakuracloud.SwitchArgs\n        {\n        });\n        var premium = new Sakuracloud.VPCRouter(\"premium\", new Sakuracloud.VPCRouterArgs\n        {\n            Description = \"description\",\n            Tags = \n            {\n                \"tag1\",\n                \"tag2\",\n            },\n            Plan = \"premium\",\n            InternetConnection = true,\n            PublicNetworkInterface = new Sakuracloud.Inputs.VPCRouterPublicNetworkInterfaceArgs\n            {\n                SwitchId = foobarInternet.SwitchId,\n                Vip = foobarInternet.IpAddresses.Apply(ipAddresses =\u003e ipAddresses[0]),\n                IpAddresses = \n                {\n                    foobarInternet.IpAddresses.Apply(ipAddresses =\u003e ipAddresses[1]),\n                    foobarInternet.IpAddresses.Apply(ipAddresses =\u003e ipAddresses[2]),\n                },\n                Aliases = \n                {\n                    foobarInternet.IpAddresses.Apply(ipAddresses =\u003e ipAddresses[3]),\n                },\n                Vrid = 1,\n            },\n            PrivateNetworkInterfaces = \n            {\n                new Sakuracloud.Inputs.VPCRouterPrivateNetworkInterfaceArgs\n                {\n                    Index = 1,\n                    SwitchId = foobarSwitch.Id,\n                    Vip = \"192.168.11.1\",\n                    IpAddresses = \n                    {\n                        \"192.168.11.2\",\n                        \"192.168.11.3\",\n                    },\n                    Netmask = 24,\n                },\n            },\n            DhcpServers = \n            {\n                new Sakuracloud.Inputs.VPCRouterDhcpServerArgs\n                {\n                    InterfaceIndex = 1,\n                    RangeStart = \"192.168.11.11\",\n                    RangeStop = \"192.168.11.20\",\n                    DnsServers = \n                    {\n                        \"8.8.8.8\",\n                        \"8.8.4.4\",\n                    },\n                },\n            },\n            DhcpStaticMappings = \n            {\n                new Sakuracloud.Inputs.VPCRouterDhcpStaticMappingArgs\n                {\n                    IpAddress = \"192.168.11.10\",\n                    MacAddress = \"aa:bb:cc:aa:bb:cc\",\n                },\n            },\n            Firewalls = \n            {\n                new Sakuracloud.Inputs.VPCRouterFirewallArgs\n                {\n                    InterfaceIndex = 1,\n                    Direction = \"send\",\n                    Expressions = \n                    {\n                        new Sakuracloud.Inputs.VPCRouterFirewallExpressionArgs\n                        {\n                            Protocol = \"tcp\",\n                            SourceNetwork = \"\",\n                            SourcePort = \"80\",\n                            DestinationNetwork = \"\",\n                            DestinationPort = \"\",\n                            Allow = true,\n                            Logging = true,\n                            Description = \"desc\",\n                        },\n                        new Sakuracloud.Inputs.VPCRouterFirewallExpressionArgs\n                        {\n                            Protocol = \"ip\",\n                            SourceNetwork = \"\",\n                            SourcePort = \"\",\n                            DestinationNetwork = \"\",\n                            DestinationPort = \"\",\n                            Allow = false,\n                            Logging = true,\n                            Description = \"desc\",\n                        },\n                    },\n                },\n            },\n            L2tp = new Sakuracloud.Inputs.VPCRouterL2tpArgs\n            {\n                PreSharedSecret = \"example\",\n                RangeStart = \"192.168.11.21\",\n                RangeStop = \"192.168.11.30\",\n            },\n            PortForwardings = \n            {\n                new Sakuracloud.Inputs.VPCRouterPortForwardingArgs\n                {\n                    Protocol = \"udp\",\n                    PublicPort = 10022,\n                    PrivateIp = \"192.168.11.11\",\n                    PrivatePort = 22,\n                    Description = \"desc\",\n                },\n            },\n            Pptp = new Sakuracloud.Inputs.VPCRouterPptpArgs\n            {\n                RangeStart = \"192.168.11.31\",\n                RangeStop = \"192.168.11.40\",\n            },\n            WireGuard = new Sakuracloud.Inputs.VPCRouterWireGuardArgs\n            {\n                IpAddress = \"192.168.31.1/24\",\n                Peers = \n                {\n                    new Sakuracloud.Inputs.VPCRouterWireGuardPeerArgs\n                    {\n                        Name = \"example\",\n                        IpAddress = \"192.168.31.11\",\n                        PublicKey = \"\u003cyour-public-key\u003e\",\n                    },\n                },\n            },\n            SiteToSiteVpns = \n            {\n                new Sakuracloud.Inputs.VPCRouterSiteToSiteVpnArgs\n                {\n                    Peer = \"10.0.0.1\",\n                    RemoteId = \"10.0.0.1\",\n                    PreSharedSecret = \"example\",\n                    Routes = \n                    {\n                        \"10.0.0.0/8\",\n                    },\n                    LocalPrefixes = \n                    {\n                        \"192.168.21.0/24\",\n                    },\n                },\n            },\n            StaticNats = \n            {\n                new Sakuracloud.Inputs.VPCRouterStaticNatArgs\n                {\n                    PublicIp = foobarInternet.IpAddresses.Apply(ipAddresses =\u003e ipAddresses[3]),\n                    PrivateIp = \"192.168.11.12\",\n                    Description = \"desc\",\n                },\n            },\n            StaticRoutes = \n            {\n                new Sakuracloud.Inputs.VPCRouterStaticRouteArgs\n                {\n                    Prefix = \"172.16.0.0/16\",\n                    NextHop = \"192.168.11.99\",\n                },\n            },\n            Users = \n            {\n                new Sakuracloud.Inputs.VPCRouterUserArgs\n                {\n                    Name = \"username\",\n                    Password = \"password\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.NewVPCRouter(ctx, \"standard\", \u0026sakuracloud.VPCRouterArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tInternetConnection: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoobarInternet, err := sakuracloud.NewInternet(ctx, \"foobarInternet\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoobarSwitch, err := sakuracloud.NewSwitch(ctx, \"foobarSwitch\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewVPCRouter(ctx, \"premium\", \u0026sakuracloud.VPCRouterArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"tag1\"),\n\t\t\t\tpulumi.String(\"tag2\"),\n\t\t\t},\n\t\t\tPlan:               pulumi.String(\"premium\"),\n\t\t\tInternetConnection: pulumi.Bool(true),\n\t\t\tPublicNetworkInterface: \u0026VPCRouterPublicNetworkInterfaceArgs{\n\t\t\t\tSwitchId: foobarInternet.SwitchId,\n\t\t\t\tVip: foobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {\n\t\t\t\t\treturn ipAddresses[0], nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\t\tfoobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {\n\t\t\t\t\t\treturn ipAddresses[1], nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\tfoobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {\n\t\t\t\t\t\treturn ipAddresses[2], nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\tAliases: pulumi.StringArray{\n\t\t\t\t\tfoobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {\n\t\t\t\t\t\treturn ipAddresses[3], nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t},\n\t\t\t\tVrid: pulumi.Int(1),\n\t\t\t},\n\t\t\tPrivateNetworkInterfaces: VPCRouterPrivateNetworkInterfaceArray{\n\t\t\t\t\u0026VPCRouterPrivateNetworkInterfaceArgs{\n\t\t\t\t\tIndex:    pulumi.Int(1),\n\t\t\t\t\tSwitchId: foobarSwitch.ID(),\n\t\t\t\t\tVip:      pulumi.String(\"192.168.11.1\"),\n\t\t\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"192.168.11.2\"),\n\t\t\t\t\t\tpulumi.String(\"192.168.11.3\"),\n\t\t\t\t\t},\n\t\t\t\t\tNetmask: pulumi.Int(24),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDhcpServers: VPCRouterDhcpServerArray{\n\t\t\t\t\u0026VPCRouterDhcpServerArgs{\n\t\t\t\t\tInterfaceIndex: pulumi.Int(1),\n\t\t\t\t\tRangeStart:     pulumi.String(\"192.168.11.11\"),\n\t\t\t\t\tRangeStop:      pulumi.String(\"192.168.11.20\"),\n\t\t\t\t\tDnsServers: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\t\t\tpulumi.String(\"8.8.4.4\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tDhcpStaticMappings: VPCRouterDhcpStaticMappingArray{\n\t\t\t\t\u0026VPCRouterDhcpStaticMappingArgs{\n\t\t\t\t\tIpAddress:  pulumi.String(\"192.168.11.10\"),\n\t\t\t\t\tMacAddress: pulumi.String(\"aa:bb:cc:aa:bb:cc\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFirewalls: VPCRouterFirewallArray{\n\t\t\t\t\u0026VPCRouterFirewallArgs{\n\t\t\t\t\tInterfaceIndex: pulumi.Int(1),\n\t\t\t\t\tDirection:      pulumi.String(\"send\"),\n\t\t\t\t\tExpressions: VPCRouterFirewallExpressionArray{\n\t\t\t\t\t\t\u0026VPCRouterFirewallExpressionArgs{\n\t\t\t\t\t\t\tProtocol:           pulumi.String(\"tcp\"),\n\t\t\t\t\t\t\tSourceNetwork:      pulumi.String(\"\"),\n\t\t\t\t\t\t\tSourcePort:         pulumi.String(\"80\"),\n\t\t\t\t\t\t\tDestinationNetwork: pulumi.String(\"\"),\n\t\t\t\t\t\t\tDestinationPort:    pulumi.String(\"\"),\n\t\t\t\t\t\t\tAllow:              pulumi.Bool(true),\n\t\t\t\t\t\t\tLogging:            pulumi.Bool(true),\n\t\t\t\t\t\t\tDescription:        pulumi.String(\"desc\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026VPCRouterFirewallExpressionArgs{\n\t\t\t\t\t\t\tProtocol:           pulumi.String(\"ip\"),\n\t\t\t\t\t\t\tSourceNetwork:      pulumi.String(\"\"),\n\t\t\t\t\t\t\tSourcePort:         pulumi.String(\"\"),\n\t\t\t\t\t\t\tDestinationNetwork: pulumi.String(\"\"),\n\t\t\t\t\t\t\tDestinationPort:    pulumi.String(\"\"),\n\t\t\t\t\t\t\tAllow:              pulumi.Bool(false),\n\t\t\t\t\t\t\tLogging:            pulumi.Bool(true),\n\t\t\t\t\t\t\tDescription:        pulumi.String(\"desc\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tL2tp: \u0026VPCRouterL2tpArgs{\n\t\t\t\tPreSharedSecret: pulumi.String(\"example\"),\n\t\t\t\tRangeStart:      pulumi.String(\"192.168.11.21\"),\n\t\t\t\tRangeStop:       pulumi.String(\"192.168.11.30\"),\n\t\t\t},\n\t\t\tPortForwardings: VPCRouterPortForwardingArray{\n\t\t\t\t\u0026VPCRouterPortForwardingArgs{\n\t\t\t\t\tProtocol:    pulumi.String(\"udp\"),\n\t\t\t\t\tPublicPort:  pulumi.Int(10022),\n\t\t\t\t\tPrivateIp:   pulumi.String(\"192.168.11.11\"),\n\t\t\t\t\tPrivatePort: pulumi.Int(22),\n\t\t\t\t\tDescription: pulumi.String(\"desc\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPptp: \u0026VPCRouterPptpArgs{\n\t\t\t\tRangeStart: pulumi.String(\"192.168.11.31\"),\n\t\t\t\tRangeStop:  pulumi.String(\"192.168.11.40\"),\n\t\t\t},\n\t\t\tWireGuard: \u0026VPCRouterWireGuardArgs{\n\t\t\t\tIpAddress: pulumi.String(\"192.168.31.1/24\"),\n\t\t\t\tPeers: VPCRouterWireGuardPeerArray{\n\t\t\t\t\t\u0026VPCRouterWireGuardPeerArgs{\n\t\t\t\t\t\tName:      pulumi.String(\"example\"),\n\t\t\t\t\t\tIpAddress: pulumi.String(\"192.168.31.11\"),\n\t\t\t\t\t\tPublicKey: pulumi.String(\"\u003cyour-public-key\u003e\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tSiteToSiteVpns: VPCRouterSiteToSiteVpnArray{\n\t\t\t\t\u0026VPCRouterSiteToSiteVpnArgs{\n\t\t\t\t\tPeer:            pulumi.String(\"10.0.0.1\"),\n\t\t\t\t\tRemoteId:        pulumi.String(\"10.0.0.1\"),\n\t\t\t\t\tPreSharedSecret: pulumi.String(\"example\"),\n\t\t\t\t\tRoutes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.0.0/8\"),\n\t\t\t\t\t},\n\t\t\t\t\tLocalPrefixes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"192.168.21.0/24\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tStaticNats: VPCRouterStaticNatArray{\n\t\t\t\t\u0026VPCRouterStaticNatArgs{\n\t\t\t\t\tPublicIp: foobarInternet.IpAddresses.ApplyT(func(ipAddresses []string) (string, error) {\n\t\t\t\t\t\treturn ipAddresses[3], nil\n\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\tPrivateIp:   pulumi.String(\"192.168.11.12\"),\n\t\t\t\t\tDescription: pulumi.String(\"desc\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStaticRoutes: VPCRouterStaticRouteArray{\n\t\t\t\t\u0026VPCRouterStaticRouteArgs{\n\t\t\t\t\tPrefix:  pulumi.String(\"172.16.0.0/16\"),\n\t\t\t\t\tNextHop: pulumi.String(\"192.168.11.99\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUsers: VPCRouterUserArray{\n\t\t\t\t\u0026VPCRouterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"username\"),\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the expression. The length of this value must be in the range [`0`-`512`].\n"
                },
                "dhcpServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterDhcpServer:VPCRouterDhcpServer"
                    },
                    "description": "One or more `dhcp_server` blocks as defined below.\n"
                },
                "dhcpStaticMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterDhcpStaticMapping:VPCRouterDhcpStaticMapping"
                    },
                    "description": "One or more `dhcp_static_mapping` blocks as defined below.\n"
                },
                "firewalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterFirewall:VPCRouterFirewall"
                    },
                    "description": "One or more `firewall` blocks as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the VPCRouter.\n"
                },
                "internetConnection": {
                    "type": "boolean",
                    "description": "The flag to enable connecting to the Internet from the VPC Router. Default:`true`.\n"
                },
                "l2tp": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterL2tp:VPCRouterL2tp",
                    "description": "A `l2tp` block as defined below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.\n"
                },
                "portForwardings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterPortForwarding:VPCRouterPortForwarding"
                    },
                    "description": "One or more `port_forwarding` blocks as defined below.\n"
                },
                "pptp": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterPptp:VPCRouterPptp",
                    "description": "A `pptp` block as defined below.\n"
                },
                "privateNetworkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterPrivateNetworkInterface:VPCRouterPrivateNetworkInterface"
                    },
                    "description": "A list of additional network interface setting. This doesn't include primary network interface setting.\n"
                },
                "publicIp": {
                    "type": "string",
                    "description": "The public IP address used for the static NAT.\n"
                },
                "publicNetmask": {
                    "type": "integer",
                    "description": "The bit length of the subnet to assign to the public network interface.\n"
                },
                "publicNetworkInterface": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterPublicNetworkInterface:VPCRouterPublicNetworkInterface",
                    "description": "An `public_network_interface` block as defined below. This block is required when `plan` is not `standard`.\n"
                },
                "siteToSiteVpns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterSiteToSiteVpn:VPCRouterSiteToSiteVpn"
                    },
                    "description": "One or more `site_to_site_vpn` blocks as defined below.\n"
                },
                "staticNats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterStaticNat:VPCRouterStaticNat"
                    },
                    "description": "One or more `static_nat` blocks as defined below.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterStaticRoute:VPCRouterStaticRoute"
                    },
                    "description": "One or more `static_route` blocks as defined below.\n"
                },
                "syslogHost": {
                    "type": "string",
                    "description": "The ip address of the syslog host to which the VPC Router sends logs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the VPCRouter.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterUser:VPCRouterUser"
                    },
                    "description": "One or more `user` blocks as defined below.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.\n"
                },
                "wireGuard": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterWireGuard:VPCRouterWireGuard",
                    "description": "A `wire_guard` block as defined below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "required": [
                "name",
                "publicIp",
                "publicNetmask",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the expression. The length of this value must be in the range [`0`-`512`].\n"
                },
                "dhcpServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterDhcpServer:VPCRouterDhcpServer"
                    },
                    "description": "One or more `dhcp_server` blocks as defined below.\n"
                },
                "dhcpStaticMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterDhcpStaticMapping:VPCRouterDhcpStaticMapping"
                    },
                    "description": "One or more `dhcp_static_mapping` blocks as defined below.\n"
                },
                "firewalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterFirewall:VPCRouterFirewall"
                    },
                    "description": "One or more `firewall` blocks as defined below.\n"
                },
                "iconId": {
                    "type": "string",
                    "description": "The icon id to attach to the VPCRouter.\n"
                },
                "internetConnection": {
                    "type": "boolean",
                    "description": "The flag to enable connecting to the Internet from the VPC Router. Default:`true`.\n"
                },
                "l2tp": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterL2tp:VPCRouterL2tp",
                    "description": "A `l2tp` block as defined below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].\n"
                },
                "plan": {
                    "type": "string",
                    "description": "The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.\n"
                },
                "portForwardings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterPortForwarding:VPCRouterPortForwarding"
                    },
                    "description": "One or more `port_forwarding` blocks as defined below.\n"
                },
                "pptp": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterPptp:VPCRouterPptp",
                    "description": "A `pptp` block as defined below.\n"
                },
                "privateNetworkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterPrivateNetworkInterface:VPCRouterPrivateNetworkInterface"
                    },
                    "description": "A list of additional network interface setting. This doesn't include primary network interface setting.\n"
                },
                "publicNetworkInterface": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterPublicNetworkInterface:VPCRouterPublicNetworkInterface",
                    "description": "An `public_network_interface` block as defined below. This block is required when `plan` is not `standard`.\n"
                },
                "siteToSiteVpns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterSiteToSiteVpn:VPCRouterSiteToSiteVpn"
                    },
                    "description": "One or more `site_to_site_vpn` blocks as defined below.\n"
                },
                "staticNats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterStaticNat:VPCRouterStaticNat"
                    },
                    "description": "One or more `static_nat` blocks as defined below.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterStaticRoute:VPCRouterStaticRoute"
                    },
                    "description": "One or more `static_route` blocks as defined below.\n"
                },
                "syslogHost": {
                    "type": "string",
                    "description": "The ip address of the syslog host to which the VPC Router sends logs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any tags to assign to the VPCRouter.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterUser:VPCRouterUser"
                    },
                    "description": "One or more `user` blocks as defined below.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.\n"
                },
                "wireGuard": {
                    "$ref": "#/types/sakuracloud:index/VPCRouterWireGuard:VPCRouterWireGuard",
                    "description": "A `wire_guard` block as defined below.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VPCRouter resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the expression. The length of this value must be in the range [`0`-`512`].\n"
                    },
                    "dhcpServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterDhcpServer:VPCRouterDhcpServer"
                        },
                        "description": "One or more `dhcp_server` blocks as defined below.\n"
                    },
                    "dhcpStaticMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterDhcpStaticMapping:VPCRouterDhcpStaticMapping"
                        },
                        "description": "One or more `dhcp_static_mapping` blocks as defined below.\n"
                    },
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterFirewall:VPCRouterFirewall"
                        },
                        "description": "One or more `firewall` blocks as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id to attach to the VPCRouter.\n"
                    },
                    "internetConnection": {
                        "type": "boolean",
                        "description": "The flag to enable connecting to the Internet from the VPC Router. Default:`true`.\n"
                    },
                    "l2tp": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterL2tp:VPCRouterL2tp",
                        "description": "A `l2tp` block as defined below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VPCRouter. The length of this value must be in the range [`1`-`64`].\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the VPCRouter. This must be one of [`standard`/`premium`/`highspec`/`highspec4000`]. Changing this forces a new resource to be created. Default:`standard`.\n"
                    },
                    "portForwardings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterPortForwarding:VPCRouterPortForwarding"
                        },
                        "description": "One or more `port_forwarding` blocks as defined below.\n"
                    },
                    "pptp": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterPptp:VPCRouterPptp",
                        "description": "A `pptp` block as defined below.\n"
                    },
                    "privateNetworkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterPrivateNetworkInterface:VPCRouterPrivateNetworkInterface"
                        },
                        "description": "A list of additional network interface setting. This doesn't include primary network interface setting.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP address used for the static NAT.\n"
                    },
                    "publicNetmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet to assign to the public network interface.\n"
                    },
                    "publicNetworkInterface": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterPublicNetworkInterface:VPCRouterPublicNetworkInterface",
                        "description": "An `public_network_interface` block as defined below. This block is required when `plan` is not `standard`.\n"
                    },
                    "siteToSiteVpns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterSiteToSiteVpn:VPCRouterSiteToSiteVpn"
                        },
                        "description": "One or more `site_to_site_vpn` blocks as defined below.\n"
                    },
                    "staticNats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterStaticNat:VPCRouterStaticNat"
                        },
                        "description": "One or more `static_nat` blocks as defined below.\n"
                    },
                    "staticRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterStaticRoute:VPCRouterStaticRoute"
                        },
                        "description": "One or more `static_route` blocks as defined below.\n"
                    },
                    "syslogHost": {
                        "type": "string",
                        "description": "The ip address of the syslog host to which the VPC Router sends logs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags to assign to the VPCRouter.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/VPCRouterUser:VPCRouterUser"
                        },
                        "description": "One or more `user` blocks as defined below.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "The version of the VPC Router. Changing this forces a new resource to be created. Default:`2`.\n"
                    },
                    "wireGuard": {
                        "$ref": "#/types/sakuracloud:index/VPCRouterWireGuard:VPCRouterWireGuard",
                        "description": "A `wire_guard` block as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the VPCRouter will be created. (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "sakuracloud:index/webAccelCertificate:WebAccelCertificate": {
            "description": "Manages a SakuraCloud sakuracloud_webaccel_certificate.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\nimport * from \"fs\";\n\nconst site = sakuracloud.getWebAccel({\n    name: \"your-site-name\",\n});\nconst foobar = new sakuracloud.WebAccelCertificate(\"foobar\", {\n    siteId: site.then(site =\u003e site.id),\n    certificateChain: fs.readFileSync(\"path/to/your/certificate/chain\"),\n    privateKey: fs.readFileSync(\"path/to/your/private/key\"),\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nsite = sakuracloud.get_web_accel(name=\"your-site-name\")\nfoobar = sakuracloud.WebAccelCertificate(\"foobar\",\n    site_id=site.id,\n    certificate_chain=(lambda path: open(path).read())(\"path/to/your/certificate/chain\"),\n    private_key=(lambda path: open(path).read())(\"path/to/your/private/key\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var site = Output.Create(Sakuracloud.GetWebAccel.InvokeAsync(new Sakuracloud.GetWebAccelArgs\n        {\n            Name = \"your-site-name\",\n        }));\n        var foobar = new Sakuracloud.WebAccelCertificate(\"foobar\", new Sakuracloud.WebAccelCertificateArgs\n        {\n            SiteId = site.Apply(site =\u003e site.Id),\n            CertificateChain = File.ReadAllText(\"path/to/your/certificate/chain\"),\n            PrivateKey = File.ReadAllText(\"path/to/your/private/key\"),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"your-site-name\"\n\t\tsite, err := sakuracloud.GetWebAccel(ctx, \u0026GetWebAccelArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sakuracloud.NewWebAccelCertificate(ctx, \"foobar\", \u0026sakuracloud.WebAccelCertificateArgs{\n\t\t\tSiteId:           pulumi.String(site.Id),\n\t\t\tCertificateChain: readFileOrPanic(\"path/to/your/certificate/chain\"),\n\t\t\tPrivateKey:       readFileOrPanic(\"path/to/your/private/key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "certificateChain": {
                    "type": "string",
                    "description": ".\n"
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": ".\n"
                },
                "issuerCommonName": {
                    "type": "string",
                    "description": ".\n"
                },
                "notAfter": {
                    "type": "string",
                    "description": ".\n"
                },
                "notBefore": {
                    "type": "string",
                    "description": ".\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": ".\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": ".\n"
                },
                "sha256Fingerprint": {
                    "type": "string",
                    "description": ".\n"
                },
                "siteId": {
                    "type": "string",
                    "description": ".\n"
                },
                "subjectCommonName": {
                    "type": "string",
                    "description": ".\n"
                }
            },
            "required": [
                "certificateChain",
                "dnsNames",
                "issuerCommonName",
                "notAfter",
                "notBefore",
                "privateKey",
                "serialNumber",
                "sha256Fingerprint",
                "siteId",
                "subjectCommonName"
            ],
            "inputProperties": {
                "certificateChain": {
                    "type": "string",
                    "description": ".\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": ".\n"
                },
                "siteId": {
                    "type": "string",
                    "description": ".\n"
                }
            },
            "requiredInputs": [
                "certificateChain",
                "privateKey",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAccelCertificate resources.\n",
                "properties": {
                    "certificateChain": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "dnsNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": ".\n"
                    },
                    "issuerCommonName": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "notAfter": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "notBefore": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "sha256Fingerprint": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "siteId": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "subjectCommonName": {
                        "type": "string",
                        "description": ".\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "sakuracloud:index/getArchive:getArchive": {
            "description": "Get information about an existing Archive.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getArchive({\n    osType: \"centos8\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_archive(os_type=\"centos8\")\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetArchive.InvokeAsync(new Sakuracloud.GetArchiveArgs\n        {\n            OsType = \"centos8\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"centos8\"\n\t\t_, err := sakuracloud.LookupArchive(ctx, \u0026GetArchiveArgs{\n\t\t\tOsType: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getArchive.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getArchiveFilter:getArchiveFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "The criteria used to filter SakuraCloud archives. This must be one of following:  \n- **CentOS**: [`centos`/`centos8`/`centos8stream`/`centos7`]\n- **Alt RHEL/CentOS**: [`almalinux`/`rockylinux`/`miracle`/`miraclelinux`]\n- **Ubuntu**: [`ubuntu`/`ubuntu2004`/`ubuntu1804`]\n- **Debian**: [`debian`/`debian10`/`debian11`]\n- **CoreOS/ContainerLinux**: `coreos`\n- **RancherOS**: `rancheros`\n- **k3OS**: `k3os`\n- **FreeBSD**: `freebsd`\n- **Kusanagi**: `kusanagi`\n- **Windows2016**: [`windows2016`/`windows2016-rds`/`windows2016-rds-office`]\n- **Windows2016+SQLServer**:  [`windows2016-sql-web`/`windows2016-sql-standard`/`windows2016-sql-standard-all`]\n- **Windows2016+SQLServer2017**: [`windows2016-sql2017-standard`/`windows2016-sql2017-enterprise`/`windows2016-sql2017-standard-all`]\n- **Windows2019**: [`windows2019`/`windows2019-rds`/`windows2019-rds-office2016`/`windows2019-rds-office2019`]\n- **Windows2019+SQLServer2017**: [`windows2019-sql2017-web`/`windows2019-sql2017-standard`/`windows2019-sql2017-enterprise`/`windows2019-sql2017-standard-all`]\n- **Windows2019+SQLServer2019**: [`windows2019-sql2019-web`/`windows2019-sql2019-standard`/`windows2019-sql2019-enterprise`/`windows2019-sql2019-standard-all`]\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Archive is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getArchive.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Archive.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getArchiveFilter:getArchiveFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the Archive.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Archive.\n"
                    },
                    "osType": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of Archive in GiB.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Archive.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "iconId",
                    "name",
                    "size",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getBridge:getBridge": {
            "description": "Get information about an existing Bridge.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getBridge({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_bridge(filter=sakuracloud.GetBridgeFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetBridge.InvokeAsync(new Sakuracloud.GetBridgeArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetBridgeFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupBridge(ctx, \u0026GetBridgeArgs{\n\t\t\tFilter: GetBridgeFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getBridge.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getBridgeFilter:getBridgeFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Bridge is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getBridge.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Bridge.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getBridgeFilter:getBridgeFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Bridge.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getCDROM:getCDROM": {
            "description": "Get information about an existing CD-ROM.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getCDROM({\n    filter: {\n        conditions: [{\n            name: \"Name\",\n            values: [\"Parted Magic 2013_08_01\"],\n        }],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_cdrom(filter=sakuracloud.GetCDROMFilterArgs(\n    conditions=[sakuracloud.GetCDROMFilterConditionArgs(\n        name=\"Name\",\n        values=[\"Parted Magic 2013_08_01\"],\n    )],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetCDROM.InvokeAsync(new Sakuracloud.GetCDROMArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetCDROMFilterArgs\n            {\n                Conditions = \n                {\n                    new Sakuracloud.Inputs.GetCDROMFilterConditionArgs\n                    {\n                        Name = \"Name\",\n                        Values = \n                        {\n                            \"Parted Magic 2013_08_01\",\n                        },\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupCDROM(ctx, \u0026GetCDROMArgs{\n\t\t\tFilter: GetCDROMFilter{\n\t\t\t\tConditions: []GetCDROMFilterCondition{\n\t\t\t\t\tGetCDROMFilterCondition{\n\t\t\t\t\t\tName: \"Name\",\n\t\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\t\"Parted Magic 2013_08_01\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCDROM.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getCDROMFilter:getCDROMFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the CD-ROM is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCDROM.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the CD-ROM.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getCDROMFilter:getCDROMFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the CD-ROM.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CD-ROM.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of CD-ROM in GiB.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the CD-ROM.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "iconId",
                    "name",
                    "size",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getCertificateAuthority:getCertificateAuthority": {
            "description": "Get information about an existing sakuracloud_certificate_authority.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getCertificateAuthority({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_certificate_authority(filter=sakuracloud.GetCertificateAuthorityFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetCertificateAuthority.InvokeAsync(new Sakuracloud.GetCertificateAuthorityArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetCertificateAuthorityFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupCertificateAuthority(ctx, \u0026GetCertificateAuthorityArgs{\n\t\t\tFilter: GetCertificateAuthorityFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificateAuthority.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getCertificateAuthorityFilter:getCertificateAuthorityFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCertificateAuthority.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "The body of the CA's certificate in PEM format.\n"
                    },
                    "clients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getCertificateAuthorityClient:getCertificateAuthorityClient"
                        },
                        "description": "A list of `client` blocks as defined below.\n"
                    },
                    "crlUrl": {
                        "type": "string",
                        "description": "The URL of the CRL.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the CertificateAuthority.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getCertificateAuthorityFilter:getCertificateAuthorityFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the CertificateAuthority.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the CertificateAuthority.\n"
                    },
                    "notAfter": {
                        "type": "string",
                        "description": "The date on which the certificate validity period ends, in RFC3339 format.\n"
                    },
                    "notBefore": {
                        "type": "string",
                        "description": "The date on which the certificate validity period begins, in RFC3339 format.\n"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "The body of the CA's certificate in PEM format.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getCertificateAuthorityServer:getCertificateAuthorityServer"
                        },
                        "description": "A list of `server` blocks as defined below.\n"
                    },
                    "subjectString": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the CertificateAuthority.\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificate",
                    "clients",
                    "crlUrl",
                    "description",
                    "iconId",
                    "name",
                    "notAfter",
                    "notBefore",
                    "serialNumber",
                    "servers",
                    "subjectString",
                    "tags",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getContainerRegistry:getContainerRegistry": {
            "description": "Get information about an existing Container Registry.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getContainerRegistry({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_container_registry(filter=sakuracloud.GetContainerRegistryFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetContainerRegistry.InvokeAsync(new Sakuracloud.GetContainerRegistryArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetContainerRegistryFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupContainerRegistry(ctx, \u0026GetContainerRegistryArgs{\n\t\t\tFilter: GetContainerRegistryFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerRegistry.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getContainerRegistryFilter:getContainerRegistryFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getContainerRegistry.\n",
                "properties": {
                    "accessLevel": {
                        "type": "string",
                        "description": "The level of access that allow to users. This will be one of [`readwrite`/`readonly`/`none`].\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ContainerRegistry.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getContainerRegistryFilter:getContainerRegistryFilter"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN for accessing the container registry. FQDN is built from `subdomain_label` + `.sakuracr.jp`.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the ContainerRegistry.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user name used to authenticate remote access.\n"
                    },
                    "subdomainLabel": {
                        "type": "string",
                        "description": "The label at the lowest of the FQDN used when be accessed from users.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the ContainerRegistry.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getContainerRegistryUser:getContainerRegistryUser"
                        },
                        "description": "A list of `user` blocks as defined below.\n"
                    },
                    "virtualDomain": {
                        "type": "string",
                        "description": "The alias for accessing the container registry.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessLevel",
                    "description",
                    "fqdn",
                    "iconId",
                    "name",
                    "subdomainLabel",
                    "tags",
                    "users",
                    "virtualDomain",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getDNS:getDNS": {
            "description": "Get information about an existing DNS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getDNS({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_dns(filter=sakuracloud.GetDNSFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetDNS.InvokeAsync(new Sakuracloud.GetDNSArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetDNSFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupDNS(ctx, \u0026GetDNSArgs{\n\t\t\tFilter: GetDNSFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDNS.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getDNSFilter:getDNSFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDNS.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the DNS.\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP address of DNS server that manage this zone.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getDNSFilter:getDNSFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the DNS.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "records": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getDNSRecord:getDNSRecord"
                        },
                        "description": "A list of `record` blocks as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the DNS.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of managed domain.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dnsServers",
                    "iconId",
                    "records",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getDatabase:getDatabase": {
            "description": "Get information about an existing Database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getDatabase({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_database(filter=sakuracloud.GetDatabaseFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetDatabase.InvokeAsync(new Sakuracloud.GetDatabaseArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetDatabaseFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupDatabase(ctx, \u0026GetDatabaseArgs{\n\t\t\tFilter: GetDatabaseFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getDatabaseFilter:getDatabaseFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Database is in (e.g. `is1a`, `tk1a`). Changing this forces a new resource to be created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "backups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getDatabaseBackup:getDatabaseBackup"
                        },
                        "description": "A list of `backup` blocks as defined below.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The type of the database. This will be one of [`mariadb`/`postgres`].\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Database.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getDatabaseFilter:getDatabaseFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the Database.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Database.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getDatabaseNetworkInterface:getDatabaseNetworkInterface"
                        },
                        "description": "A list of `network_interface` blocks as defined below.\n"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The map for setting RDBMS-specific parameters. Valid keys can be found with the `usacloud database list-parameters` command.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of default user on the database.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the Database. This will be one of [`10g`/`30g`/`90g`/`240g`/`500g`/`1t`].\n"
                    },
                    "replicaPassword": {
                        "type": "string",
                        "description": "The password of user that processing a replication.\n"
                    },
                    "replicaUser": {
                        "type": "string",
                        "description": "The name of user that processing a replication.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Database.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of default user on the database.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backups",
                    "databaseType",
                    "description",
                    "iconId",
                    "name",
                    "networkInterfaces",
                    "parameters",
                    "password",
                    "plan",
                    "replicaPassword",
                    "replicaUser",
                    "tags",
                    "username",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getDisk:getDisk": {
            "description": "Get information about an existing Disk.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getDisk({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_disk(filter=sakuracloud.GetDiskFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetDisk.InvokeAsync(new Sakuracloud.GetDiskArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetDiskFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupDisk(ctx, \u0026GetDiskArgs{\n\t\t\tFilter: GetDiskFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDisk.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getDiskFilter:getDiskFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Disk is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDisk.\n",
                "properties": {
                    "connector": {
                        "type": "string",
                        "description": "The name of the disk connector. This will be one of [`virtio`/`ide`].\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Disk.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getDiskFilter:getDiskFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the Disk.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Disk.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the Disk. This will be one of [`ssd`/`hdd`].\n"
                    },
                    "serverId": {
                        "type": "string",
                        "description": "The id of the Server connected to the Disk.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of Disk in GiB.\n"
                    },
                    "sourceArchiveId": {
                        "type": "string",
                        "description": "The id of the source archive.\n"
                    },
                    "sourceDiskId": {
                        "type": "string",
                        "description": "The id of the source disk.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Disk.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connector",
                    "description",
                    "iconId",
                    "name",
                    "plan",
                    "serverId",
                    "size",
                    "sourceArchiveId",
                    "sourceDiskId",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getESME:getESME": {
            "description": "Get information about an existing ESME.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getESME({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_esme(filter=sakuracloud.GetESMEFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetESME.InvokeAsync(new Sakuracloud.GetESMEArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetESMEFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupESME(ctx, \u0026GetESMEArgs{\n\t\t\tFilter: GetESMEFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getESME.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getESMEFilter:getESMEFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getESME.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the ESME.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getESMEFilter:getESMEFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the ESME.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ESME.\n"
                    },
                    "sendMessageWithGeneratedOtpApiUrl": {
                        "type": "string",
                        "description": "The API URL for send SMS with generated OTP.\n"
                    },
                    "sendMessageWithInputtedOtpApiUrl": {
                        "type": "string",
                        "description": "The API URL for send SMS with inputted OTP.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the ESME.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "iconId",
                    "name",
                    "sendMessageWithGeneratedOtpApiUrl",
                    "sendMessageWithInputtedOtpApiUrl",
                    "tags",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getEnhancedDB:getEnhancedDB": {
            "description": "Get information about an existing Enhanced Database.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getEnhancedDB({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_enhanced_db(filter=sakuracloud.GetEnhancedDBFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetEnhancedDB.InvokeAsync(new Sakuracloud.GetEnhancedDBArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetEnhancedDBFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupEnhancedDB(ctx, \u0026GetEnhancedDBArgs{\n\t\t\tFilter: GetEnhancedDBFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnhancedDB.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getEnhancedDBFilter:getEnhancedDBFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnhancedDB.\n",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "description": "The name of database.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "The type of database.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the EnhancedDB.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getEnhancedDBFilter:getEnhancedDBFilter"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The name of database host. This will be built from `database_name` + `tidb-is1.db.sakurausercontent.com`.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the EnhancedDB.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxConnections": {
                        "type": "integer",
                        "description": "The value of max connections setting.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EnhancedDB.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the EnhancedDB.\n"
                    }
                },
                "type": "object",
                "required": [
                    "databaseName",
                    "databaseType",
                    "description",
                    "hostname",
                    "iconId",
                    "maxConnections",
                    "name",
                    "region",
                    "tags",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getGSLB:getGSLB": {
            "description": "Get information about an existing GSLB.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getGSLB({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_gslb(filter=sakuracloud.GetGSLBFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetGSLB.InvokeAsync(new Sakuracloud.GetGSLBArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetGSLBFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupGSLB(ctx, \u0026GetGSLBArgs{\n\t\t\tFilter: GetGSLBFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGSLB.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getGSLBFilter:getGSLBFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGSLB.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the GSLB.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getGSLBFilter:getGSLBFilter"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN for accessing to the GSLB. This is typically used as value of CNAME record.\n"
                    },
                    "healthChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getGSLBHealthCheck:getGSLBHealthCheck"
                        },
                        "description": "A list of `health_check` blocks as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the GSLB.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the GSLB.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getGSLBServer:getGSLBServer"
                        },
                        "description": "A list of `server` blocks as defined below.\n"
                    },
                    "sorryServer": {
                        "type": "string",
                        "description": "The IP address of the SorryServer. This will be used when all servers are down.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the GSLB.\n"
                    },
                    "weighted": {
                        "type": "boolean",
                        "description": "The flag to enable weighted load-balancing.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "fqdn",
                    "healthChecks",
                    "iconId",
                    "name",
                    "servers",
                    "sorryServer",
                    "tags",
                    "weighted",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getIcon:getIcon": {
            "description": "Get information about an existing Icon.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getIcon({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_icon(filter=sakuracloud.GetIconFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetIcon.InvokeAsync(new Sakuracloud.GetIconArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetIconFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupIcon(ctx, \u0026GetIconArgs{\n\t\t\tFilter: GetIconFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIcon.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getIconFilter:getIconFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIcon.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getIconFilter:getIconFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Icon.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Icon.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL for getting the icon's raw data.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "tags",
                    "url",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getInternet:getInternet": {
            "description": "Get information about an existing Switch+Router.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getInternet({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_internet(filter=sakuracloud.GetInternetFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetInternet.InvokeAsync(new Sakuracloud.GetInternetArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetInternetFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupInternet(ctx, \u0026GetInternetArgs{\n\t\t\tFilter: GetInternetFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getInternet.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getInternetFilter:getInternetFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Switch+Router is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInternet.\n",
                "properties": {
                    "bandWidth": {
                        "type": "integer",
                        "description": "The bandwidth of the network connected to the Internet in Mbps.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Switch+Router.\n"
                    },
                    "enableIpv6": {
                        "type": "boolean",
                        "description": "The flag to enable IPv6.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getInternetFilter:getInternetFilter"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The IP address of the gateway used by Switch+Router.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the Switch+Router.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned global address to the Switch+Router.\n"
                    },
                    "ipv6NetworkAddress": {
                        "type": "string",
                        "description": "The IPv6 network address assigned to the Switch+Router.\n"
                    },
                    "ipv6Prefix": {
                        "type": "string",
                        "description": "The network prefix of assigned IPv6 addresses to the Switch+Router.\n"
                    },
                    "ipv6PrefixLen": {
                        "type": "integer",
                        "description": "The bit length of IPv6 network prefix.\n"
                    },
                    "maxIpAddress": {
                        "type": "string",
                        "description": "Maximum IP address in assigned global addresses to the Switch+Router.\n"
                    },
                    "minIpAddress": {
                        "type": "string",
                        "description": "Minimum IP address in assigned global addresses to the Switch+Router.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Switch+Router.\n"
                    },
                    "netmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet assigned to the Switch+Router.\n"
                    },
                    "networkAddress": {
                        "type": "string",
                        "description": "The IPv4 network address assigned to the Switch+Router.\n"
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the ID of Servers connected to the Switch+Router.\n"
                    },
                    "switchId": {
                        "type": "string",
                        "description": "The id of the switch connected from the Switch+Router.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Switch+Router.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bandWidth",
                    "description",
                    "enableIpv6",
                    "gateway",
                    "iconId",
                    "ipAddresses",
                    "ipv6NetworkAddress",
                    "ipv6Prefix",
                    "ipv6PrefixLen",
                    "maxIpAddress",
                    "minIpAddress",
                    "name",
                    "netmask",
                    "networkAddress",
                    "serverIds",
                    "switchId",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getLoadBalancer:getLoadBalancer": {
            "description": "Get information about an existing Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getLoadBalancer({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_load_balancer(filter=sakuracloud.GetLoadBalancerFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetLoadBalancer.InvokeAsync(new Sakuracloud.GetLoadBalancerArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetLoadBalancerFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupLoadBalancer(ctx, \u0026GetLoadBalancerArgs{\n\t\t\tFilter: GetLoadBalancerFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancer.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getLoadBalancerFilter:getLoadBalancerFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the LoadBalancer is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancer.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the VIP.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getLoadBalancerFilter:getLoadBalancerFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the LoadBalancer.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the LoadBalancer.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getLoadBalancerNetworkInterface:getLoadBalancerNetworkInterface"
                        },
                        "description": "A list of `network_interface` blocks as defined below.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the LoadBalancer. This will be one of [`standard`/`highspec`].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the LoadBalancer.\n"
                    },
                    "vips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getLoadBalancerVip:getLoadBalancerVip"
                        },
                        "description": "The virtual IP address.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "iconId",
                    "name",
                    "networkInterfaces",
                    "plan",
                    "tags",
                    "vips",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getLocalRouter:getLocalRouter": {
            "description": "Get information about an existing Local Router.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getLocalRouter({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_local_router(filter=sakuracloud.GetLocalRouterFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetLocalRouter.InvokeAsync(new Sakuracloud.GetLocalRouterArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetLocalRouterFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupLocalRouter(ctx, \u0026GetLocalRouterArgs{\n\t\t\tFilter: GetLocalRouterFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocalRouter.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getLocalRouterFilter:getLocalRouterFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocalRouter.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the LocalRouter.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getLocalRouterFilter:getLocalRouterFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the LocalRouter.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the LocalRouter.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getLocalRouterNetworkInterface:getLocalRouterNetworkInterface"
                        },
                        "description": "A list of `network_interface` blocks as defined below.\n"
                    },
                    "peers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getLocalRouterPeer:getLocalRouterPeer"
                        },
                        "description": "A list of `peer` blocks as defined below.\n"
                    },
                    "secretKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of secret key used for peering from other LocalRouters.\n"
                    },
                    "staticRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getLocalRouterStaticRoute:getLocalRouterStaticRoute"
                        },
                        "description": "A list of `static_route` blocks as defined below.\n"
                    },
                    "switches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getLocalRouterSwitch:getLocalRouterSwitch"
                        },
                        "description": "A list of `switch` blocks as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the LocalRouter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "iconId",
                    "name",
                    "networkInterfaces",
                    "peers",
                    "secretKeys",
                    "staticRoutes",
                    "switches",
                    "tags",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getNFS:getNFS": {
            "description": "Get information about an existing NFS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getNFS({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_nfs(filter=sakuracloud.GetNFSFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetNFS.InvokeAsync(new Sakuracloud.GetNFSArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetNFSFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupNFS(ctx, \u0026GetNFSArgs{\n\t\t\tFilter: GetNFSFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNFS.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getNFSFilter:getNFSFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the NFS is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNFS.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NFS.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getNFSFilter:getNFSFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the NFS.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the NFS.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getNFSNetworkInterface:getNFSNetworkInterface"
                        },
                        "description": "A list of `network_interface` blocks as defined below.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the NFS. This will be one of [`hdd`/`ssd`].\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of NFS in GiB.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the NFS.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "iconId",
                    "name",
                    "networkInterfaces",
                    "plan",
                    "size",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getNote:getNote": {
            "description": "Get information about an existing Note.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getNote({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_note(filter=sakuracloud.GetNoteFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetNote.InvokeAsync(new Sakuracloud.GetNoteArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetNoteFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupNote(ctx, \u0026GetNoteArgs{\n\t\t\tFilter: GetNoteFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNote.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getNoteFilter:getNoteFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNote.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class of the Note. This will be one of [`shell`/`yaml_cloud_config`].\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the Note.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Note.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getNoteFilter:getNoteFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the Note.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Note.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Note.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "content",
                    "description",
                    "iconId",
                    "name",
                    "tags",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getPacketFilter:getPacketFilter": {
            "description": "Get information about an existing Packet Filter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getPacketFilter({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_packet_filter(filter=sakuracloud.GetPacketFilterFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetPacketFilter.InvokeAsync(new Sakuracloud.GetPacketFilterArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetPacketFilterFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupPacketFilter(ctx, \u0026GetPacketFilterArgs{\n\t\t\tFilter: GetPacketFilterFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPacketFilter.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getPacketFilterFilter:getPacketFilterFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the PacketFilter is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPacketFilter.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the expression.\n"
                    },
                    "expressions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getPacketFilterExpression:getPacketFilterExpression"
                        },
                        "description": "One or more `expression` blocks as defined below.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getPacketFilterFilter:getPacketFilterFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PacketFilter.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "expressions",
                    "name",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getPrivateHost:getPrivateHost": {
            "description": "Get information about an existing Private Host.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getPrivateHost({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_private_host(filter=sakuracloud.GetPrivateHostFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetPrivateHost.InvokeAsync(new Sakuracloud.GetPrivateHostArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetPrivateHostFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupPrivateHost(ctx, \u0026GetPrivateHostArgs{\n\t\t\tFilter: GetPrivateHostFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateHost.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getPrivateHostFilter:getPrivateHostFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the PrivateHost is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateHost.\n",
                "properties": {
                    "assignedCore": {
                        "type": "integer",
                        "description": "The total number of CPUs assigned to servers on the private host.\n"
                    },
                    "assignedMemory": {
                        "type": "integer",
                        "description": "The total size of memory assigned to servers on the private host.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class of the PrivateHost. This will be one of [`dynamic`/`ms_windows`].\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the PrivateHost.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getPrivateHostFilter:getPrivateHostFilter"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the private host.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the PrivateHost.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PrivateHost.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the PrivateHost.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "assignedCore",
                    "assignedMemory",
                    "class",
                    "description",
                    "hostname",
                    "iconId",
                    "name",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getProxyLB:getProxyLB": {
            "description": "Get information about an existing ProxyLB.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getProxyLB({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_proxy_lb(filter=sakuracloud.GetProxyLBFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetProxyLB.InvokeAsync(new Sakuracloud.GetProxyLBArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetProxyLBFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupProxyLB(ctx, \u0026GetProxyLBArgs{\n\t\t\tFilter: GetProxyLBFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProxyLB.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getProxyLBFilter:getProxyLBFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProxyLB.\n",
                "properties": {
                    "bindPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getProxyLBBindPort:getProxyLBBindPort"
                        },
                        "description": "A list of `bind_port` blocks as defined below.\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getProxyLBCertificate:getProxyLBCertificate"
                        },
                        "description": "A list of `certificate` blocks as defined below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ProxyLB.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getProxyLBFilter:getProxyLBFilter"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The FQDN for accessing to the ProxyLB. This is typically used as value of CNAME record.\n"
                    },
                    "gzip": {
                        "type": "boolean",
                        "description": "The flag to enable gzip compression.\n"
                    },
                    "healthChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getProxyLBHealthCheck:getProxyLBHealthCheck"
                        },
                        "description": "A list of `health_check` blocks as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the ProxyLB.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ProxyLB.\n"
                    },
                    "plan": {
                        "type": "integer",
                        "description": "The plan name of the ProxyLB. This will be one of [`100`/`500`/`1000`/`5000`/`10000`/`50000`/`100000`/`400000`].\n"
                    },
                    "proxyNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of CIDR block used by the ProxyLB to access the server.\n"
                    },
                    "proxyProtocol": {
                        "type": "boolean",
                        "description": "The flag to enable proxy protocol v2.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The name of region that the proxy LB is in. This will be one of [`tk1`/`is1`/`anycast`].\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getProxyLBRule:getProxyLBRule"
                        },
                        "description": "A list of `rule` blocks as defined below.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getProxyLBServer:getProxyLBServer"
                        },
                        "description": "The address of syslog server.\n"
                    },
                    "sorryServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getProxyLBSorryServer:getProxyLBSorryServer"
                        },
                        "description": "A list of `sorry_server` blocks as defined below.\n"
                    },
                    "stickySession": {
                        "type": "boolean",
                        "description": "The flag to enable sticky session.\n"
                    },
                    "syslogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getProxyLBSyslog:getProxyLBSyslog"
                        },
                        "description": "A list of `syslog` blocks as defined below.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the ProxyLB.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout duration in seconds.\n"
                    },
                    "vip": {
                        "type": "string",
                        "description": "The virtual IP address assigned to the ProxyLB.\n"
                    },
                    "vipFailover": {
                        "type": "boolean",
                        "description": "The flag to enable VIP fail-over.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bindPorts",
                    "certificates",
                    "description",
                    "fqdn",
                    "gzip",
                    "healthChecks",
                    "iconId",
                    "name",
                    "plan",
                    "proxyNetworks",
                    "proxyProtocol",
                    "region",
                    "rules",
                    "servers",
                    "sorryServers",
                    "stickySession",
                    "syslogs",
                    "tags",
                    "timeout",
                    "vip",
                    "vipFailover",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getSSHKey:getSSHKey": {
            "description": "Get information about an existing SSH Key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getSSHKey({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_ssh_key(filter=sakuracloud.GetSSHKeyFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetSSHKey.InvokeAsync(new Sakuracloud.GetSSHKeyArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetSSHKeyFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupSSHKey(ctx, \u0026GetSSHKeyArgs{\n\t\t\tFilter: GetSSHKeyFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSSHKey.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getSSHKeyFilter:getSSHKeyFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSSHKey.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the SSHKey.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getSSHKeyFilter:getSSHKeyFilter"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "The fingerprint of public key.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SSHKey.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The value of public key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "fingerprint",
                    "name",
                    "publicKey",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getServer:getServer": {
            "description": "Get information about an existing Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getServer({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_server(filter=sakuracloud.GetServerFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetServer.InvokeAsync(new Sakuracloud.GetServerArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetServerFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupServer(ctx, \u0026GetServerArgs{\n\t\t\tFilter: GetServerFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServer.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getServerFilter:getServerFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Server is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServer.\n",
                "properties": {
                    "cdromId": {
                        "type": "string",
                        "description": "The id of the CD-ROM attached to the server.\n"
                    },
                    "commitment": {
                        "type": "string",
                        "description": "The policy of how to allocate virtual CPUs to the server. This will be one of [`standard`/`dedicatedcpu`].\n"
                    },
                    "core": {
                        "type": "integer",
                        "description": "The number of virtual CPUs.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Server.\n"
                    },
                    "disks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of disk id connected to the server.\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP address of DNS server in the zone.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getServerFilter:getServerFilter"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The IP address of the gateway used by Server.\n"
                    },
                    "gpu": {
                        "type": "integer",
                        "description": "The number of GPUs.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the Server.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the Server.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceDriver": {
                        "type": "string",
                        "description": "The driver name of network interface. This will be one of [`virtio`/`e1000`].\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address assigned to the Server.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The size of memory in GiB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Server.\n"
                    },
                    "netmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet assigned to the Server.\n"
                    },
                    "networkAddress": {
                        "type": "string",
                        "description": "The network address which the `ip_address` belongs.\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getServerNetworkInterface:getServerNetworkInterface"
                        },
                        "description": "A list of `network_interface` blocks as defined below.\n"
                    },
                    "privateHostId": {
                        "type": "string",
                        "description": "The id of the private host which the server is assigned.\n"
                    },
                    "privateHostName": {
                        "type": "string",
                        "description": "The name of the private host which the server is assigned.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Server.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cdromId",
                    "commitment",
                    "core",
                    "description",
                    "disks",
                    "dnsServers",
                    "gateway",
                    "gpu",
                    "hostname",
                    "iconId",
                    "interfaceDriver",
                    "ipAddress",
                    "memory",
                    "name",
                    "netmask",
                    "networkAddress",
                    "networkInterfaces",
                    "privateHostId",
                    "privateHostName",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getServerVNCInfo:getServerVNCInfo": {
            "description": "Get information about VNC for connecting to an existing Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = sakuracloud.getServerVNCInfo({\n    serverId: sakuracloud_server.foobar.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_server_vnc_info(server_id=sakuracloud_server[\"foobar\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetServerVNCInfo.InvokeAsync(new Sakuracloud.GetServerVNCInfoArgs\n        {\n            ServerId = sakuracloud_server.Foobar.Id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.GetServerVNCInfo(ctx, \u0026GetServerVNCInfoArgs{\n\t\t\tServerId: sakuracloud_server.Foobar.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServerVNCInfo.\n",
                "properties": {
                    "serverId": {
                        "type": "string",
                        "description": "The id of the Server.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Server is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "serverId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServerVNCInfo.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "The host name for connecting by VNC.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for connecting by VNC.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The port number for connecting by VNC.\n"
                    },
                    "serverId": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "host",
                    "password",
                    "port",
                    "serverId",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getSimpleMonitor:getSimpleMonitor": {
            "description": "Get information about an existing Simple Monitor.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getSimpleMonitor({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_simple_monitor(filter=sakuracloud.GetSimpleMonitorFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetSimpleMonitor.InvokeAsync(new Sakuracloud.GetSimpleMonitorArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetSimpleMonitorFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupSimpleMonitor(ctx, \u0026GetSimpleMonitorArgs{\n\t\t\tFilter: GetSimpleMonitorFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSimpleMonitor.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getSimpleMonitorFilter:getSimpleMonitorFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSimpleMonitor.\n",
                "properties": {
                    "delayLoop": {
                        "type": "integer",
                        "description": "The interval in seconds between checks.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SimpleMonitor.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The flag to enable monitoring by the simple monitor.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getSimpleMonitorFilter:getSimpleMonitorFilter"
                    },
                    "healthChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getSimpleMonitorHealthCheck:getSimpleMonitorHealthCheck"
                        },
                        "description": "A list of `health_check` blocks as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the SimpleMonitor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "notifyEmailEnabled": {
                        "type": "boolean",
                        "description": "The flag to enable notification by email.\n"
                    },
                    "notifyEmailHtml": {
                        "type": "boolean",
                        "description": "The flag to enable HTML format instead of text format.\n"
                    },
                    "notifyInterval": {
                        "type": "integer",
                        "description": "The interval in hours between notification.\n"
                    },
                    "notifySlackEnabled": {
                        "type": "boolean",
                        "description": "The flag to enable notification by slack/discord.\n"
                    },
                    "notifySlackWebhook": {
                        "type": "string",
                        "description": "The webhook URL for sending notification by slack/discord.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the SimpleMonitor.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "The monitoring target of the simple monitor. This will be IP address or FQDN.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "The timeout in seconds for monitoring.\n"
                    }
                },
                "type": "object",
                "required": [
                    "delayLoop",
                    "description",
                    "enabled",
                    "healthChecks",
                    "iconId",
                    "notifyEmailEnabled",
                    "notifyEmailHtml",
                    "notifyInterval",
                    "notifySlackEnabled",
                    "notifySlackWebhook",
                    "tags",
                    "target",
                    "timeout",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getSubnet:getSubnet": {
            "description": "Get information about an existing Subnet.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst config = new pulumi.Config();\nconst internetId = config.requireObject(\"internetId\");\nconst foobar = sakuracloud.getSubnet({\n    internetId: internetId,\n    index: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nconfig = pulumi.Config()\ninternet_id = config.require_object(\"internetId\")\nfoobar = sakuracloud.get_subnet(internet_id=internet_id,\n    index=1)\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Config();\n        var internetId = config.RequireObject\u003cdynamic\u003e(\"internetId\");\n        var foobar = Output.Create(Sakuracloud.GetSubnet.InvokeAsync(new Sakuracloud.GetSubnetArgs\n        {\n            InternetId = internetId,\n            Index = 1,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tinternetId := cfg.RequireObject(\"internetId\")\n\t\t_, err := sakuracloud.LookupSubnet(ctx, \u0026GetSubnetArgs{\n\t\t\tInternetId: internetId,\n\t\t\tIndex:      1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSubnet.\n",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the subnet in assigned to the Switch+Router. Changing this forces a new resource to be created.\n"
                    },
                    "internetId": {
                        "type": "string",
                        "description": "The id of the switch+router resource that the Subnet belongs. Changing this forces a new resource to be created.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Subnet is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object",
                "required": [
                    "index",
                    "internetId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSubnet.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "index": {
                        "type": "integer"
                    },
                    "internetId": {
                        "type": "string"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of assigned global address to the Subnet.\n"
                    },
                    "maxIpAddress": {
                        "type": "string",
                        "description": "Maximum IP address in assigned global addresses to the Subnet.\n"
                    },
                    "minIpAddress": {
                        "type": "string",
                        "description": "Minimum IP address in assigned global addresses to the Subnet.\n"
                    },
                    "netmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet assigned to the Subnet.\n"
                    },
                    "networkAddress": {
                        "type": "string",
                        "description": "The IPv4 network address assigned to the Subnet.\n"
                    },
                    "nextHop": {
                        "type": "string",
                        "description": "The ip address of the next-hop at the Subnet.\n"
                    },
                    "switchId": {
                        "type": "string",
                        "description": "The id of the switch connected from the Subnet.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "index",
                    "internetId",
                    "ipAddresses",
                    "maxIpAddress",
                    "minIpAddress",
                    "netmask",
                    "networkAddress",
                    "nextHop",
                    "switchId",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getSwitch:getSwitch": {
            "description": "Get information about an existing Switch.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getSwitch({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_switch(filter=sakuracloud.GetSwitchFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetSwitch.InvokeAsync(new Sakuracloud.GetSwitchArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetSwitchFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupSwitch(ctx, \u0026GetSwitchArgs{\n\t\t\tFilter: GetSwitchFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSwitch.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getSwitchFilter:getSwitchFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the Switch is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSwitch.\n",
                "properties": {
                    "bridgeId": {
                        "type": "string",
                        "description": "The bridge id attached to the Switch.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Switch.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getSwitchFilter:getSwitchFilter"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the Switch.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Switch.\n"
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of server id connected to the Switch.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the Switch.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "bridgeId",
                    "description",
                    "iconId",
                    "name",
                    "serverIds",
                    "tags",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getVPCRouter:getVPCRouter": {
            "description": "Get information about an existing VPC Router.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst foobar = pulumi.output(sakuracloud.getVPCRouter({\n    filter: {\n        names: [\"foobar\"],\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\nfoobar = sakuracloud.get_vpc_router(filter=sakuracloud.GetVPCRouterFilterArgs(\n    names=[\"foobar\"],\n))\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foobar = Output.Create(Sakuracloud.GetVPCRouter.InvokeAsync(new Sakuracloud.GetVPCRouterArgs\n        {\n            Filter = new Sakuracloud.Inputs.GetVPCRouterFilterArgs\n            {\n                Names = \n                {\n                    \"foobar\",\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.LookupVPCRouter(ctx, \u0026GetVPCRouterArgs{\n\t\t\tFilter: GetVPCRouterFilter{\n\t\t\t\tNames: []string{\n\t\t\t\t\t\"foobar\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVPCRouter.\n",
                "properties": {
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getVPCRouterFilter:getVPCRouterFilter",
                        "description": "One or more values used for filtering, as defined below.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The name of zone that the VPC Router is in (e.g. `is1a`, `tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVPCRouter.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the static NAT.\n"
                    },
                    "dhcpServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterDhcpServer:getVPCRouterDhcpServer"
                        },
                        "description": "A list of `dhcp_server` blocks as defined below.\n"
                    },
                    "dhcpStaticMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterDhcpStaticMapping:getVPCRouterDhcpStaticMapping"
                        },
                        "description": "A list of `dhcp_static_mapping` blocks as defined below.\n"
                    },
                    "filter": {
                        "$ref": "#/types/sakuracloud:index/getVPCRouterFilter:getVPCRouterFilter"
                    },
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterFirewall:getVPCRouterFirewall"
                        },
                        "description": "A list of `firewall` blocks as defined below.\n"
                    },
                    "iconId": {
                        "type": "string",
                        "description": "The icon id attached to the VPCRouter.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internetConnection": {
                        "type": "boolean",
                        "description": "The flag to enable connecting to the Internet from the VPC Router.\n"
                    },
                    "l2tps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterL2tp:getVPCRouterL2tp"
                        },
                        "description": "A list of `l2tp` blocks as defined below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the peer.\n"
                    },
                    "plan": {
                        "type": "string",
                        "description": "The plan name of the VPCRouter. This will be one of [`standard`/`premium`/`highspec`/`highspec4000`].\n"
                    },
                    "portForwardings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterPortForwarding:getVPCRouterPortForwarding"
                        },
                        "description": "A list of `port_forwarding` blocks as defined below. This represents a `Reverse NAT`.\n"
                    },
                    "pptps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterPptp:getVPCRouterPptp"
                        },
                        "description": "A list of `pptp` blocks as defined below.\n"
                    },
                    "privateNetworkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterPrivateNetworkInterface:getVPCRouterPrivateNetworkInterface"
                        },
                        "description": "A list of additional network interface setting. This doesn't include primary network interface setting.\n"
                    },
                    "publicIp": {
                        "type": "string",
                        "description": "The public IP address used for the static NAT.\n"
                    },
                    "publicNetmask": {
                        "type": "integer",
                        "description": "The bit length of the subnet to assign to the public network interface.\n"
                    },
                    "publicNetworkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterPublicNetworkInterface:getVPCRouterPublicNetworkInterface"
                        },
                        "description": "A list of additional network interface setting. This doesn't include primary network interface setting.\n"
                    },
                    "siteToSiteVpns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterSiteToSiteVpn:getVPCRouterSiteToSiteVpn"
                        },
                        "description": "A list of `site_to_site_vpn` blocks as defined below.\n"
                    },
                    "staticNats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterStaticNat:getVPCRouterStaticNat"
                        },
                        "description": "A list of `static_nat` blocks as defined below. This represents a `1:1 NAT`, doing static mapping to both send/receive to/from the Internet. This is only used when `plan` is not `standard`.\n"
                    },
                    "staticRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterStaticRoute:getVPCRouterStaticRoute"
                        },
                        "description": "A list of `static_route` blocks as defined below.\n"
                    },
                    "syslogHost": {
                        "type": "string",
                        "description": "The ip address of the syslog host to which the VPC Router sends logs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any tags assigned to the VPCRouter.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterUser:getVPCRouterUser"
                        },
                        "description": "A list of `user` blocks as defined below.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "The version of the VPC Router.\n"
                    },
                    "wireGuards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sakuracloud:index/getVPCRouterWireGuard:getVPCRouterWireGuard"
                        },
                        "description": "A list of `wire_guard` blocks as defined below.\n"
                    },
                    "zone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dhcpServers",
                    "dhcpStaticMappings",
                    "firewalls",
                    "iconId",
                    "internetConnection",
                    "l2tps",
                    "name",
                    "plan",
                    "portForwardings",
                    "pptps",
                    "privateNetworkInterfaces",
                    "publicIp",
                    "publicNetmask",
                    "publicNetworkInterfaces",
                    "siteToSiteVpns",
                    "staticNats",
                    "staticRoutes",
                    "syslogHost",
                    "tags",
                    "users",
                    "version",
                    "wireGuards",
                    "zone",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getWebAccel:getWebAccel": {
            "description": "Get information about an existing sakuracloud_webaccel.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWebAccel.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "name": {
                        "type": "string",
                        "description": ".\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWebAccel.\n",
                "properties": {
                    "cnameRecordValue": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "domainType": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "hasCertificate": {
                        "type": "boolean",
                        "description": ".\n"
                    },
                    "hostHeader": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "origin": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "siteId": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "status": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "subdomain": {
                        "type": "string",
                        "description": ".\n"
                    },
                    "txtRecordValue": {
                        "type": "string",
                        "description": ".\n"
                    }
                },
                "type": "object",
                "required": [
                    "cnameRecordValue",
                    "domain",
                    "domainType",
                    "hasCertificate",
                    "hostHeader",
                    "name",
                    "origin",
                    "siteId",
                    "status",
                    "subdomain",
                    "txtRecordValue",
                    "id"
                ]
            }
        },
        "sakuracloud:index/getZone:getZone": {
            "description": "Get information about an existing Zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sakuracloud from \"@pulumi/sakuracloud\";\n\nconst current = pulumi.output(sakuracloud.getZone());\nconst is1a = pulumi.output(sakuracloud.getZone({\n    name: \"is1a\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_sakuracloud as sakuracloud\n\ncurrent = sakuracloud.get_zone()\nis1a = sakuracloud.get_zone(name=\"is1a\")\n```\n```csharp\nusing Pulumi;\nusing Sakuracloud = Pulumi.Sakuracloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var current = Output.Create(Sakuracloud.GetZone.InvokeAsync());\n        var is1a = Output.Create(Sakuracloud.GetZone.InvokeAsync(new Sakuracloud.GetZoneArgs\n        {\n            Name = \"is1a\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-sakuracloud/sdk/go/sakuracloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sakuracloud.GetZone(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt0 := \"is1a\"\n\t\t_, err = sakuracloud.GetZone(ctx, \u0026GetZoneArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getZone.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the zone (e.g. `is1a`,`tk1a`).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getZone.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the zone.\n"
                    },
                    "dnsServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP address of DNS server in the zone.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The id of the region that the zone belongs.\n"
                    },
                    "regionName": {
                        "type": "string",
                        "description": "The name of the region that the zone belongs.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The id of the zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "dnsServers",
                    "name",
                    "regionId",
                    "regionName",
                    "zoneId",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/sacloud/pulumi-sakuracloud/sdk/go/sakuracloud"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0",
                "mime": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing SakuraCloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/sacloud/terraform-provider-sakuracloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-sakuracloud` repo](https://github.com/pulumi/pulumi-sakuracloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`sacloud/terraform-provider-sakuracloud` repo](https://github.com/sacloud/terraform-provider-sakuracloud/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/sacloud/terraform-provider-sakuracloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-sakuracloud` repo](https://github.com/pulumi/pulumi-sakuracloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`sacloud/terraform-provider-sakuracloud` repo](https://github.com/sacloud/terraform-provider-sakuracloud/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}